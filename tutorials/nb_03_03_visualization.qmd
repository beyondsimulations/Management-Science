---
title: "Tutorial 3.3 - Visualization & Integration"
subtitle: "Management Science - CEO Presentations That Wow!"
code-links:
   - text: Python
     href: nb_03_03_visualization.py
     icon: hand-thumbs-up
---

# Introduction

Welcome to your final CEO challenge at Bean Counter!

**The Board Meeting Challenge**

Tomorrow morning, you're presenting Bean Counter's annual performance to the board of directors and potential investors. You have:

- Massive datasets analyzed with NumPy
- Complex reports created with Pandas
- Incredible insights about the business

**The Problem:** Numbers alone don't convince boards. They need to SEE the story! A table with 1000 rows won't inspire investment, but a compelling chart will.

**Your Solution:** **Data Visualization** - turning your analyses into powerful visual stories that drive decisions and secure funding.

In this tutorial, you'll create the visualizations that will secure Bean Counter's future and cement your legacy as CEO.

::: {.callout-warning}
## How to Use This Tutorial
Import matplotlib along with pandas and numpy. Remember, we work with `uv`, so just use `uv add matplotlib` in the terminal. Now you can create compelling charts for your board presentation!
:::

::: {.callout-tip}
## Start practicing generate AI
The creation of plots is a perfect opportunity to start practicing generate AI. Usually you need a lot of code for nice visualizations and most of it is repetitive.
:::

---

# Section 1 - Bar Charts for Performance Comparison

As CEO, you often need to compare performance across stores, products, or time periods.
Bar charts are perfect for this.

```{python}
#| eval: true
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Top 5 store performance
stores = ['Airport', 'Downtown', 'Mall', 'Plaza', 'University']
revenue = [620, 450, 510, 485, 380]

# Create bar chart
plt.figure(figsize=(10, 6))
plt.bar(stores, revenue, color='#2E7D32')
plt.title('Bean Counter Top 5 Store Revenue (Thousands $)', fontsize=16, fontweight='bold')
plt.xlabel('Store Location', fontsize=12)
plt.ylabel('Revenue ($1000s)', fontsize=12)
plt.grid(axis='y', alpha=0.3)
plt.xticks(rotation=45)

# Add value labels on bars
for i, v in enumerate(revenue):
    plt.text(i, v + 10, f'${v}k', ha='center', fontweight='bold')

plt.tight_layout()
plt.show()
```

::: {.callout-tip}
## Bar Charts Are Your Best Friend
As CEO, bar charts will be your most-used visualization:

- Compare stores, products, or departments
- Show rankings clearly
- Easy for board members to understand
- Perfect for "top 10" or "bottom 5" analyses
:::

## Exercise 1.1 - Product Performance Bar Chart

Create a bar chart showing Bean Counter's product sales for the board meeting.

```{python}
#| eval: false
import pandas as pd
import matplotlib.pyplot as plt

# Product sales data
products_df = pd.DataFrame({
    'product': ['Latte', 'Espresso', 'Cappuccino', 'Americano', 'Mocha', 'Macchiato'],
    'units_sold': [3200, 4500, 2800, 2100, 1900, 1500]
})

# YOUR CODE BELOW
# 1. Sort products by units_sold (highest first)
products_sorted =

# 2. Create a bar chart


```

::: {.content-visible when-profile="solutions"}
```{python}
#| eval: false
# 1. Sort products by units_sold (highest first)
products_sorted = products_df.sort_values('units_sold', ascending=False)

# 2. Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(products_sorted['product'], products_sorted['units_sold'], color='#8B4513')
plt.title('Bean Counter Product Sales Volume', fontsize=16, fontweight='bold')
plt.xlabel('Product', fontsize=12)
plt.ylabel('Units Sold', fontsize=12)
plt.grid(axis='y', alpha=0.3)

# 3. Rotate x-axis labels for readability
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()
```
:::

---

# Section 2 - Line Plots for Trends Over Time

CEOs need to show growth and trends. Line plots are perfect for time series data.

```{python}
#| eval: true
import pandas as pd
import matplotlib.pyplot as plt

# Monthly revenue trend
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
revenue = [4.2, 4.5, 4.8, 5.1, 5.4, 5.8]

plt.figure(figsize=(10, 6))
plt.plot(months, revenue, marker='o', linewidth=2, markersize=8, color='#1976D2')
plt.title('Bean Counter Revenue Growth - H1 2024', fontsize=16, fontweight='bold')
plt.xlabel('Month', fontsize=12)
plt.ylabel('Revenue ($ Millions)', fontsize=12)
plt.grid(True, alpha=0.3)

# Add value labels
for i, v in enumerate(revenue):
    plt.text(i, v + 0.1, f'${v}M', ha='center')

# Add trend annotation
plt.annotate('38% Growth!', xy=(5, 5.8), xytext=(4, 5.5),
            arrowprops=dict(arrowstyle='->', color='green', lw=2),
            fontsize=12, color='green', fontweight='bold')

plt.tight_layout()
plt.show()
```

## Exercise 2.1 - Customer Growth Trend

Show the board Bean Counter's customer growth over the past 8 months.

```{python}
#| eval: false
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Customer data (in thousands)
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug']
customers = [145, 152, 158, 165, 174, 182, 195, 208]

# YOUR CODE BELOW
# Create a line plot showing customer growth

```

::: {.content-visible when-profile="solutions"}
```{python}
#| eval: false
plt.figure(figsize=(10, 6))
plt.plot(months, customers, marker='o', linewidth=2, markersize=8, color='#4CAF50')
plt.title('Bean Counter Customer Growth Trajectory', fontsize=16, fontweight='bold')
plt.xlabel('Month', fontsize=12)
plt.ylabel('Customers (Thousands)', fontsize=12)
plt.grid(True, alpha=0.3)

# Add a trend line or annotation to highlight growth
growth_pct = ((customers[-1] - customers[0]) / customers[0]) * 100
plt.annotate(f'+{growth_pct:.0f}% Growth!',
            xy=(7, 208), xytext=(5.5, 200),
            arrowprops=dict(arrowstyle='->', color='green', lw=2),
            fontsize=12, color='green', fontweight='bold')

plt.tight_layout()
plt.show()
```
:::

---

# Section 3 - Histograms for Distribution Analysis

Show the board how metrics are distributed across your empire.

```{python}
#| eval: true
import numpy as np
import matplotlib.pyplot as plt

# Simulate customer satisfaction scores
np.random.seed(42)
satisfaction_scores = np.random.normal(4.3, 0.4, 1000)
satisfaction_scores = np.clip(satisfaction_scores, 1, 5)

plt.figure(figsize=(10, 6))
plt.hist(satisfaction_scores, bins=20, alpha=0.7, edgecolor='black')
plt.title('Customer Satisfaction Distribution (n=1000)', fontsize=16, fontweight='bold')
plt.xlabel('Satisfaction Score', fontsize=12)
plt.ylabel('Number of Responses', fontsize=12)
plt.axvline(x=satisfaction_scores.mean(), color='red', linestyle='--', linewidth=2,
           label=f'Mean: {satisfaction_scores.mean():.2f}')
plt.legend()
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()
```

## Exercise 3.1 - Store Efficiency Distribution

Show the board how store efficiency is distributed across all locations.

```{python}
#| eval: false
import numpy as np
import matplotlib.pyplot as plt

# Simulate efficiency scores for 50 stores
np.random.seed(100)
efficiency_scores = np.random.normal(75, 12, 50)  # Mean 75, std 12

# YOUR CODE BELOW
# Create histogram of efficiency distribution


```

::: {.content-visible when-profile="solutions"}
```{python}
#| eval: false
plt.figure(figsize=(10, 6))
plt.hist(efficiency_scores, bins=10, color='#FF9800', alpha=0.7, edgecolor='black')
plt.title('Store Efficiency Distribution (50 Locations)', fontsize=16, fontweight='bold')
plt.xlabel('Efficiency Score', fontsize=12)
plt.ylabel('Number of Stores', fontsize=12)

# Add mean line
mean_efficiency = efficiency_scores.mean()
plt.axvline(x=mean_efficiency, color='red', linestyle='--', linewidth=2,
           label=f'Mean: {mean_efficiency:.1f}')
plt.legend()

plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()
```
:::

---

# Section 4 - Integrated Analysis with Pandas

Combine Pandas data manipulation with visualization for powerful insights.

```{python}
#| eval: true
import pandas as pd
import matplotlib.pyplot as plt

# Quarterly performance data
quarters_df = pd.DataFrame({
    'quarter': ['Q1', 'Q2', 'Q3', 'Q4'],
    'revenue': [4.2, 4.8, 5.3, 5.9],
    'profit': [1.3, 1.5, 1.8, 2.1],
    'customers': [145, 165, 188, 210]
})

# Create subplots for comprehensive view
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

# Revenue trend
axes[0].plot(quarters_df['quarter'], quarters_df['revenue'],
            marker='o', linewidth=2, markersize=10, color='#2E7D32')
axes[0].set_title('Revenue Growth', fontsize=14, fontweight='bold')
axes[0].set_ylabel('Revenue ($M)', fontsize=11)
axes[0].grid(True, alpha=0.3)

# Profit bars
axes[1].bar(quarters_df['quarter'], quarters_df['profit'], color='#1976D2')
axes[1].set_title('Quarterly Profit', fontsize=14, fontweight='bold')
axes[1].set_ylabel('Profit ($M)', fontsize=11)
axes[1].grid(axis='y', alpha=0.3)

# Customer growth
axes[2].plot(quarters_df['quarter'], quarters_df['customers'],
            marker='s', linewidth=2, markersize=10, color='#D32F2F')
axes[2].set_title('Customer Base', fontsize=14, fontweight='bold')
axes[2].set_ylabel('Customers (K)', fontsize=11)
axes[2].grid(True, alpha=0.3)

plt.suptitle('Bean Counter 2024 Performance Dashboard', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()
```

## Exercise 4.1 - Complete CEO Dashboard

Create an integrated dashboard combining NumPy simulation with Pandas analysis and visualization. Create revenue projections for the company, start at 6M, grow ~2% monthly with some randomness. You can use `np.random.uniform(0.95, 1.05)` for the randomness.

```{python}
#| eval: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Simulate next year's projections
np.random.seed(42)
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# YOUR CODE BELOW
# 1. Create revenue projections for the company

# 2. Create DataFrame

# 3. Calculate cumulative revenue

# 4. Create visualization with two subplots

```

::: {.content-visible when-profile="solutions"}
```{python}
#| eval: false

# 1. Create revenue projections for the company
base_revenue = 6.0
growth = 1.02
revenue_projection = []
for i in range(12):
    revenue = base_revenue * (growth ** i) * np.random.uniform(0.95, 1.05)
    revenue_projection.append(revenue)

# 2. Create DataFrame
projections_df = pd.DataFrame({
    'month': months,
    'revenue': revenue_projection
})

# 3. Calculate cumulative revenue
projections_df['cumulative'] = projections_df['revenue'].cumsum()

# 4. Create visualization with two subplots
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Monthly revenue bars
axes[0].bar(projections_df['month'][:6], projections_df['revenue'][:6],
           color='#2E7D32', alpha=0.7, label='Actual')
axes[0].bar(projections_df['month'][6:], projections_df['revenue'][6:],
           color='#FFA726', alpha=0.7, label='Projected')
axes[0].set_title('2025 Revenue Projections', fontsize=14, fontweight='bold')
axes[0].set_ylabel('Revenue ($M)', fontsize=11)
axes[0].legend()
axes[0].grid(axis='y', alpha=0.3)
axes[0].tick_params(axis='x', rotation=45)

# Cumulative revenue line
axes[1].plot(projections_df['month'], projections_df['cumulative'],
            marker='o', linewidth=2, color='#1976D2')
axes[1].set_title('Cumulative Revenue', fontsize=14, fontweight='bold')
axes[1].set_ylabel('Total Revenue ($M)', fontsize=11)
axes[1].grid(True, alpha=0.3)
axes[1].tick_params(axis='x', rotation=45)

plt.suptitle('Bean Counter 2025 Financial Projections', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()

```
:::

---

# Conclusion

**Congratulations! You've completed your CEO journey at Bean Counter!**

**You've mastered:**

- **Bar Charts** - Comparing performance across stores and products
- **Line Plots** - Showing growth trends over time
- **Histograms** - Understanding distributions of key metrics
- **Integrated Dashboards** - Combining multiple visualizations for comprehensive insights
- **NumPy + Pandas + Visualization** - The complete data science toolkit

**Your Bean Counter CEO visualization toolkit enables you to:**

- Present compelling stories to the board of directors
- Identify trends and patterns at a glance
- Compare performance across multiple dimensions
- Make data-driven decisions with confidence
- Communicate complex insights simply and effectively

**Remember:**

- Bar charts are best for comparisons
- Line plots show trends over time
- Histograms reveal distributions
- Always label your axes and add titles
- Use colors consistently across related charts
- Annotations can highlight key insights

**Your Bean Counter Legacy:**

From Barista Trainee to CEO, you've transformed Bean Counter into a data-driven enterprise.

- Standardized operations with functions
- Managed complex data with dictionaries
- Optimized decisions with sorting algorithms
- Processed big data with NumPy's speed
- Analyzed business metrics with Pandas
- Communicated insights with powerful visualizations

**What's Next:** Armed with these data science foundations, you're ready for the advanced algorithms in upcoming lectures! You'll tackle Monte Carlo simulations, forecasting, scheduling optimization, and more. The skills you've built here - from basic Python to advanced visualization - will be the foundation for solving complex management science problems!

{{< include ../include/tutorial_end.qmd >}}
