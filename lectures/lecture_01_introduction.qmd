---
title: "Welcome to Management Science"
subtitle: "Lecture 1 - Introduction & Python Setup"
author: "Dr. Tobias Vlćek"
format:
  revealjs:
    footer: " {{< meta title >}} | {{< meta author >}} | [Home](lec_00_introduction.qmd)"
    output-file: lec_01_presentation.html
---

# [About this Course]{.flow} {.title}

## About me

:::{.incremental}
- **Field:** Optimizing and simulating complex systems
- **Languages:** of choice: Julia, Python and Rust
- **Interest:** Modelling, Simulations, Machine Learning
- **Teaching:** OR, Algorithms, and Programming
- **Contact:** [vlcek@beyondsimulations.com](mailto:vlcek@beyondsimulations.com)
:::

. . .

:::{.callout-tip}
I really appreciate active participation and interaction!
:::

## Course Outline

:::{.incremental}
- **Part I:** Python Foundation (Lectures 1-3)
  - Variables, loops, functions, data science tools
- **Part II:** Management Science Tools (Lectures 4-9)
  - Monte Carlo, Forecasting, Scheduling, Routing, Multi-objective Optimization, Metaheuristics
- **Part III:** Consulting Competition (Lectures 10-12)
  - Client briefings, team development, final presentations
:::

. . .

:::{.callout-important}
You're not just students. You're now **consultants** learning to solve real business problems!
:::


## From Amazon to Hospitals: Where Algorithms Make Millions

:::{.incremental}
- **Amazon:** Routing algorithms save millions in delivery costs
- **Uber:** Real-time matching algorithms connect drivers and riders
- **Hospitals:** Scheduling algorithms optimize nurse shifts and OR usage
- **Airlines:** Revenue management algorithms price tickets dynamically
- **Manufacturing:** Production scheduling reduces waste and delays
:::

. . .

[Management Science is everywhere!]{.highlight}


## The Consultant Mindset

::: incremental
- You'll work on **business problems**
- Learn to **communicate solutions** to non-technical clients
- Build **practical tools** that solve actual challenges
- Compete in a **consulting competition** with real scenarios
:::

. . .

:::{.callout-tip}
Think like a consultant: What value does my solution bring to the business?
:::


## Course Structure

::: incremental
- **12 lectures** of intensive learning
- **3 hours per lecture** (with breaks!)
- **Interactive format:**
  - Concepts & Setup
  - Hands-on Python notebooks
  - Consutling Competition
- **Final competition:** Apply everything you've learned
:::

. . .

[Each lecture builds on the previous - attendance is important!]{.highlight}


## Grading

**Grade Composition:**

- Course has 100 points, 50 needed to pass
- 2 Assignments: 30 points each
- Final Consulting Project: 40 points

. . .

::: callout-tip
We will have several competitions including our final competition, where you will have the chance to earn bonus points!
:::

## Assignments

**Assignment Strategy:**

- Start with **easy warm-ups** in tutorials
- Progress to **real-world problems**
- All assignments have **clear rubrics**
- Bonus points for **creative solutions**!

. . .

:::{.callout-note}
Late submissions: -10% per day (max 3 days)
:::


## Learning Python

- In my experience, the best way to learn is by **doing**!
- Here, we will focus on decision algorithms
- You will start to learn Python by [doing the tutorials]{.highlight}

. . .

:::{.callout-tip}
Don't worry, I will help you out if you have any questions!
:::

## What to Expect

:::{.incremental}
- **No prior programming required** - we start from zero!
- **But experience is helpful!**
- **Fast-paced** but with lots of support
- **Practical focus** - less theory, more doing
- **Mistakes are welcome** - they're how we learn
:::

. . .

:::{.callout-tip}
The course gets easier after week 3 - the hardest part is getting started!
:::

## Course Goals

By the end, you will be able to:

:::{.incremental}
1. **Write Python code** to solve business problems
2. **Apply algorithms** for scheduling, routing, and optimization
3. **Simulate uncertainty** using Monte Carlo methods
4. **Present solutions** like a management consultant
5. **Build tools** that create business value
:::

. . .

[You'll leave with a portfolio of ideas to work on real solutions!]{.highlight}

## Why Python?

- **Origins**: Conceived in late 1980s as a teaching and scripting language
- **Simple Syntax**: Python’s syntax is mostly straightforward and very easy to learn
- **Versatility**: Used in web development, data analysis, artificial intelligence, and more
- **Community Support**: A large community of users worldwide and extensive documentation

## Help from AI

- You are [allowed to use AI]{.highlight} in the course
- I use it as well (e.g., Claude, ChatGPT, Gemini - but don't use Grok...)
- These **tools are great** for learning Python!
- Can help you a lot **to get started** with programming
- I will also teach you how to use it effectively

. . .

:::{.callout-warning}
But you should *not* simply use them to *replace* your learning.
:::

# [How to learn programming]{.flow} {.title}

## My Recommendation

1. [Be present]{.highlight}: Attend the lecture and solve the tutorials
2. [Put in work]{.highlight}: Repeat code and try to understand it
3. [Do coding]{.highlight}: Run code, play around, modify, and solve

. . .

:::{.callout-tip}
Great resources to start are books and small challenges. You can find a list of recommendations in the [literature recommendations](../general/literature.qmd).
:::

## Don't give up!

[Programming is like learning to ride a bike]{.highlight}

. . .

- You'll fall a few times
- It feels impossible at first
- Then suddenly... it clicks!

. . .

:::{.callout-important}
**Lectures 1-3 are the hardest**. Push through and it gets much easier!
:::

# [Setting up Python]{.flow} {.title}

## Install VS Code

- Download and install from the [website](https://code.visualstudio.com/)
- Built for **Windows, Linux and Mac**
- Install the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) and [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension
- [Now you are ready to go!]{.highlight}

. . .

::: {.callout-tip}
Unsure on how to work with VS Code and notebooks?
Ask me! I'm happy to help you out!
:::

## What is an IDE?

- Integrated Development Environment `=` application
- It allows you to write, run and debug code scripts
- Other IDEs include for example:
  - [PyCharm](https://www.jetbrains.com/pycharm/) from JetBrains
  - [Zed](https://zed.dev/)

## Installation of Python with `uv`

- We will use `uv` to install and manage Python versions
- It works on Windows, Mac and Linux
- It helps us to manage packages and virtual environments
- Now, we all [go here](../general/uv.qmd) and install `uv` and Python

. . .

::: {.callout-tip}
If the installation does not work, **let me know!**
:::

# [Using Notebooks with uv]{.flow} {.title}

## Quick Check

- Have you installed `uv` and initialized the project?
- Great! Before we continue, check the following:
  - [] You have a folder for the course
  - [] You have initialized `uv` with `uv init` inside the folder
  - [] You can see a file called `pyproject.toml` in the folder

  . . .

:::{.callout-tip}
Something not working yet? Ask me!
:::

## Let's Write Some Code!

Once the installation is complete, let's test it:

```{.python}
print("Hello, Management Science!")
print("I'm ready to solve business problems!")
```

. . .

[Congratulations - you're now a Python programmer!]{.highlight}

## Using Notebooks

- Now we need to add a kernel to our project
- Run `uv add --dev ipykernel` from your terminal
- Now run `uv add jupyter` in the terminal
- This allows us to use `uv` Python in notebooks
- Next, install the extension (Jupytext for Notebooks)[https://marketplace.visualstudio.com/items?itemName=congyiwu.vscode-jupytext]
- Done? Perfect. Now we can start!

## Working with Notebooks

- Now you can download the files from the website
- Just click on one of the sessions and open it
- Select `Jupyter` on the right side
- Download and save the files **to your course folder**
- Open them and select “Open with Jupyter Notebook”

. . .

:::{.callout-tip}
That was the hardest part today!
:::


## {.loud-slide}
::: {.r-fit-text}
Any questions

so far?
:::

## What's Next?

After the break, we'll dive into:

- **Tutorial 1:** Variables and basic data types
- **Tutorial 2:** Lists and loops
- **Tutorial 3:** Conditionals and control flow

. . .

:::{.callout-note}
**Ready for the tutorials?**
Make sure your Jupyter notebook is working before we continue!
:::

## The End of Hour 1

**That's it for our introduction!**

Take a 10-minute break, then we'll start with the interactive notebooks.

Make sure you have:

- [ ] VS Code installed and running
- [ ] Python environment set up with `uv`
- [ ] Jupyter notebooks working
- [ ] The tutorial files downloaded

# [Literature]{.flow} {.title}

## Interesting Literature on Algorithms

- Christian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.[^4]
- Ferguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.

[^4]: A great inspiration to learn more about Algorithms!


## Books on Programming

- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Here](https://greenteapress.com/wp/think-python-3rd-edition/)
- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.

. . .

::: {.callout-note}
Think Python is a great book to start with. It's available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.
:::

## More Literature

For more interesting literature, take a look at the [literature list](../general/literature.qmd) of this course.
