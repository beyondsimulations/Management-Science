---
title: "Tutorial X.Y - [Main Concept Name]"
subtitle: "Management Science"
---

# Introduction

[This tutorial is designed to take approximately 40 minutes to complete.]
[It should be engaging and relatable for students.]

Welcome to this interactive Python tutorial!

[THE ENGAGING HOOK]
Start with a relatable, real-world problem. This is the most important part for engagement. Frame the concept you're about to teach as a tool to solve this problem.
Example: "The Secretary Problem" / "The Marriage Problem". It asks: "If you want to find the best possible partner... when should you stop dating and propose?"
"Imagine you're planning a Mars mission. Every task, from equipment checks to crew training, needs careful scheduling."

[STATE THE GOAL]
In this tutorial, we'll learn about [Concept Name] and use it to help us [solve the problem from the hook].

::: callout-note
If a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.
:::

# Section 1 - [First Sub-Concept]

[EXPLANATION]
Explain all the required core idea clearly and concisely. Use simple language. Introduce the syntax necessary to solve the exercises later. Make sure you only use concepts students know.

```{.python}
#| eval: true
#
# [Show a clear, simple code example of the concept in action]
# [Variable, loop, function, etc.]
print("This is a working example.")
```

[PEDAGOGICAL CALLOUT]
Use callouts to provide extra context. This is a key part of your repo's style.

::: callout-tip
## Pro-Tip / Definition / Real-World Analogy

Use this space to define jargon, offer a helpful tip, or connect the concept to a non-programming idea (e.g., "Think of a variable as a labeled box").
:::

::: callout-warning
## Common Mistake / Pitfall

Warn students about common errors. (e.g., "Don't forget the colon : at the end of an if statement!" or "Remember that Python lists are 0-indexed!").
:::

## Exercise 1.1 - [Specific Task Title]

[INSTRUCTIONS]
Give a clear, actionable instruction for the exercise. (e.g., "Create a variable named captain and assign it the string value "Picard".").
```{.python}
#| eval: false
# YOUR CODE BELOW

# [Provide some hints here on the approach if difficult]

```

::: {.content-visible when-profile="solutions"}
```{.python}
#| eval: false
# [Working solution to the excercise]

```
:::

```{.python}
#| eval: false
#| code-fold: true
# [THE INTERACTIVE FEEDBACK BLOCK]
# Test your answer
assert [variable\_name] == [expected\_value], "Your assert message here: e.g., 'The captain variable is incorrect!'"
print("Success! You've correctly defined the [concept].")
```

## Exercise 1.2 - [Another Task]

*(...repeat exercise structure...)*

## Exercise 1.3 - [Another Task] (If required)

*(...repeat exercise structure...)*

# Section 2 - [Second Sub-Concept]

[EXPLANATION]
Introduce the next concept, building on the previous one. Explain how it relates to the overall "Hook" problem.
```{.python}
# [Code example for the second concept]
```

## Exercise 2.1 - [Task for Second Concept]

[INSTRUCTIONS]
```{.python}
#| eval: false
# YOUR CODE BELOW

```

::: {.content-visible when-profile="solutions"}
```{.python}
#| eval: false
# [Working solution to the excercise]

```
:::

```{.python}
#| eval: false
#| code-fold: true
# [Test block for Exercise 2.1]
assert [condition], "[Failure message]"
print("Great job! [Success message]")
```

*(...Repeat with more sections as needed...)*

# Conclusion

Congratulations! You've successfully learned how to use **[Main Concept Name]**.

[TIE BACK TO THE HOOK]
Summarize how the concepts learned help solve the initial problem. (e.g., "You now have the tools to apply the 37% rule to our 'dating problem'!" or "You can see how DataFrames help organize our Mars mission tasks to find the earliest deadline.").

[SUMMARIZE KEY TAKEAWAYS]
Remember:

* [Key takeaway 1]
* [Key takeaway 2]
* [Key takeaway 3]

[NARRATIVE LINK TO NEXT TUTORIAL]
Continue to the next tutorial to learn about [Next Concept] and how we can [apply it to our problem]!
