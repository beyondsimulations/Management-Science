[
  {
    "objectID": "assignments/assignment_02.html",
    "href": "assignments/assignment_02.html",
    "title": "Assignment 2: Optimization in Practice",
    "section": "",
    "text": "Due: Start of Lecture 10 Weight: 20% of final grade Expected Time: 5-7 hours Work: Groups\nYour consulting firm has been hired by “CityExpress,” a local delivery company. They need help with: 1. Optimizing delivery routes to reduce costs 2. Creating efficient shift assignments that balance operational needs and worker preferences"
  },
  {
    "objectID": "assignments/assignment_02.html#assignment-overview",
    "href": "assignments/assignment_02.html#assignment-overview",
    "title": "Assignment 2: Optimization in Practice",
    "section": "",
    "text": "Due: Start of Lecture 10 Weight: 20% of final grade Expected Time: 5-7 hours Work: Groups\nYour consulting firm has been hired by “CityExpress,” a local delivery company. They need help with: 1. Optimizing delivery routes to reduce costs 2. Creating efficient shift assignments that balance operational needs and worker preferences"
  },
  {
    "objectID": "assignments/assignment_02.html#consultants",
    "href": "assignments/assignment_02.html#consultants",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Consultants",
    "text": "Consultants\nWho is part of your group?\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#setup",
    "href": "assignments/assignment_02.html#setup",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Setup",
    "text": "Setup\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sets a random seed for reproducibility (no need to adjust this for you)\nnp.random.seed(42)"
  },
  {
    "objectID": "assignments/assignment_02.html#part-a-smart-delivery-routes-50",
    "href": "assignments/assignment_02.html#part-a-smart-delivery-routes-50",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Part A: Smart Delivery Routes (50%)",
    "text": "Part A: Smart Delivery Routes (50%)\n\nScenario\nCityExpress has 12 customer orders to deliver tomorrow. They need an efficient route starting and ending at their depot.\n\n\nThe Data\n\n# Location coordinates (in km from origin)\nlocations = {\n    0: (10, 10),   # Depot\n    1: (8, 15),    # Customer 1\n    2: (14, 18),   # Customer 2\n    3: (5, 12),    # Customer 3\n    4: (18, 8),    # Customer 4\n    5: (12, 5),    # Customer 5\n    6: (3, 7),     # Customer 6\n    7: (16, 14),   # Customer 7\n    8: (7, 3),     # Customer 8\n    9: (15, 6),    # Customer 9\n    10: (11, 17),  # Customer 10\n    11: (4, 16),   # Customer 11\n    12: (19, 12)   # Customer 12\n}\n\n\n\nTask 1: Build a Basic Route (20%)\n\ndef calculate_distance(loc1, loc2):\n    \"\"\"Calculate Euclidean distance between two locations.\"\"\"\n    x1, y1 = loc1\n    x2, y2 = loc2\n    # YOUR CODE HERE\n\n    return distance\n\ndef calculate_total_distance(route, locations):\n    \"\"\"Calculate total distance for a route.\"\"\"\n    total = 0\n    # YOUR CODE HERE\n\n    # Sum distances between consecutive locations\n    return total\n\ndef nearest_neighbor_route(depot, locations):\n    \"\"\"\n    Build route using nearest neighbor heuristic.\n    Always visit the nearest unvisited customer next.\n    \"\"\"\n    route = [depot] # Start with depot\n    # YOUR CODE HERE\n\n    route.append(depot)  # End with depot\n    return route\n\n# Build your route\n# YOUR CODE HERE\n\n\n\nTask 2: Improve Your Route (20%)\nUnderstanding 2-Opt Improvement:\nThe 2-opt algorithm improves a route by removing two edges and reconnecting them in a different way. This is like “uncrossing” routes that cross over themselves.\nVisual Example:\nBefore:  A → B → C → D → A\nIf we take edges (A→B) and (C→D) and swap them:\nAfter:   A → C → B → D → A  (reversed the B→C segment)\nThe Algorithm:\n\nStart with your current best route and its distance\nTry swapping every possible pair of edges:\n\nTake positions i and j in the route (where i &lt; j)\nReverse the segment between i and j\nCalculate the new distance\n\nIf the new route is better, keep it as your new best\nRepeat until no improvement is found\n\n\ndef try_swap_improvement(route, locations):\n    \"\"\"\n    Try all possible 2-opt swaps and return the best improvement found.\n\n    Args:\n        route: Current route (list of location indices)\n        locations: Dictionary of location coordinates\n\n    Returns:\n        tuple: (best_route, best_distance) or (None, None) if no improvement\n    \"\"\"\n    # YOUR CODE HERE (replace pass)\n\n    pass\n\ndef improve_route(initial_route, locations, max_iterations=50):\n    \"\"\"\n    Repeatedly apply 2-opt improvements until no improvement is found.\n\n    Args:\n        initial_route: Starting route\n        locations: Dictionary of location coordinates\n        max_iterations: Maximum number of improvement attempts\n\n    \"\"\"\n    # Loop while iteration &lt; max_iterations:\n    #   1. Call try_swap_improvement on current_route\n    #   2. If no improvement found, break\n    #   3. Otherwise, update current_route and current_distance\n    #   4. Increment iteration counter\n    # YOUR CODE HERE (replace pass)\n\n    pass\n\n# Improve your route\n# YOUR CODE HERE\n\n\n\nTask 3: Visualize and Analyze (10%)\n\nVisualize both routes (before and after improvement)\nCalculate and compare:\n\nOriginal route distance\nImproved route distance\nPercentage improvement\nEstimated cost savings (€2 per km)\n\n\n\n# Visualize both routes\n# YOUR CODE HERE\n\n# Calculate metrics\n# YOUR CODE HERE\n\nBusiness Question: If CityExpress has 50 deliveries per day, how much could they save per month with route optimization? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#part-b-smart-shift-assignment-50",
    "href": "assignments/assignment_02.html#part-b-smart-shift-assignment-50",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Part B: Smart Shift Assignment (50%)",
    "text": "Part B: Smart Shift Assignment (50%)\n\nScenario\nCityExpress warehouse needs to assign 6 workers to 6 different shifts this week. Each worker works exactly one shift. Your job: maximize worker satisfaction by matching them to their preferred shifts.\n\n\nConnection to Lecture 6\nRemember greedy heuristics from job shop scheduling (SPT, EDD)? You’ll design similar rules here—but for workers and shifts instead of jobs and machines.\nThink about:\n\nSPT prioritized shortest jobs first\nEDD prioritized jobs with earliest deadlines first\nWhat should you prioritize for shift assignment?\n\n\n\nThe Data\n\n# 6 shifts available this week\nshifts = [\n    'Monday-Morning',\n    'Monday-Evening',\n    'Tuesday-Morning',\n    'Tuesday-Evening',\n    'Wednesday-Morning',\n    'Wednesday-Evening'\n]\n\n# Worker shift preferences (in order of preference: 1st choice, 2nd choice, 3rd choice)\nworker_preferences = {\n    0: ['Monday-Morning', 'Tuesday-Morning', 'Wednesday-Morning'],     # Morning person\n    1: ['Monday-Evening', 'Tuesday-Evening', 'Wednesday-Evening'],     # Prefers evenings\n    2: ['Monday-Morning', 'Wednesday-Morning'],                        # Flexible, fewer preferences\n    3: ['Tuesday-Evening', 'Wednesday-Evening'],                       # Evening only, fewer preferences\n    4: ['Monday-Morning', 'Monday-Evening', 'Tuesday-Morning'],        # Busy early week\n    5: ['Wednesday-Morning', 'Wednesday-Evening']                      # Wednesday preferred\n}\n\n# Assignment representation:\n# assignment = [shift_index for each worker]\n# Example: assignment = [0, 1, 2, 3, 4, 5]\n#   Worker 0 gets shift 0 (Monday-Morning)\n#   Worker 1 gets shift 1 (Monday-Evening)\n#   Worker 2 gets shift 2 (Tuesday-Morning)\n#   etc.\n\n\n\nTask 1: Design Your Greedy Heuristic (15%)\nChallenge: Create a function that builds an assignment using YOUR OWN greedy strategy.\nNeed a starting point?\nAsk yourself:\n\nWhat made SPT different from EDD?\nWhat attributes do workers have?\nWhat attributes do shifts have?\nPick one attribute to prioritize. That’s your greedy rule!\n\n\ndef my_greedy_assignment(worker_preferences, shifts):\n    \"\"\"\n    Build an assignment using YOUR greedy strategy.\n\n    Args:\n        worker_preferences: Dict of worker_id → list of preferred shift names\n        shifts: List of 6 shift names\n\n    Returns:\n        list: assignment where assignment[worker_id] = shift_index\n              Example: [0, 1, 2, 3, 4, 5] means worker 0→shift 0, worker 1→shift 1, etc.\n    \"\"\"\n    assignment = [-1] * 6  # -1 means unassigned\n    available_shifts = list(range(6))  # Track which shifts are still open\n\n    # YOUR GREEDY STRATEGY HERE\n    # Questions to guide you:\n    # 1. In what order will you process the workers? (0,1,2,3,4,5 or different order?)\n    # 2. For each worker, how do you pick their shift from available ones?\n    # 3. What if their preferred shifts are all taken?\n\n    # YOUR CODE HERE\n\n    return assignment\n\n# Test your greedy heuristic\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking greedy function that produces a valid assignment (all assigned, no duplicate shifts)\nWritten explanation (3-4 sentences)\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nMy greedy strategy: [describe your rule]\nReasoning: [why did you choose this approach?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nMy greedy strategy: [describe your rule]\\nReasoning: [why did you choose this approach?]\\n'\n\n\n\n\nTask 2: Build an Evaluation Function (15%)\nChallenge: Create a function that measures how GOOD an assignment is.\nDesign questions:\n\nShould you give more points for 1st choice vs 2nd choice vs 3rd choice?\nShould all workers count equally, or weight some more?\nWhat if a worker gets a shift they didn’t list as preferred?\n\n\ndef calculate_satisfaction(assignment, worker_preferences, shifts):\n    \"\"\"\n    Calculate how good an assignment is.\n\n    Design YOUR OWN scoring system!\n\n    Possible approaches:\n    - 1st choice = 3 pts, 2nd choice = 2 pts, 3rd choice = 1 pt, other = 0 pts\n    - 1st choice = 10 pts, 2nd choice = 5 pts, 3rd choice = 1 pt, other = -5 pts\n    - Binary: preferred shift = 1 pt, non-preferred = 0 pts\n    - Your own scoring!\n\n    Args:\n        assignment: List where assignment[worker_id] = shift_index\n        worker_preferences: Dict of worker_id → list of preferred shift names\n        shifts: List of shift names\n\n    Returns:\n        float or int: Total satisfaction score (higher is better)\n    \"\"\"\n    # Design your own scoring system!\n    # YOUR EVALUATION LOGIC HERE\n\n\n    return total_satisfaction\n\n# Test your evaluation function\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking evaluation function\nWritten explanation (2-3 sentences):\n\nWhat scoring system did you design?\nWhy did you choose this approach?\nHow does it relate to metrics from Lecture 6?\n\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nMy scoring system: [describe how you calculate satisfaction]\nReasoning: [why this approach?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nMy scoring system: [describe how you calculate satisfaction]\\nReasoning: [why this approach?]\\n'\n\n\n\n\nTask 3: Improve with Local Search (15%)\nChallenge: Take your greedy solution and improve it using local search.\nThink about Lecture 7:\n\n2-opt tried swaps and kept improvements\nIt kept searching until no improvement was found\nCan you apply similar logic here?\n\nYour task: Implement a local search that tries swapping workers’ shifts.\n\ndef improve_with_local_search(initial_assignment, worker_preferences, shifts):\n    \"\"\"\n    Improve an assignment using local search (like 2-opt from Lecture 7).\n    Strategy: Try swapping pairs of workers' shifts, keep if it improves satisfaction.\n\n    Think about:\n    - How do you generate \"neighbor\" solutions? (swap two workers)\n    - How do you know if a neighbor is better? (use your evaluation function!)\n    - When do you stop? (no improvement found, or max iterations)\n\n    Args:\n        initial_assignment: Starting assignment (from your greedy)\n        worker_preferences: Dict of worker_id → preferred shifts\n        shifts: List of shift names\n\n    Returns:\n        list: improved assignment\n    \"\"\"\n\n    # YOUR LOCAL SEARCH LOGIC HERE\n\n\n    # YOUR CODE HERE\n\n    return improved_assignment\n\n# Apply local search\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking local search function that improves the solution\nVisualization showing before/after\nWritten explanation (3-4 sentences):\n\nHow does your local search work?\nHow much did you improve the greedy solution?\nCould you improve it further?\n\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nLocal search method: [describe your approach]\nResults: [how much improvement?]\nFurther improvements?: [yes/no and why?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nLocal search method: [describe your approach]\\nResults: [how much improvement?]\\nFurther improvements?: [yes/no and why?]\\n'\n\n\n\n\nTask 4: Business Reflection (5%)\nQuestion 1: Imagine one worker calls in sick at the last minute. How would you quickly reassign the remaining 5 workers to 6 shifts (one shift will be unfilled)? Would your greedy strategy still work? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'\n\n\nQuestion 2: Your manager says “I don’t care about worker preferences, just fill all shifts as quickly as possible.” How would this change your approach? What would you lose? (2-3 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#submission-checklist",
    "href": "assignments/assignment_02.html#submission-checklist",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Submission Checklist",
    "text": "Submission Checklist\n\nAll code cells run without errors\nPart A: Routes are properly visualized\nPart B: Greedy heuristic, evaluation function, and local search all implemented\nWritten explanations completed for all tasks\nBusiness questions answered\nCode is commented and clear\nNames added to top of notebook"
  },
  {
    "objectID": "assignments/assignment_02.html#tips",
    "href": "assignments/assignment_02.html#tips",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Tips",
    "text": "Tips\n\nUse AI tools to help understand concepts and program, but make sure you understand the code\nStart simple - get something working before optimizing\nExperiment! - there’s no single “correct” approach\nFocus on reasoning - I care more about your thinking than perfect code\nThe goal is good solutions, not perfect ones"
  },
  {
    "objectID": "assignments/assignment_00.html",
    "href": "assignments/assignment_00.html",
    "title": "Assignments in this Course",
    "section": "",
    "text": "This course uses two practical assignments to help you learn how to think like an optimization-minded analyst. Your focus throughout should be: understand the problem, design a sensible algorithmic approach, interpret results, and translate findings into clear business recommendations. Perfect code is not the goal—insight is.\n\n\n\n\n\n\nYou’re encouraged to use AI tools responsibly. Treat them like a smart pair-programmer that helps you learn and debug, but make sure you understand all code you submit and can explain it.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#welcome",
    "href": "assignments/assignment_00.html#welcome",
    "title": "Assignments in this Course",
    "section": "",
    "text": "This course uses two practical assignments to help you learn how to think like an optimization-minded analyst. Your focus throughout should be: understand the problem, design a sensible algorithmic approach, interpret results, and translate findings into clear business recommendations. Perfect code is not the goal—insight is.\n\n\n\n\n\n\nYou’re encouraged to use AI tools responsibly. Treat them like a smart pair-programmer that helps you learn and debug, but make sure you understand all code you submit and can explain it.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#the-two-assignments",
    "href": "assignments/assignment_00.html#the-two-assignments",
    "title": "Assignments in this Course",
    "section": "The Two Assignments",
    "text": "The Two Assignments\nAssignment 1: Risk Analysis & Forecasting (Due at the start of Lecture 7, weight 30%)\nYou’ll simulate investment outcomes to understand risk and then forecast demand using simple time-series techniques. Expect to implement Monte Carlo simulations, moving averages, and exponential smoothing, then compare methods and justify a recommendation.\nAssignment 2: Optimization in Practice (Due at the start of Lecture 10, weight 20%)\nYou’ll build and improve delivery routes and construct valid staff schedules under constraints, then iterate to improve quality and satisfaction. Expect to implement heuristics, evaluate improvements, visualize routes/schedules, and discuss trade-offs.\nWork is in groups for both assignments. Typical time commitment is 4–6 hours for Assignment 1 and 5–7 hours for Assignment 2.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#how-youll-be-graded",
    "href": "assignments/assignment_00.html#how-youll-be-graded",
    "title": "Assignments in this Course",
    "section": "How You’ll Be Graded",
    "text": "How You’ll Be Graded\n\nTechnical Implementation (60% of assignment grade)\n\nExcellent (90-100%): Code runs correctly, handles edge cases, well-structured\nGood (80-89%): Code runs with minor issues, mostly well-structured\nSatisfactory (70-79%): Code runs but has some problems, basic structure\nNeeds Improvement (60-69%): Code has significant issues but shows understanding\nInadequate (&lt;60%): Code doesn’t run or shows fundamental misunderstanding\n\n\n\nBusiness Insight (20% of assignment grade)\n\nExcellent: Clear actionable recommendations with quantified impact\nGood: Solid insights with some quantification\nSatisfactory: Basic insights communicated clearly\nNeeds Improvement: Insights unclear or not business-relevant\nInadequate: No meaningful insights provided\n\n\n\nPresentation Quality (20% of assignment grade)\n\nExcellent: Compelling visualizations, clear narrative\nGood: Good visuals, mostly clear communication\nSatisfactory: Basic visualizations, understandable presentation\nNeeds Improvement: Poor visuals or unclear communication\nInadequate: No effective communication of results\n\n\n\n\n\n\n\nUse AI to clarify concepts, explore alternatives, and debug. Please, do not submit code you don’t understand. You’re responsible for every line. If you draw from external sources, cite them briefly in your notebook.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#tips-for-success",
    "href": "assignments/assignment_00.html#tips-for-success",
    "title": "Assignments in this Course",
    "section": "Tips for Success",
    "text": "Tips for Success\n\nStart simple, then iterate. Get a working baseline first.\nCheck your logic with small tests and intermediate prints.\nKeep business questions in view—your job is to inform a decision.\n\n\n\n\n\n\n\nCommon pitfalls to watch for: forgetting return-to-depot in routing, violating constraints after a change, optimizing forever instead of delivering “good enough,” and failing to actually answer the business questions.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#submission-requirements",
    "href": "assignments/assignment_00.html#submission-requirements",
    "title": "Assignments in this Course",
    "section": "Submission Requirements",
    "text": "Submission Requirements\nSubmit one Jupyter notebook per assignment that includes:\n\nYour commented code with outputs and clear visualizations.\nShort, direct answers to the business questions.\n\nFile naming:\n\nAssignment 1: Assignment_01_[GroupNames].ipynb\nAssignment 2: Assignment_02_[GroupNames].ipynb",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#late-policy",
    "href": "assignments/assignment_00.html#late-policy",
    "title": "Assignments in this Course",
    "section": "Late Policy",
    "text": "Late Policy\nSubmissions lose 10% per day late, up to a maximum of three days. Exceptions are granted only for documented emergencies.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html",
    "href": "tutorials/nb_01_02_lists_loops.html",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "",
    "text": "Welcome to your second interactive Python tutorial!\nThe Weekly Sales Analyzer Problem\nYou’ve been promoted at Bean Counter coffee shop! The manager is impressed with your calculator skills and now wants you to analyze the shop’s sales data. Every day, the shop records its total sales, and at the end of the week, management needs to know: What was our best day? What’s our average? Are we improving?\nWith just variables, you’d need hundreds of them to track a month’s worth of data. That’s where lists and loops come in - they’re the perfect tools for handling collections of data!\nIn this tutorial, we’ll learn about lists and loops to build a sales analysis system that can handle any amount of data and give you insights at a glance.\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-1.1---create-your-sales-list",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-1.1---create-your-sales-list",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 1.1 - Create Your Sales List",
    "text": "Exercise 1.1 - Create Your Sales List\nCreate a list called weekend_sales with Saturday’s sales of $2340.50 and Sunday’s sales of $1890.25. Then access and store Sunday’s sales in a variable called sunday_total.\n#| eval: false\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert weekend_sales == [2340.50, 1890.25], \"weekend_sales should be [2340.50, 1890.25]\"\nassert sunday_total == 1890.25, \"sunday_total should be 1890.25 (the second element)\"\nprint(\"Great! You've created your first list and accessed its elements!\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-1.2---list-slicing",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-1.2---list-slicing",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 1.2 - List Slicing",
    "text": "Exercise 1.2 - List Slicing\nList slicing lets you grab multiple elements at once. Given the weekly sales:\nweek_sales = [1250.50, 1380.25, 1425.00, 1890.75, 2150.00, 2340.50, 1890.25]\nExtract:\n\nmidweek (Tuesday through Thursday - indices 1, 2, 3)\nlast_three (the last three days)\n\n#| eval: false\n# YOUR CODE BELOW\nweek_sales = [1250.50, 1380.25, 1425.00, 1890.75, 2150.00, 2340.50, 1890.25]\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert midweek == [1380.25, 1425.00, 1890.75], \"midweek should contain Tuesday through Thursday\"\nassert last_three == [2150.00, 2340.50, 1890.25], \"last_three should contain the last three days\"\nprint(\"Excellent! You've mastered list slicing!\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-2.1---building-a-customer-count-list",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-2.1---building-a-customer-count-list",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 2.1 - Building a Customer Count List",
    "text": "Exercise 2.1 - Building a Customer Count List\nStart with an empty list and build up hourly customer counts for the morning shift:\n\n8 AM: 15 customers\n9 AM: 32 customers\n10 AM: 28 customers\n11 AM: 41 customers\n\nAlso store the total number of hours tracked as hours_tracked.\n\n\n\n\n\n\nYou can use the len() function to find the length of the list.\n\n\n\n#| eval: false\ncustomer_counts = []\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert customer_counts == [15, 32, 28, 41], \"customer_counts should be [15, 32, 28, 41]\"\nassert hours_tracked == 4, \"hours_tracked should be 4\"\nprint(\"Perfect! You can build lists dynamically and check their length!\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-2.2---combining-lists",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-2.2---combining-lists",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 2.2 - Combining Lists",
    "text": "Exercise 2.2 - Combining Lists\nYou have morning and afternoon sales. Combine them into a full day’s record called full_day and find the total number of transactions as total_transactions.\n\n\n\n\n\n\nTo combine lists, you can simply use the + operator.\n\n\n\n#| eval: false\nmorning_sales = [245.50, 189.25, 156.00]\nafternoon_sales = [312.75, 298.50, 401.25, 389.00]\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert full_day == [245.50, 189.25, 156.00, 312.75, 298.50, 401.25, 389.00], \"full_day should combine both lists\"\nassert total_transactions == 7, \"total_transactions should be 7\"\nprint(\"✓ Excellent! You can combine lists and track their size!\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-3.1---calculate-total-sales",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-3.1---calculate-total-sales",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 3.1 - Calculate Total Sales",
    "text": "Exercise 3.1 - Calculate Total Sales\nCalculate the total of all prices in a list and also count how many items there are.\n#| eval: false\nprices = [15.99, 24.50, 8.75, 32.00, 19.99, 45.25]\ntotal_cost = 0\nitem_count = 0\n\n# Use a for loop to:\n#   - Add each price to total_cost\n#   - Increment item_count by 1 each time\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert abs(total_cost - 146.48) &lt; 0.01, \"total_cost should be 146.48\"\nassert item_count == 6, \"item_count should be 6\"\nprint(f\"Perfect! Total cost: ${total_cost:.2f} for {item_count} items\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-4.1---day-by-day-changes",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-4.1---day-by-day-changes",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 4.1 - Day-by-Day Changes",
    "text": "Exercise 4.1 - Day-by-Day Changes\nCalculate the change in sales from each day to the next and store them in a list.\n#| eval: false\nsales = [1250, 1380, 1125, 1890, 1650]\ndaily_changes = []\n\nprint(\"Day-to-day changes:\")\n# Use range(1, len(sales)) to start from index 1\n# For each day, calculate: sales[i] - sales[i-1]\n# Append each change to daily_changes\n# Print the change for each day\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nexpected_changes = [130, -255, 765, -240]\nassert daily_changes == expected_changes, f\"daily_changes should be {expected_changes}\"\nassert len(daily_changes) == 4, \"Should have 4 changes (for days 2-5)\"\nprint(\"Excellent! You calculated the daily changes correctly!\")\nprint(f\"Daily changes: {daily_changes}\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-5.1---customer-satisfaction-analysis",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-5.1---customer-satisfaction-analysis",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 5.1 - Customer Satisfaction Analysis",
    "text": "Exercise 5.1 - Customer Satisfaction Analysis\nCalculate the total of all ratings and the average rating. Also count how many total ratings there are.\n#| eval: false\n# YOUR CODE BELOW\nratings = [5, 4, 3, 5, 5, 2, 4, 5, 3, 4, 5, 5, 4, 3, 5]\n\n# Steps:\n# 1. Initialize total_rating to 0\n# 2. Initialize rating_count to 0\n# 3. Loop through ratings and:\n#    - Add each rating to total_rating\n#    - Increment rating_count\n# 4. Calculate average_rating = total_rating / rating_count\n\ntotal_rating = 0\nrating_count = 0\n\n# YOUR LOOP HERE\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert total_rating == 62, \"total_rating should be 62\"\nassert rating_count == 15, \"rating_count should be 15\"\nassert abs(average_rating - 4.13) &lt; 0.01, \"average_rating should be approximately 4.13\"\nprint(\"✓ Perfect! You've mastered aggregation calculations!\")\nprint(f\"Total: {total_rating}, Count: {rating_count}, Average: {average_rating:.2f} stars\")",
    "crumbs": [
      "01 Let's Start",
      "01-02 Lists"
    ]
  },
  {
    "objectID": "lectures/lec_01_presentation.html#about-me",
    "href": "lectures/lec_01_presentation.html#about-me",
    "title": "Welcome to Management Science",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#management-science",
    "href": "lectures/lec_01_presentation.html#management-science",
    "title": "Welcome to Management Science",
    "section": "Management Science",
    "text": "Management Science\nQuestion: What is Management Science?\n\nManagement science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n\n\nIt is not the science of management!\n\nAn Introduction to Management Science: Quantitative Approaches to Decision Making (15 ed.). Boston: Cengage Learning, Inc. 2019. ISBN 978-1-337-40652-9."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-outline",
    "href": "lectures/lec_01_presentation.html#course-outline",
    "title": "Welcome to Management Science",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#from-amazon-to-hospitals",
    "href": "lectures/lec_01_presentation.html#from-amazon-to-hospitals",
    "title": "Welcome to Management Science",
    "section": "From Amazon to Hospitals",
    "text": "From Amazon to Hospitals\nWhere Algorithms Make Millions\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\nManagement Science is everywhere!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#this-course-approach",
    "href": "lectures/lec_01_presentation.html#this-course-approach",
    "title": "Welcome to Management Science",
    "section": "This Course Approach",
    "text": "This Course Approach\nThe Consultant Mindset\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-structure",
    "href": "lectures/lec_01_presentation.html#course-structure",
    "title": "Welcome to Management Science",
    "section": "Course Structure",
    "text": "Course Structure\n\n12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\nEach lecture builds on the previous - attendance is important!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#grading",
    "href": "lectures/lec_01_presentation.html#grading",
    "title": "Welcome to Management Science",
    "section": "Grading",
    "text": "Grading\nGrade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#assignments",
    "href": "lectures/lec_01_presentation.html#assignments",
    "title": "Welcome to Management Science",
    "section": "Assignments",
    "text": "Assignments\nAssignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#learning-python",
    "href": "lectures/lec_01_presentation.html#learning-python",
    "title": "Welcome to Management Science",
    "section": "Learning Python",
    "text": "Learning Python\n\nIn my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-to-expect",
    "href": "lectures/lec_01_presentation.html#what-to-expect",
    "title": "Welcome to Management Science",
    "section": "What to Expect",
    "text": "What to Expect\n\nNo prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-goals",
    "href": "lectures/lec_01_presentation.html#course-goals",
    "title": "Welcome to Management Science",
    "section": "Course Goals",
    "text": "Course Goals\nBy the end, you will be able to:\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\nYou’ll leave with a portfolio of ideas to work on real solutions!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#why-python",
    "href": "lectures/lec_01_presentation.html#why-python",
    "title": "Welcome to Management Science",
    "section": "Why Python?",
    "text": "Why Python?\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#help-from-ai",
    "href": "lectures/lec_01_presentation.html#help-from-ai",
    "title": "Welcome to Management Science",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n\n\n\n\n\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#my-recommendation",
    "href": "lectures/lec_01_presentation.html#my-recommendation",
    "title": "Welcome to Management Science",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\nCompete: Participate in the competitions to learn\n\n\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of recommendations in the literature recommendations."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#dont-give-up",
    "href": "lectures/lec_01_presentation.html#dont-give-up",
    "title": "Welcome to Management Science",
    "section": "Don’t give up!",
    "text": "Don’t give up!\nProgramming is like learning to ride a bike\n\n\nYou’ll fall a few times\nIt feels impossible at first\nThen suddenly… it clicks!\n\n\n\n\n\n\n\n\n\nLectures 1-3 are the hardest. Push through and it gets much easier!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-is-an-ide",
    "href": "lectures/lec_01_presentation.html#what-is-an-ide",
    "title": "Welcome to Management Science",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nZed"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#install-vs-code",
    "href": "lectures/lec_01_presentation.html#install-vs-code",
    "title": "Welcome to Management Science",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nGreat! First steps are done\n\n\n\n\n\n\n\n\nUnsure on how to work with VS Code and notebooks? Ask me! I’m happy to help you out!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#installation-of-python-with-uv",
    "href": "lectures/lec_01_presentation.html#installation-of-python-with-uv",
    "title": "Welcome to Management Science",
    "section": "Installation of Python with uv",
    "text": "Installation of Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n\n\n\n\n\n\n\nIf the installation does not work, let me know!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#quick-check",
    "href": "lectures/lec_01_presentation.html#quick-check",
    "title": "Welcome to Management Science",
    "section": "Quick Check",
    "text": "Quick Check\n\nHave you installed uv and initialized the project?\nGreat! Before we continue, check the following:\n\nYou have a folder for the course\nYou have initialized uv with uv init inside the folder\nYou can see a file called pyproject.toml in the folder\n\n\n\n\n\n\n\n\n\nSomething not working yet? Ask me!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#using-notebooks",
    "href": "lectures/lec_01_presentation.html#using-notebooks",
    "title": "Welcome to Management Science",
    "section": "Using Notebooks",
    "text": "Using Notebooks\n\nNow we need to add a kernel to our project\nRun uv add --dev ipykernel from your terminal\nNow run uv add jupyter in the terminal\nThis allows us to use uv Python in notebooks\nNext, install the extension Jupytext for Notebooks\nDone? Perfect. Now we can start!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#working-with-notebooks",
    "href": "lectures/lec_01_presentation.html#working-with-notebooks",
    "title": "Welcome to Management Science",
    "section": "Working with Notebooks",
    "text": "Working with Notebooks\n\nNow you can download the files from the website\nJust click the first session with code and open it\nSelect Python on the right side\nDownload and save the files to your course folder\nOpen them and select “Open with Jupyter Notebook”\n\n\n\n\n\n\n\n\nThat was the hardest part today!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section",
    "href": "lectures/lec_01_presentation.html#section",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Any questions\nso far?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#whats-next",
    "href": "lectures/lec_01_presentation.html#whats-next",
    "title": "Welcome to Management Science",
    "section": "What’s Next?",
    "text": "What’s Next?\nAfter the break, we’ll dive into:\n\nTutorial 1: Variables and basic data types\nTutorial 2: Lists and loops\nTutorial 3: Conditionals and control flow\n\n\n\n\n\n\n\n\nReady for the tutorials? Make sure your Jupyter notebook is working before we continue!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-end",
    "href": "lectures/lec_01_presentation.html#the-end",
    "title": "Welcome to Management Science",
    "section": "The End",
    "text": "The End\nThat’s it for our introduction!\nMake sure you have:\n\nVS Code installed and running\nPython environment set up with uv\nJupyter notebooks working\nThe tutorial files downloaded\n\n\n\n\n\n\n\n\nTake a 10-minute break, then we’ll start with the interactive notebooks."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_01_presentation.html#interesting-literature-on-algorithms",
    "title": "Welcome to Management Science",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nA great inspiration to learn more about Algorithms!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#books-on-programming",
    "href": "lectures/lec_01_presentation.html#books-on-programming",
    "title": "Welcome to Management Science",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#more-literature",
    "href": "lectures/lec_01_presentation.html#more-literature",
    "title": "Welcome to Management Science",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_01_introduction.html",
    "href": "lectures/lec_01_introduction.html",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\nQuestion: What is Management Science?\n. . .\nManagement science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n. . .\nIt is not the science of management!\n\n\n\n\n\nPart I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n. . .\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!\n\n\n\n\n\n\nWhere Algorithms Make Millions\n\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\n. . .\nManagement Science is everywhere!\n\n\n\nThe Consultant Mindset\n\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n. . .\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?\n\n\n\n\n\n\n\n\n12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\n. . .\nEach lecture builds on the previous - attendance is important!\n\n\n\nGrade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n. . .\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!\n\n\n\n\n\n\nAssignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n. . .\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)\n\n\n\n\n\n\n\nIn my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!\n\n\n\n\n\n\n\n\nNo prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n. . .\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!\n\n\n\n\n\n\nBy the end, you will be able to:\n\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\n. . .\nYou’ll leave with a portfolio of ideas to work on real solutions!\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation\n\n\n\n\n\nYou are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n. . .\n\n\n\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#about-me",
    "href": "lectures/lec_01_introduction.html#about-me",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#management-science",
    "href": "lectures/lec_01_introduction.html#management-science",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Question: What is Management Science?\n. . .\nManagement science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n. . .\nIt is not the science of management!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-outline",
    "href": "lectures/lec_01_introduction.html#course-outline",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Part I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n. . .\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#from-amazon-to-hospitals",
    "href": "lectures/lec_01_introduction.html#from-amazon-to-hospitals",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Where Algorithms Make Millions\n\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\n. . .\nManagement Science is everywhere!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#this-course-approach",
    "href": "lectures/lec_01_introduction.html#this-course-approach",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "The Consultant Mindset\n\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n. . .\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-structure",
    "href": "lectures/lec_01_introduction.html#course-structure",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\n. . .\nEach lecture builds on the previous - attendance is important!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#grading",
    "href": "lectures/lec_01_introduction.html#grading",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Grade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n. . .\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#assignments",
    "href": "lectures/lec_01_introduction.html#assignments",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Assignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n. . .\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#learning-python",
    "href": "lectures/lec_01_introduction.html#learning-python",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "In my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-to-expect",
    "href": "lectures/lec_01_introduction.html#what-to-expect",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "No prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n. . .\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-goals",
    "href": "lectures/lec_01_introduction.html#course-goals",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "By the end, you will be able to:\n\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\n. . .\nYou’ll leave with a portfolio of ideas to work on real solutions!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#why-python",
    "href": "lectures/lec_01_introduction.html#why-python",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#help-from-ai",
    "href": "lectures/lec_01_introduction.html#help-from-ai",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "You are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n. . .\n\n\n\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#my-recommendation",
    "href": "lectures/lec_01_introduction.html#my-recommendation",
    "title": "Welcome to Management Science",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\nCompete: Participate in the competitions to learn\n\n. . .\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of recommendations in the literature recommendations.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#dont-give-up",
    "href": "lectures/lec_01_introduction.html#dont-give-up",
    "title": "Welcome to Management Science",
    "section": "Don’t give up!",
    "text": "Don’t give up!\nProgramming is like learning to ride a bike\n. . .\n\nYou’ll fall a few times\nIt feels impossible at first\nThen suddenly… it clicks!\n\n. . .\n\n\n\n\n\n\nLectures 1-3 are the hardest. Push through and it gets much easier!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-is-an-ide",
    "href": "lectures/lec_01_introduction.html#what-is-an-ide",
    "title": "Welcome to Management Science",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nZed",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#install-vs-code",
    "href": "lectures/lec_01_introduction.html#install-vs-code",
    "title": "Welcome to Management Science",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nGreat! First steps are done\n\n. . .\n\n\n\n\n\n\nUnsure on how to work with VS Code and notebooks? Ask me! I’m happy to help you out!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#installation-of-python-with-uv",
    "href": "lectures/lec_01_introduction.html#installation-of-python-with-uv",
    "title": "Welcome to Management Science",
    "section": "Installation of Python with uv",
    "text": "Installation of Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n. . .\n\n\n\n\n\n\nIf the installation does not work, let me know!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#quick-check",
    "href": "lectures/lec_01_introduction.html#quick-check",
    "title": "Welcome to Management Science",
    "section": "Quick Check",
    "text": "Quick Check\n\nHave you installed uv and initialized the project?\nGreat! Before we continue, check the following:\n\nYou have a folder for the course\nYou have initialized uv with uv init inside the folder\nYou can see a file called pyproject.toml in the folder\n\n\n. . .\n\n\n\n\n\n\nSomething not working yet? Ask me!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#using-notebooks",
    "href": "lectures/lec_01_introduction.html#using-notebooks",
    "title": "Welcome to Management Science",
    "section": "Using Notebooks",
    "text": "Using Notebooks\n\n\nNow we need to add a kernel to our project\nRun uv add --dev ipykernel from your terminal\nNow run uv add jupyter in the terminal\nThis allows us to use uv Python in notebooks\nNext, install the extension Jupytext for Notebooks\nDone? Perfect. Now we can start!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#working-with-notebooks",
    "href": "lectures/lec_01_introduction.html#working-with-notebooks",
    "title": "Welcome to Management Science",
    "section": "Working with Notebooks",
    "text": "Working with Notebooks\n\nNow you can download the files from the website\nJust click the first session with code and open it\nSelect Python on the right side\nDownload and save the files to your course folder\nOpen them and select “Open with Jupyter Notebook”\n\n. . .\n\n\n\n\n\n\nThat was the hardest part today!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#section",
    "href": "lectures/lec_01_introduction.html#section",
    "title": "Welcome to Management Science",
    "section": "",
    "text": "Any questions\nso far?",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#whats-next",
    "href": "lectures/lec_01_introduction.html#whats-next",
    "title": "Welcome to Management Science",
    "section": "What’s Next?",
    "text": "What’s Next?\nAfter the break, we’ll dive into:\n\nTutorial 1: Variables and basic data types\nTutorial 2: Lists and loops\nTutorial 3: Conditionals and control flow\n\n. . .\n\n\n\n\n\n\nReady for the tutorials? Make sure your Jupyter notebook is working before we continue!",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#the-end",
    "href": "lectures/lec_01_introduction.html#the-end",
    "title": "Welcome to Management Science",
    "section": "The End",
    "text": "The End\nThat’s it for our introduction!\nMake sure you have:\n\nVS Code installed and running\nPython environment set up with uv\nJupyter notebooks working\nThe tutorial files downloaded\n\n. . .\n\n\n\n\n\n\nTake a 10-minute break, then we’ll start with the interactive notebooks.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_01_introduction.html#interesting-literature-on-algorithms",
    "title": "Welcome to Management Science",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.2\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#books-on-programming",
    "href": "lectures/lec_01_introduction.html#books-on-programming",
    "title": "Welcome to Management Science",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#more-literature",
    "href": "lectures/lec_01_introduction.html#more-literature",
    "title": "Welcome to Management Science",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#footnotes",
    "href": "lectures/lec_01_introduction.html#footnotes",
    "title": "Welcome to Management Science",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAn Introduction to Management Science: Quantitative Approaches to Decision Making (15 ed.). Boston: Cengage Learning, Inc. 2019. ISBN 978-1-337-40652-9.↩︎\nA great inspiration to learn more about Algorithms!↩︎",
    "crumbs": [
      "01 Let's Start",
      "01-00 Introduction"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Course Syllabus",
    "section": "",
    "text": "No mini-competitions yet - focus on solid foundations\n\n\n\nCourse introduction\nPython setup with uv package manager\nVariables, data types, basic operations\nLists and indexing fundamentals\nConditionals and basic loops\n\n\n\n\n\nFunctions for code organization\nDictionaries for structured data\nTuples and multiple return values\nSorting and optimization fundamentals\nGitHub Copilot integration and best practices\n\n\n\n\n\nNumPy for numerical computing and random simulation\nPandas for data manipulation and analysis\nData visualization with matplotlib\nCSV file handling and real dataset exploration\nIntegration practice with business scenarios\n\n\n\n\n\nMini-competitions begin - apply algorithms to business problems\nFormat for Lectures 4-9:\n\nHour 1: Interactive lecture on core concepts\nHour 2: Hands-on notebook practice + class discussion\nHours 3-4: Mini-competition with real data + solution presentations\nBonus Points: Best solution teams earn points toward final grade\n\n\n\n\nProbability distributions and random sampling\nBusiness risk modeling techniques\nPortfolio optimization under uncertainty\nCoffee shop simulation case study\n\n\n\n\n\nTime series analysis fundamentals\nDemand forecasting methods\nForecast evaluation metrics\nSeasonal and trend analysis\n\n\n\n\n\nSPT (Shortest Processing Time) rule\nEDD (Earliest Due Date) rule\nGantt chart visualization\nPerformance metrics: makespan, tardiness, flow time\n\n\n\n\n\nNearest neighbor heuristic\n2-opt local search improvements\nRoute optimization metrics\nReal logistics applications\n\n\n\n\n\nWeighted scoring methods\nPareto efficiency concepts\nDecision criteria combination\nBusiness trade-off analysis\n\n\n\n\n\nWhen simple heuristics fail\nGenetic algorithms introduction\nSimulated annealing basics\nAlgorithm selection strategies\n\n\n\n\n\nReal client challenges with professional presentations\n\n\n\nThree client projects to choose from:\n\nQuickBite: Food delivery routing optimization\nNurseNext: Healthcare staff scheduling\nTechMart: E-commerce inventory optimization\n\nTeam formation and data exploration\nProject scope definition\n\n\n\n\n\nPresentation skills training\nIntensive solution development\nPeer consultation and feedback\nPrototype completion milestone\n\n\n\n\n\nProfessional presentation competition\n“Executive panel evaluation”\nSolution demonstration and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-i-python-foundation-lectures-1-3",
    "href": "general/syllabus.html#part-i-python-foundation-lectures-1-3",
    "title": "Course Syllabus",
    "section": "",
    "text": "No mini-competitions yet - focus on solid foundations\n\n\n\nCourse introduction\nPython setup with uv package manager\nVariables, data types, basic operations\nLists and indexing fundamentals\nConditionals and basic loops\n\n\n\n\n\nFunctions for code organization\nDictionaries for structured data\nTuples and multiple return values\nSorting and optimization fundamentals\nGitHub Copilot integration and best practices\n\n\n\n\n\nNumPy for numerical computing and random simulation\nPandas for data manipulation and analysis\nData visualization with matplotlib\nCSV file handling and real dataset exploration\nIntegration practice with business scenarios",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-ii-management-science-tools-lectures-4-9",
    "href": "general/syllabus.html#part-ii-management-science-tools-lectures-4-9",
    "title": "Course Syllabus",
    "section": "",
    "text": "Mini-competitions begin - apply algorithms to business problems\nFormat for Lectures 4-9:\n\nHour 1: Interactive lecture on core concepts\nHour 2: Hands-on notebook practice + class discussion\nHours 3-4: Mini-competition with real data + solution presentations\nBonus Points: Best solution teams earn points toward final grade\n\n\n\n\nProbability distributions and random sampling\nBusiness risk modeling techniques\nPortfolio optimization under uncertainty\nCoffee shop simulation case study\n\n\n\n\n\nTime series analysis fundamentals\nDemand forecasting methods\nForecast evaluation metrics\nSeasonal and trend analysis\n\n\n\n\n\nSPT (Shortest Processing Time) rule\nEDD (Earliest Due Date) rule\nGantt chart visualization\nPerformance metrics: makespan, tardiness, flow time\n\n\n\n\n\nNearest neighbor heuristic\n2-opt local search improvements\nRoute optimization metrics\nReal logistics applications\n\n\n\n\n\nWeighted scoring methods\nPareto efficiency concepts\nDecision criteria combination\nBusiness trade-off analysis\n\n\n\n\n\nWhen simple heuristics fail\nGenetic algorithms introduction\nSimulated annealing basics\nAlgorithm selection strategies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-iii-consulting-competition-lectures-10-12",
    "href": "general/syllabus.html#part-iii-consulting-competition-lectures-10-12",
    "title": "Course Syllabus",
    "section": "",
    "text": "Real client challenges with professional presentations\n\n\n\nThree client projects to choose from:\n\nQuickBite: Food delivery routing optimization\nNurseNext: Healthcare staff scheduling\nTechMart: E-commerce inventory optimization\n\nTeam formation and data exploration\nProject scope definition\n\n\n\n\n\nPresentation skills training\nIntensive solution development\nPeer consultation and feedback\nPrototype completion milestone\n\n\n\n\n\nProfessional presentation competition\n“Executive panel evaluation”\nSolution demonstration and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#grade-composition-100-points-total",
    "href": "general/syllabus.html#grade-composition-100-points-total",
    "title": "Course Syllabus",
    "section": "Grade Composition (100 points total)",
    "text": "Grade Composition (100 points total)\n\n\n\nComponent\nPoints\nPercentage\nDescription\n\n\n\n\nAssignment 1: Risk & Forecasting\n30\n30%\nDue Lecture 8\n\n\nAssignment 2: Optimization Toolkit\n30\n30%\nDue Lecture 10\n\n\nFinal Competition Project\n40\n40%\nLectures 10-12\n\n\n- Solution Quality\n20\n20%\nTechnical implementation\n\n\n- Presentation\n20\n20%\nCommunication effectiveness",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#bonus-opportunities-additional-points-possible",
    "href": "general/syllabus.html#bonus-opportunities-additional-points-possible",
    "title": "Course Syllabus",
    "section": "Bonus Opportunities (Additional points possible)",
    "text": "Bonus Opportunities (Additional points possible)\n\nMini-competition victories (Lectures 4-9): up to +10 points\nPeer-selected best client project: +5 points",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#team-work-guidelines",
    "href": "general/syllabus.html#team-work-guidelines",
    "title": "Course Syllabus",
    "section": "Team Work Guidelines",
    "text": "Team Work Guidelines\n\nTeams of 3-4 students formed in Lecture 1\nAll team members must contribute meaningfully\nPeer evaluation forms will be used to assess individual contributions\nTeam conflicts should be reported to instructor immediately",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#late-work-policy",
    "href": "general/syllabus.html#late-work-policy",
    "title": "Course Syllabus",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nAssignment 1 & 2: -10% per day late (up to 3 days)\nCompetition project: No late submissions accepted (real consulting deadline!)\nExtensions granted only for documented emergencies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#academic-integrity",
    "href": "general/syllabus.html#academic-integrity",
    "title": "Course Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\n\nCollaboration encouraged within teams, between teams on concepts only\nGitHub Copilot and AI tools encouraged for learning, not for replacing thinking\nCopying solutions from internet or other students prohibited",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of algorithmic thinking and programming. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\nA book that inspired this lecture and will give you a good intuition for the principles of algorithmic thinking and how they can be applied to solve problems in everyday life.\n\nZingaro, D. (2024) Algorithmic thinking, 2nd edition: Unlock your programming potential. AU: No Starch Press.\n\nA book that introduces you to different algorithms and their reasoning. Written without any pseudocode, but with a lot of examples and explanations.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\n\n\nDowney, A. B. (2023). Modeling and Simulation in Python. No Starch Press.\n\n\nAn interesting book for those who want know more about simulations in Python.\nLink to the book\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-2",
    "href": "general/literature.html#books-2",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nZed\n\nA young and lightweight code editor that is very fast and lightweight with built-in collaboration and AI features.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/cheatsheet.html",
    "href": "general/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10\n\n\n\n\n\nIntegers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable\n\n\n\n\nChecking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.\n\n\n\n\n\n\nConcatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#variables",
    "href": "general/cheatsheet.html#variables",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#data-types",
    "href": "general/cheatsheet.html#data-types",
    "title": "Cheatsheet",
    "section": "",
    "text": "Integers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#type-conversion",
    "href": "general/cheatsheet.html#type-conversion",
    "title": "Cheatsheet",
    "section": "",
    "text": "Checking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#string-formatting",
    "href": "general/cheatsheet.html#string-formatting",
    "title": "Cheatsheet",
    "section": "",
    "text": "Concatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#comparison-operators",
    "href": "general/cheatsheet.html#comparison-operators",
    "title": "Cheatsheet",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\n==\nEqual to\nscore == 100\n\n\n!=\nNot equal to\ndegree != “Computer Science”\n\n\n&lt;\nLess than\nsalary &lt; 80000\n\n\n&gt;\nGreater than\nexperience &gt; 5\n\n\n&lt;=\nLess than or equal to\nage &lt;= 65\n\n\n&gt;=\nGreater than or equal to\ntest_score &gt;= 80",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#logical-operators",
    "href": "general/cheatsheet.html#logical-operators",
    "title": "Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\nand\nBoth conditions must be true\nscore &gt; 80 and experience &gt; 5\n\n\nor\nAt least one condition must be true\nscore &gt; 80 or experience &gt; 5\n\n\nnot\nCondition must be false\nnot (score &gt; 80)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-statements",
    "href": "general/cheatsheet.html#if-statements",
    "title": "Cheatsheet",
    "section": "if Statements",
    "text": "if Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 7:\n    print(\"This is a good apartment!\")\n\nThis is a good apartment!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-else-statements",
    "href": "general/cheatsheet.html#if-else-statements",
    "title": "Cheatsheet",
    "section": "if-else Statements",
    "text": "if-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 4\nif flat_rating &gt;= 7:\n    print(\"Apply for this flat!\")\nelse:\n    print(\"Keep searching!\")\n\nKeep searching!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-elif-else-statements",
    "href": "general/cheatsheet.html#if-elif-else-statements",
    "title": "Cheatsheet",
    "section": "if-elif-else Statements",
    "text": "if-elif-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelif condition:\n    # code to execute if condition is False\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 9:\n    print(\"Amazing flat - apply immediately!\")\nelif flat_rating &gt;= 7:\n    print(\"Good flat - consider applying\")\nelse:\n    print(\"Keep looking\")\n\nGood flat - consider applying",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#complex-conditions",
    "href": "general/cheatsheet.html#complex-conditions",
    "title": "Cheatsheet",
    "section": "Complex Conditions",
    "text": "Complex Conditions\n\nNested if Statements: Use if statements inside other if statements.\nLogical Operators: Combine conditions using and, or, not.\nStructure:\n\nif (condition1) and (condition2):\n    # code if both conditions are True\nelif (condition1) or (condition2):\n    # code if at least one condition is True\nelse:\n    # code if none of the conditions are True\n\nExample:\n\n\nflat_rating = 9\nprice = 900\nif (flat_rating &gt;= 9) and (price &lt; 1000):\n    print(\"Amazing flat - apply immediately!\")\n\nAmazing flat - apply immediately!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#accessing-elements",
    "href": "general/cheatsheet.html#accessing-elements",
    "title": "Cheatsheet",
    "section": "Accessing Elements",
    "text": "Accessing Elements\n\nIndexing: Use [index] to access elements.\n\n\nprint(restaurants[0])  # Access the first element\n\nMagic Place\n\n\n\nNegative Indexing: Use [-1] to access the last element.\n\n\nprint(restaurants[-1])  # Access the last element\n\nCoffee Shop\n\n\n\nSlicing: Use [start:end] to access a range of elements.\n\n\nprint(restaurants[0:2])  # Access the first two elements\n\n['Magic Place', 'Sushi Bar']",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#adding-elements",
    "href": "general/cheatsheet.html#adding-elements",
    "title": "Cheatsheet",
    "section": "Adding Elements",
    "text": "Adding Elements\n\nAppending: Use append() to add an element to the end of the list.\n\n\nrestaurants.append(\"Pasta Place\")\n\n\nInserting: Use insert() to add an element at a specific index.\n\n\nrestaurants.insert(0, \"Pasta Magic\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#removing-elements",
    "href": "general/cheatsheet.html#removing-elements",
    "title": "Cheatsheet",
    "section": "Removing Elements",
    "text": "Removing Elements\n\nRemoving: Use remove() to remove an element by value.\n\n\nrestaurants.remove(\"Pasta Place\")\n\n\nRemoving by Index: Use pop() to remove an element by index.\n\n\nrestaurants.pop(0)\n\n'Pasta Magic'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#nested-lists",
    "href": "general/cheatsheet.html#nested-lists",
    "title": "Cheatsheet",
    "section": "Nested Lists",
    "text": "Nested Lists\n\nDefinition: Lists containing other lists or tuples.\nAccessing: Use nested indexing.\n\n\nrestaurant_data = [\n    [\"Pasta Place\", 4.5, 3],\n    [\"Sushi Bar\", 4.2, 1]\n]\nprint(restaurants[0][1])  # Access the second element of the first list\n\na",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuples",
    "href": "general/cheatsheet.html#tuples",
    "title": "Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n\nDefinition: Ordered, immutable collections of items.\nCreation: Use parentheses ().\nImmutability: Once created, cannot be changed.\nMemory Efficiency: Use less memory than lists.\nUse Cases: Ideal for fixed data (e.g., restaurant location).\n\n\nratings = (4.5, 3.8, 4.2)\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#for-loops",
    "href": "general/cheatsheet.html#for-loops",
    "title": "Cheatsheet",
    "section": "for Loops",
    "text": "for Loops\n\nDefinition: Iterate over a sequence of items.\nStructure:\n\nfor item in sequence:\n    # code to execute for each item\n\nExample:\n\n\ntreatments = [\"Standard Drug\", \"New Drug A\", \"New Drug B\"]\nfor treatment in treatments:\n    print(f\"Evaluating efficacy of {treatment}\")\n\nEvaluating efficacy of Standard Drug\nEvaluating efficacy of New Drug A\nEvaluating efficacy of New Drug B",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#range-in-for-loops",
    "href": "general/cheatsheet.html#range-in-for-loops",
    "title": "Cheatsheet",
    "section": "Range in for Loops",
    "text": "Range in for Loops\n\nDefinition: Generate a sequence of numbers.\nStructure:\n\nrange(start, stop, step)\n\nExample:\n\n\nfor phase in range(5):  # 0 to 4\n    print(f\"Starting Phase {phase + 1}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5\n\n\n\nfor phase in range(1, 5):  # 1 to 4\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\n\n\n\nfor phase in range(1, 5, 2):  # 1 to 4, step 2\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 3",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#break-and-continue",
    "href": "general/cheatsheet.html#break-and-continue",
    "title": "Cheatsheet",
    "section": "break and continue",
    "text": "break and continue\n\nbreak: Exit the loop.\ncontinue: Skip the current iteration and continue with the next.\n\n\nefficacy_scores = [45, 60, 75, 85, 90]\nfor score in efficacy_scores:\n    if score &lt; 50:\n        continue\n        print(f\"Treatment efficacy: {score}%\")\n    if score &gt;= 85:\n        break",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuple-unpacking",
    "href": "general/cheatsheet.html#tuple-unpacking",
    "title": "Cheatsheet",
    "section": "Tuple unpacking",
    "text": "Tuple unpacking\n\nDefinition: Assign elements of a tuple to variables.\nStructure:\nExample:\n\n\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)\nname, cuisine, year = restaurant_info\nprint(name)\nprint(cuisine)\nprint(year)\n\nPasta Place\nItalian\n2020",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#while-loops",
    "href": "general/cheatsheet.html#while-loops",
    "title": "Cheatsheet",
    "section": "while Loops",
    "text": "while Loops\n\nDefinition: Execute code repeatedly as long as a condition is true.\nStructure:\n\nwhile condition:\n    # code to execute while condition is True\n\nExample:\n\n\nphase = 1\nwhile phase &lt;= 5:\n    print(f\"Starting Phase {phase}\")\n    phase += 1\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#basic-function",
    "href": "general/cheatsheet.html#basic-function",
    "title": "Cheatsheet",
    "section": "Basic Function",
    "text": "Basic Function\n\nDefinition: Use the def keyword.\nStructure:\n\ndef function_name(parameters):\n    # code to execute (function body)\n    return value  # Optional\n\nExample:\n\n\ndef greet_visitor(name):\n    return f\"Welcome to the library, {name}!\"\n\ngreet_visitor(\"Student\")\n\n'Welcome to the library, Student!'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#return-value",
    "href": "general/cheatsheet.html#return-value",
    "title": "Cheatsheet",
    "section": "Return Value",
    "text": "Return Value\n\nDefinition: The value returned by a function.\nExample:\n\n\ndef multiply_by_two(number):\n    return number * 2\n\nresult = multiply_by_two(5)\nprint(result)\n\n10\n\n\n\nNote: If a function does not return a value, it implicitly returns None.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#default-parameters",
    "href": "general/cheatsheet.html#default-parameters",
    "title": "Cheatsheet",
    "section": "Default Parameters",
    "text": "Default Parameters\n\nDefinition: Provide default values for function parameters.\nStructure:\n\ndef greet_visitor(name=\"People\"):\n    return f\"Welcome to the library, {name}!\"\n\nprint(greet_visitor()) # Calls the function with the default parameter\nprint(greet_visitor(\"Tobias\")) # Calls the function with a custom parameter",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#multiple-parameters",
    "href": "general/cheatsheet.html#multiple-parameters",
    "title": "Cheatsheet",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nDefinition: Functions can have multiple parameters.\nStructure:\n\ndef greet_visitor(name, age):\n    return f\"Welcome to the library, {name}! You are {age} years old.\"\n\nprint(greet_visitor(\"Tobias\", 30))",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#standard-libraries",
    "href": "general/cheatsheet.html#standard-libraries",
    "title": "Cheatsheet",
    "section": "Standard Libraries",
    "text": "Standard Libraries\n\nDefinition: Libraries that are part of the Python standard library.\nAccess: Import them using import.\n\n\nimport math\nimport random\n\n\nFor long package names, you can use the as keyword to create an alias.\n\n\nimport random as rd\n\n\nTo call a function from an imported package, use the package name as a prefix.\n\n\nrandom_number = rd.random()\nprint(random_number)\n\n0.6888612511180762",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#installing-packages",
    "href": "general/cheatsheet.html#installing-packages",
    "title": "Cheatsheet",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nDefinition: Install packages using uv. Note, don’t do this inside of a notebook but in the terminal in your project folder!\n\nuv add package_name",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Management Science!",
    "section": "",
    "text": "Management Science is an interdisciplinary field that applies scientific methods to organizational problem-solving and decision-making. By leveraging mathematical modeling, statistics, and numerical algorithms, management science helps businesses achieve their strategic goals effectively.\nIn this course, you’ll build a comprehensive “consultant’s toolkit” by solving real problems across diverse business domains. Each algorithm is a tool, each case is a client, and each presentation is a pitch. Throughout the semester, you’ll work with realistic, business-relevant scenarios using Python. The course end in a consulting competition where teams tackle client briefs (food delivery routing, healthcare staff scheduling, or inventory optimization) and present solutions to a panel of “executives.”",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#part-i-python-foundation-lectures-1-3",
    "href": "index.html#part-i-python-foundation-lectures-1-3",
    "title": "Welcome to Management Science!",
    "section": "Part I: Python Foundation (Lectures 1-3)",
    "text": "Part I: Python Foundation (Lectures 1-3)\nBuilding your analytical toolkit",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#part-ii-management-science-tools-lectures-4-9",
    "href": "index.html#part-ii-management-science-tools-lectures-4-9",
    "title": "Welcome to Management Science!",
    "section": "Part II: Management Science Tools (Lectures 4-9)",
    "text": "Part II: Management Science Tools (Lectures 4-9)\nMini-competitions begin - apply algorithms to real business problems",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#part-iii-consulting-competition-lectures-10-12",
    "href": "index.html#part-iii-consulting-competition-lectures-10-12",
    "title": "Welcome to Management Science!",
    "section": "Part III: Consulting Competition (Lectures 10-12)",
    "text": "Part III: Consulting Competition (Lectures 10-12)\nClient challenges with professional presentations",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#assignment-structure",
    "href": "index.html#assignment-structure",
    "title": "Welcome to Management Science!",
    "section": "Assignment Structure",
    "text": "Assignment Structure\n\nAssignment 1: Risk & Forecasting (Due Lecture 8) - 30%\nAssignment 2: Full Optimization Toolkit (Due Lecture 10) - 30%\nFinal Competition: Client Project (Lectures 10-12) - 40%",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#bonus-opportunities",
    "href": "index.html#bonus-opportunities",
    "title": "Welcome to Management Science!",
    "section": "Bonus Opportunities",
    "text": "Bonus Opportunities\n\nWin mini-competitions during lectures (Lectures 4-9)\nBest client project in Part III chosen by peer teams",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#time-expectations",
    "href": "index.html#time-expectations",
    "title": "Welcome to Management Science!",
    "section": "Time Expectations",
    "text": "Time Expectations\n\n4-6 hours per week outside class\nAssignments take 4-7 hours each\nFocus on insights over perfect code\nfunctional and clear solutions are the goal",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#required-tools",
    "href": "index.html#required-tools",
    "title": "Welcome to Management Science!",
    "section": "Required Tools",
    "text": "Required Tools\n\nLaptop capable of running Python and Jupyter notebooks\nPython (installed via uv package manager in class)\nGitHub Copilot (free with Student Developer Pack)\nVS Code or similar IDE",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "Welcome to Management Science!",
    "section": "Getting Help",
    "text": "Getting Help\n\nDuring class: Ask questions immediately, others likely have the same question\nTeam support: Leverage your group for collaborative problem-solving\nEmail: Response within 48 hours for urgent questions",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nHow can I download PDF slides from the lecture?\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.\n\n\n\n\n\n\n\nUnfortunately, this method does not work perfectly on all browsers. If you have a Chrome based browser, you should be fine.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-chatbot-work",
    "href": "general/faq.html#how-does-the-chatbot-work",
    "title": "Frequently Asked Questions",
    "section": "How does the chatbot work?",
    "text": "How does the chatbot work?\nThe course AI is a chatbot that uses the Mistral and some custom code hosted on Hetzner in Germany. If you have any questions about the course, feel free to ask the AI. Note, that the AI is not perfect and sometimes the answers might be incorrect. For more information about how the data is processed, please refer to the privacy policy.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/privacy.html",
    "href": "general/privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#introduction",
    "href": "general/privacy.html#introduction",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#data-controller",
    "href": "general/privacy.html#data-controller",
    "title": "Privacy Policy",
    "section": "2. Data Controller",
    "text": "2. Data Controller\nThe data controller responsible for your personal data is:\nBeyond Simulations GmbH\nAm Eich 9d\n22113 Oststeinbek\nGermany\nEmail: info@beyond-simulations.com"
  },
  {
    "objectID": "general/privacy.html#information-we-collect",
    "href": "general/privacy.html#information-we-collect",
    "title": "Privacy Policy",
    "section": "3. Information We Collect",
    "text": "3. Information We Collect\nWhen you interact with our Chatbot, we collect and process the following types of information:\n\nChat Interactions: This includes the questions, prompts, and text you submit to the Chatbot (“Prompts”) and the responses generated by the Chatbot (“Responses”). We do not store any personal data and all prompts are anonymized.\nTechnical Data: We may automatically collect technical information associated with your interaction, such as timestamps, session identifiers for service functionality. This data is processed on our self-hosted server at Hetzner in Germany.\nUsage Data: We may collect aggregated and anonymized data about how the Chatbot is used to monitor performance and improve the service."
  },
  {
    "objectID": "general/privacy.html#how-we-use-your-information",
    "href": "general/privacy.html#how-we-use-your-information",
    "title": "Privacy Policy",
    "section": "4. How We Use Your Information",
    "text": "4. How We Use Your Information\nWe use the collected information for the following purposes:\n\nTo Provide and Operate the Chatbot: To receive your Prompts, process them using AI models, and deliver Responses back to you.\nTo Route Requests: To manage communication between our Chatbot interface and the underlying AI models via intermediary services.\nFor Safety and Content Moderation: To analyze Prompts and/or potential Responses for harmful, inappropriate, or policy-violating content using designated services by Mistral AI acting as guardrails, aiming to ensure safer interactions.\nFor Service Improvement: To analyze usage patterns to understand user needs, troubleshoot issues, and enhance the Chatbot’s performance and capabilities.\nFor Security and Monitoring: To maintain the security of our service, prevent fraud, and monitor for potential misuse.\nTo Comply with Legal Obligations: To meet any applicable legal or regulatory requirements."
  },
  {
    "objectID": "general/privacy.html#legal-basis-for-processing",
    "href": "general/privacy.html#legal-basis-for-processing",
    "title": "Privacy Policy",
    "section": "5. Legal Basis for Processing",
    "text": "5. Legal Basis for Processing\nWe process your personal data based on the following legal grounds:\n\nLegitimate Interests: Processing is necessary for our legitimate interests in operating and improving the Chatbot service and maintaining its security, provided these interests are not overridden by your data protection rights.\nConsent: In some cases, we might ask for your explicit consent for specific processing activities (e.g., using conversation data for fine-tuning models beyond basic service provision).\nLegal Obligation: Processing is necessary to comply with a legal obligation to which we are subject."
  },
  {
    "objectID": "general/privacy.html#data-sharing-and-third-parties",
    "href": "general/privacy.html#data-sharing-and-third-parties",
    "title": "Privacy Policy",
    "section": "6. Data Sharing and Third Parties",
    "text": "6. Data Sharing and Third Parties\nTo provide the Chatbot service, your Prompts are processed by and shared with the following third-party services and infrastructure providers:\n\nChatbot Interface: The user interface for the Chatbot runs directly in your web browser.\nRAG-Backend: The RAG backend runs on a self-hosted server on Hetzner in Germany.\nLLM Observation (Langfuse): We use Langfuse to observe the usage of the LLM models we use. Your Prompts (and generated responses) pass through Langfuse to reach the selected LLM provider or guardrail service. The data is stored on our self-hosted server at Hetzner in Germany.\nHosting Provider (Hetzner): Our instance of Langfuse is self-hosted on servers provided by Hetzner Online GmbH. Hetzner acts as a data processor providing the infrastructure. We store application data and interaction logs on these servers, located within Germany.\nMistral AI: We use Mistral AI for two primary purposes: (1) as one of the LLM options to generate Responses to your Prompts, and (2) as a guardrail service to check Prompts and/or potential Responses (which may have been generated by Mistral AI itself) for safety, appropriateness, and compliance with content policies before a final response is delivered to you. When Mistral is used for either generation or guardrail checking, your data (relevant Prompts and/or potential Responses) is processed according to Mistral’s terms and privacy policy. The data ist not used or saved for training purposes by the model providers.\n\nImportant Note on Third-Party Processing: These LLM and guardrail providers process your data to generate Responses or perform safety checks. They may use data according to their own policies, potentially including service improvement, subject to their terms. We encourage you to review their respective privacy policies. We do not explicitly share personal identifiers like your name or email through the Chatbot interaction unless you voluntarily include such information in your Prompts."
  },
  {
    "objectID": "general/privacy.html#data-storage-security-and-retention",
    "href": "general/privacy.html#data-storage-security-and-retention",
    "title": "Privacy Policy",
    "section": "7. Data Storage, Security, and Retention",
    "text": "7. Data Storage, Security, and Retention\n\nStorage: Chat interaction data (Prompts, Responses) and technical logs may be stored temporarily or persistently (depending on configuration) on our Langfuse instance hosted on Hetzner servers in Germany.\nSecurity: We implement reasonable technical and organizational measures to protect your data from unauthorized access, disclosure, alteration, or destruction. This includes using HTTPS encryption for data transmitted between your browser, our server, and the LLM providers. Access to the backend systems is restricted.\nRetention: We retain chat interaction data and technical logs only for as long as necessary to fulfill the purposes outlined in this policy, for troubleshooting, security logging, service improvement, or as required by law. Retention periods vary depending on the type of data and our operational needs."
  },
  {
    "objectID": "general/privacy.html#your-data-protection-rights",
    "href": "general/privacy.html#your-data-protection-rights",
    "title": "Privacy Policy",
    "section": "8. Your Data Protection Rights",
    "text": "8. Your Data Protection Rights\nDepending on your location and applicable data protection laws, you may have the following rights regarding your personal data:\n\nRight to Access: You can request copies of your personal data that we hold.\nRight to Rectification: You can request correction of inaccurate or incomplete data.\nRight to Erasure (‘Right to be Forgotten’): You can request the deletion of your personal data under certain conditions.\nRight to Restrict Processing: You can request the limitation of how we process your data under certain conditions.\nRight to Data Portability: You can request that we transfer the data we have collected to another organization, or directly to you, under certain conditions.\nRight to Object: You can object to our processing of your personal data based on legitimate interests.\nRight to Withdraw Consent: If processing is based on consent, you can withdraw it at any time.\n\nTo exercise any of these rights, please contact us using the details provided in Section 2 (Data Controller). We may need to verify your identity before processing your request."
  },
  {
    "objectID": "general/privacy.html#changes-to-this-privacy-policy",
    "href": "general/privacy.html#changes-to-this-privacy-policy",
    "title": "Privacy Policy",
    "section": "9. Changes to This Privacy Policy",
    "text": "9. Changes to This Privacy Policy\nWe may update this Privacy Policy from time to time. We will notify you of any significant changes by posting the new policy on this page and updating the “Last Updated” date at the top. We encourage you to review this policy periodically for any changes."
  },
  {
    "objectID": "general/uv.html",
    "href": "general/uv.html",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It:\n\nInstalls Python for you (no manual downloads).\nCreates isolated virtual environments (safe sandboxes per project).\nInstalls and updates packages quickly.\n\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#why-we-use-uv-for-this-course",
    "href": "general/uv.html#why-we-use-uv-for-this-course",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It:\n\nInstalls Python for you (no manual downloads).\nCreates isolated virtual environments (safe sandboxes per project).\nInstalls and updates packages quickly.\n\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#install-uv",
    "href": "general/uv.html#install-uv",
    "title": "Installing Python",
    "section": "Install uv",
    "text": "Install uv\nChoose the instructions for your operating system. To these, you need to work in your terminal.\n\n\n\n\n\n\nOpen the terminal in VS Code by selecting (Terminal → New Terminal).\n\n\n\n\nmacOS or Linux (Terminal)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf curl is missing:\nwget -qO- https://astral.sh/uv/install.sh | sh\nAfter installation: close and reopen your terminal (so your PATH updates).\n\n\nWindows (PowerShell)\nOpen PowerShell and run:\npowershell -ExecutionPolicy Bypass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nIf you see a script execution warning, you can alternatively first run:\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process\nThen re-run the install line.\n\n\nVerify installation\nRun (macOS / Linux / Windows):\nuv --version\nIf you see a version number: great!\n\n\n\n\n\n\nIf you get “command not found” or “‘uv’ is not recognized”:\n\nClose and reopen the terminal (important).\nOn Windows: make sure you used PowerShell (not Command Prompt).\nStill broken? Ask for help, no need of guessing the error.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#installpython",
    "href": "general/uv.html#installpython",
    "title": "Installing Python",
    "section": "InstallPython",
    "text": "InstallPython\nWe want everyone on the same Python version for consistency. Thus, we’ll use Python 3.12 for the course this year.\nInstall (you only need to do this once):\nuv python install 3.12\nCheck the installation:\nuv run python --version\nExpected output starts with:\nPython 3.12.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#create-your-first-project",
    "href": "general/uv.html#create-your-first-project",
    "title": "Installing Python",
    "section": "Create your first project",
    "text": "Create your first project\nPick a folder where you keep course work. If you do not have one, make sure to create one! Open the course folder in your IDE and then run the following from the terminal:\nuv init\nuv init creates:\n\nmain.py (starter script)\npyproject.toml (project + dependencies config)\n.python-version (records the Python version we chose)\n.gitignore (useful if you ever use Git)\nREADME.md (you can jot notes here)\n(A .venv folder will appear later once packages are added or synced.)\n\n\n\n\n\n\n\nYou do not need to edit any of these (except maybe README.md for your notes and main.py if you want to run something different).",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#run-the-starter-script",
    "href": "general/uv.html#run-the-starter-script",
    "title": "Installing Python",
    "section": "Run the starter script",
    "text": "Run the starter script\nInside the project folder in your terminal:\nuv run python main.py\nYou should see something like:\nHello World!\n(If you want, you can open main.py and change the message, then re-run.)\n\nWhat does that code mean?\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n\ndef main(): defines a function (a reusable block of code).\nprint(...) shows text in the terminal.\nThe line if __name__ == \"__main__\": ensures this only auto-runs when the file is executed directly.\n\nDon’t worry about this yet, we’ll gradually build up to it.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#adding-packages-later-in-the-course",
    "href": "general/uv.html#adding-packages-later-in-the-course",
    "title": "Installing Python",
    "section": "Adding packages (later in the course)",
    "text": "Adding packages (later in the course)\nIf/when you need a package (example: pandas):\nuv add pandas\nIf you added the wrong one:\nuv remove pandas\nIf your pyproject.toml changed (e.g. you pulled code from someone else):\nuv sync\n\n\n\n\n\n\nIf something seems “off”, just close the terminal and reopen in the project folder. Fresh starts fix many early mistakes.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#updating-uv",
    "href": "general/uv.html#updating-uv",
    "title": "Installing Python",
    "section": "Updating uv",
    "text": "Updating uv\nOccasionally:\nuv self update\n\n\n\n\n\n\nIf it ever errors, you can just reinstall using the same one-liner from earlier.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#best-practices-for-this-course",
    "href": "general/uv.html#best-practices-for-this-course",
    "title": "Installing Python",
    "section": "Best practices for this course",
    "text": "Best practices for this course\n\nOne folder for the course keeps everything tidy.\nNever install packages “globally” outside a project.\nKeep a short personal log in each project’s README.md (What did I do? What still confuses me?).\nAsk early for help, guessing usually takes much more time than asking.\n\nYou can always see available commands:\nuv --help",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#recap",
    "href": "general/uv.html#recap",
    "title": "Installing Python",
    "section": "Recap",
    "text": "Recap\nYou can now:\n\nInstall uv.\nCreate a project.\nRun a script.\nAdd/remove/sync packages.\n\nNow, you’re set to continue the course.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html",
    "href": "tutorials/nb_01_01_variables_data_types.html",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "",
    "text": "Welcome to your first interactive Python tutorial!\nThe Coffee Shop Calculator Problem\nImagine you just started working at a busy coffee shop called “Bean Counter.” On your first day, the manager asks you to help with various calculations: pricing drinks, applying discounts, calculating tips, and formatting receipts. The old calculator is broken, and they need a better system anyway. Lucky for them, you know Python!\nIn this tutorial, we’ll learn about variables and basic data types to build your own coffee shop calculator system. By the end, you’ll be able to handle any calculation the shop throws at you!\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-1.1---your-first-variables",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-1.1---your-first-variables",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 1.1 - Your First Variables",
    "text": "Exercise 1.1 - Your First Variables\nCreate three variables for a new order:\n\nlatte_price should be 5.25\ncustomer should be “Maria”\nquantity should be 2\nshop_closed = False\n\n#| eval: false\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert latte_price == 5.25, \"The latte_price should be 5.25\"\nassert customer == \"Maria\", \"The customer should be 'Maria'\"\nassert quantity == 2, \"The quantity should be 2\"\nassert shop_closed == False, \"The shop should be open\"\nprint(\"Perfect! You've created your first variables for the coffee shop!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-1.2---updating-variables",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-1.2---updating-variables",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 1.2 - Updating Variables",
    "text": "Exercise 1.2 - Updating Variables\nVariables can change! A customer changed their mind and wants 4 lattes instead of 2. Update the quantity variable to 4 and create a new variable total_order that stores the total price.\n#| eval: false\n# YOUR CODE BELOW\n# Assume latte_price = 5.25 and quantity = 2 from previous exercise\n# Tip: Just overwrite these old values\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert quantity == 4, \"The quantity should be updated to 4\"\nassert total_order == 21.0, \"The total_order should be 21.0 (5.25 * 4)\"\nprint(\"Excellent! You can update variables and create new ones from existing values!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-2.1---identifying-data-types",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-2.1---identifying-data-types",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 2.1 - Identifying Data Types",
    "text": "Exercise 2.1 - Identifying Data Types\nCreate variables of each type for our coffee shop:\n\ndaily_customers (int): 85 customers visited today\naverage_tip (float): 2.50 dollars average tip\nbest_seller (str): “Caramel Macchiato”\n\n#| eval: false\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert daily_customers == 85 and type(daily_customers) == int, \"daily_customers should be the integer 85\"\nassert average_tip == 2.50 and type(average_tip) == float, \"average_tip should be the float 2.50\"\nassert best_seller == \"Caramel Macchiato\" and type(best_seller) == str, \"best_seller should be the string 'Caramel Macchiato'\"\nprint(\"Great job! You understand the different data types!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-2.2---type-conversion",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-2.2---type-conversion",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 2.2 - Type Conversion",
    "text": "Exercise 2.2 - Type Conversion\nSometimes we need to convert between types. A customer’s loyalty card bonus points were entered as text “1234” but we need it as a number to do calculations.\nConvert the string card_points = \"1234\" to an integer and create a new variable new_points that adds 100 bonus points to it.\n\n\n\n\n\n\nYou can use the int() function to convert a string to an integer or use the float() function to convert a string to a float.\n\n\n\n#| eval: false\n# YOUR CODE BELOW\ncard_points = \"1234\"\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert card_points == 1234, \"card_points should be 1234 as an integer\"\nassert new_points == 1334, \"new_points should be 1334 (1234 + 100)\"\nprint(\"Perfect! You can convert between data types!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-3.1---calculate-the-bill",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-3.1---calculate-the-bill",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 3.1 - Calculate the Bill",
    "text": "Exercise 3.1 - Calculate the Bill\nA group orders:\n\n3 cappuccinos at $4.75 each\n2 muffins at $3.50 each\n1 sandwich at $8.95\n\nCalculate the subtotal, then add 8% tax to get the total_with_tax.\n#| eval: false\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nimport math\nassert math.isclose(subtotal, 30.20, rel_tol=0.01), \"Subtotal should be 30.20\"\nassert math.isclose(total_with_tax, 32.616, rel_tol=0.01), \"Total with tax should be 32.616\"\nprint(\"Excellent calculation! You've mastered basic arithmetic!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-3.2---splitting-the-bill",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-3.2---splitting-the-bill",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 3.2 - Splitting the Bill",
    "text": "Exercise 3.2 - Splitting the Bill\nThe group wants to split the bill evenly among 4 people. Calculate:\n\nHow much each person pays (per_person)\nIf they pay with exact change, how many dollars (dollars) and cents (cents) each person needs. Provide each as variable.\n\n\n\n\n\n\n\nYou could use // for floor division and % for remainder, but you don’t need to do that as other solutions are possible. If you want to round the cents, you can use the round() function.\n\n\n\n#| eval: false\n# YOUR CODE BELOW\n# Assume total_with_tax = 32.616 from previous exercise\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert math.isclose(per_person, 8.154, rel_tol=0.01), \"Each person should pay 8.154\"\nassert dollars == 8, \"Each person needs 8 dollars\"\nassert cents == 15, \"Each person needs 15 cents (rounded)\"\nprint(\"Great work! You can split bills and handle money calculations!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-4.1---create-a-simple-receipt",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-4.1---create-a-simple-receipt",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 4.1 - Create a Simple Receipt",
    "text": "Exercise 4.1 - Create a Simple Receipt\nCreate a formatted receipt for a coffee order with these variables:\n\ncoffee_type = \"Americano\"\nsize = \"Large\"\nprice = 3.75\n\nFormat it as: “Order: [size] [coffee_type] - $[price with 2 decimal places]”\n#| eval: false\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert receipt == \"Order: Large Americano - $3.75\", \"Receipt should be 'Order: Large Americano - $3.75'\"\nprint(\"Perfect! You've created your first formatted string!\")",
    "crumbs": [
      "01 Let's Start",
      "01-01 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html",
    "href": "tutorials/nb_01_03_conditionals_while.html",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "",
    "text": "Welcome to your third interactive Python tutorial!\nThe Smart Inventory System Problem\nBean Counter coffee shop is growing! They need a smarter inventory management system that can:\n\nAlert when supplies are running low\nAutomatically reorder items when needed\nTrack which products are selling fastest\nSimulate inventory usage over time\n\nThese tasks require your program to make decisions and repeat processes until certain conditions are met. That’s where conditionals and while loops come in - they’re the brains behind smart automated systems!\nIn this tutorial, we’ll learn how to make decisions with if/elif/else statements and create loops that run until specific conditions are met.\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---coffee-bean-quality-check",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---coffee-bean-quality-check",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.1 - Coffee Bean Quality Check",
    "text": "Exercise 2.1 - Coffee Bean Quality Check\nCheck if coffee beans meet quality standards. Beans pass if:\n\nThe moisture level is between 10 and 12 (inclusive)\nAND the defect count is less than 5\n\nCreate a variable passes_quality that is True if both conditions are met.\n#| eval: false\nmoisture_level = 11\ndefect_count = 3\n\n# Check if moisture_level is between 10 and 12 (inclusive) AND defect_count &lt; 5\n# Store the result in passes_quality\n# YOUR CODE BELOW\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert passes_quality == True, \"Beans with moisture=11 and defects=3 should pass\"\nprint(\"Excellent! Your quality check system works correctly!\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---special-offer-eligibility",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---special-offer-eligibility",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.2 - Special Offer Eligibility",
    "text": "Exercise 2.2 - Special Offer Eligibility\nCustomers get a special offer if they meet ANY of these conditions:\n\nThey’re a member (is_member = True)\nOR they’ve spent more than $100\nOR it’s their birthday (is_birthday = True)\n\nDetermine if the customer is eligible and print an appropriate message.\n#| eval: false\n# YOUR CODE BELOW\nis_member = False\ntotal_spent = 120\nis_birthday = False\n\n# Check if customer is eligible for special offer using 'or'\n# Store result in eligible_for_offer\n# Print \"Special offer available!\" or \"No special offers today\"\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert eligible_for_offer == True, \"Customer spending $120 should be eligible\"\nprint(\"Perfect! Your special offer system works with OR logic!\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---simple-stock-alert",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---simple-stock-alert",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.1 - Simple Stock Alert",
    "text": "Exercise 2.1 - Simple Stock Alert\nCreate a stock alert system. You need to:\n\nCheck if milk_liters is less than 10\nIf it is, print “Order more milk!” and set order to True\nOtherwise, print “Milk stock OK”\n\n#| eval: false\n# YOUR CODE BELOW\nmilk_liters = 7\norder = False\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert order == True, \"'order' should be `True` when milk_liters is 7\"\nprint(\"Great! Your stock alert system works!\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---multi-level-pricing",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---multi-level-pricing",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.2 - Multi-Level Pricing",
    "text": "Exercise 2.2 - Multi-Level Pricing\nCreate a pricing system with multiple tiers. The rules are:\n\nOrders less than 10 items: $5 per item\nOrders 10-49 items: $4.50 per item\nOrders 50 or more items: $4 per item\n\nCalculate and print the price_per_item and total_cost for the given quantity.\n#| eval: false\n# YOUR CODE BELOW\nquantity = 25\n\n# Use if/elif/else to determine price_per_item\n# Then calculate total_cost = quantity * price_per_item\n# Print both values\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert price_per_item == 4.50, \"price_per_item should be 4.50 for quantity 25\"\nassert total_cost == 112.50, \"total_cost should be 112.50 (25 * 4.50)\"\nprint(f\"Perfect! Price per item: ${price_per_item}, Total: ${total_cost}\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-3.1---filter-high-value-orders",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-3.1---filter-high-value-orders",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 3.1 - Filter High-Value Orders",
    "text": "Exercise 3.1 - Filter High-Value Orders\nCreate a list containing only orders above $50. Also count how many high-value orders there are.\n#| eval: false\nall_orders = [35.50, 67.25, 45.00, 89.99, 52.10, 23.75, 91.50, 48.00]\n\n# Create empty list for high_value_orders\nhigh_value_orders = []\ncount = 0\n\n# YOUR CODE BELOW\n\n# Loop through all_orders\n# If order &gt; 50, append to high_value_orders and increment count\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert high_value_orders == [67.25, 89.99, 52.10, 91.50], \"high_value_orders should contain [67.25, 89.99, 52.10, 91.50]\"\nassert count == 4, \"count should be 4\"\nprint(f\"Great! Found {count} high-value orders: {high_value_orders}\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-3.2---categorize-products",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-3.2---categorize-products",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 3.2 - Categorize Products",
    "text": "Exercise 3.2 - Categorize Products\nCategorize products by stock level and create separate lists for each category:\n\nCritical: stock &lt; 10\nLow: stock &gt;= 10 and stock &lt; 25\nGood: stock &gt;= 25\n\n#| eval: false\nproducts = [\"Coffee\", \"Milk\", \"Sugar\", \"Cups\", \"Lids\", \"Stirrers\"]\nstock_levels = [5, 18, 35, 8, 42, 15]\n\ncritical = []\nlow = []\ngood = []\n\n# YOUR CODE BELOW\n#\n# Loop through products using range(len(products))\n# Check stock_levels[i] and append products[i] to appropriate list\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert critical == [\"Coffee\", \"Cups\"], \"critical should be ['Coffee', 'Cups']\"\nassert low == [\"Milk\", \"Stirrers\"], \"low should be ['Milk', 'Stirrers']\"\nassert good == [\"Sugar\", \"Lids\"], \"good should be ['Sugar', 'Lids']\"\nprint(\"Perfect! Product categorization complete!\")\nprint(f\"Critical: {critical}\")\nprint(f\"Low: {low}\")\nprint(f\"Good: {good}\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-4.1---customer-queue-simulation",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-4.1---customer-queue-simulation",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 4.1 - Customer Queue Simulation",
    "text": "Exercise 4.1 - Customer Queue Simulation\nSimulate serving customers in a queue. Each minute you can serve 2 customers, and 3 new customers arrive. Stop when the queue exceeds 20 customers.\nTrack:\n\nHow many minutes it takes\nThe final queue size\n\n#| eval: false\nqueue_size = 5  # Starting queue\nminutes = 0\nserve_rate = 2  # Customers served per minute\narrival_rate = 3  # New customers per minute\n\n# YOUR CODE BELOW\n\n# Use a while loop that continues while queue_size &lt;= 20\n# Each iteration: add arrivals, subtract served, increment minutes\n\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert minutes == 16, \"Should take 16 minutes to exceed 20 customers\"\nassert queue_size == 21, \"Final queue size should be 21\"\nprint(f\"Excellent! After {minutes} minutes, queue size is {queue_size}\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-5.1---smart-promotion-filter",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-5.1---smart-promotion-filter",
    "title": "Tutorial 1.3 - Conditionals & While Loops",
    "section": "Exercise 5.1 - Smart Promotion Filter",
    "text": "Exercise 5.1 - Smart Promotion Filter\nFind products eligible for promotion. Products qualify if they are:\n\nDrinks priced $4 or more, OR\nFood items priced $3 or more\n\nAlso calculate the total discount if we offer 15% off eligible items.\n#| eval: false\n# YOUR CODE BELOW\nproducts = [\"Coffee\", \"Tea\", \"Muffin\", \"Sandwich\", \"Smoothie\", \"Cookie\"]\nprices = [4.50, 2.75, 3.50, 7.95, 5.25, 2.00]\ncategories = [\"drink\", \"drink\", \"food\", \"food\", \"drink\", \"food\"]\n\neligible_products = []\ntotal_discount = 0\n\n# Loop through all products\n# Check if eligible based on category and price\n# If eligible: add to list and add (price * 0.15) to total_discount\n#| eval: false\n#| code-fold: true\n# Test your answer\nassert eligible_products == [\"Coffee\", \"Muffin\", \"Sandwich\", \"Smoothie\"], \"Should include Coffee, Muffin, Sandwich, Smoothie\"\nassert abs(total_discount - 3.15) &lt; 0.01, \"Total discount should be approximately 3.15\"\nprint(f\"Excellent! Eligible products: {eligible_products}\")\nprint(f\"Total discount offered: ${total_discount:.2f}\")",
    "crumbs": [
      "01 Let's Start",
      "01-03 Conditions"
    ]
  },
  {
    "objectID": "assignments/assignment_01.html",
    "href": "assignments/assignment_01.html",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "",
    "text": "Due: Start of Lecture 8 Weight: 30% of final grade Expected Time: 4-6 hours Work: Groups\nYou’re a a group of junior analyst at a consulting firm. A client needs help with:\n\nUnderstanding investment risk using simulation\nForecasting product demand"
  },
  {
    "objectID": "assignments/assignment_01.html#assignment-overview",
    "href": "assignments/assignment_01.html#assignment-overview",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "",
    "text": "Due: Start of Lecture 8 Weight: 30% of final grade Expected Time: 4-6 hours Work: Groups\nYou’re a a group of junior analyst at a consulting firm. A client needs help with:\n\nUnderstanding investment risk using simulation\nForecasting product demand"
  },
  {
    "objectID": "assignments/assignment_01.html#consultants",
    "href": "assignments/assignment_01.html#consultants",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Consultants",
    "text": "Consultants\nWho is part of your group?\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#setup",
    "href": "assignments/assignment_01.html#setup",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Setup",
    "text": "Setup\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sets a random seed for reproducibility (no need to adjust this for you)\nnp.random.seed(42)"
  },
  {
    "objectID": "assignments/assignment_01.html#part-a-investment-risk-simulation-50",
    "href": "assignments/assignment_01.html#part-a-investment-risk-simulation-50",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Part A: Investment Risk Simulation (50%)",
    "text": "Part A: Investment Risk Simulation (50%)\n\nScenario\nYour client wants to invest €100,000 in a new product launch. They need to understand the risk.\nGiven Information:\n\nBest case: €300,000 return (20% probability)\nMost likely: €150,000 return (60% probability)\nWorst case: €50,000 return (20% probability)\n\n\n\nTask 1: Simple Monte Carlo Simulation (15%)\n\n# Create a function that runs simulations and randomly picks outcomes\ndef simulate_investment(n_simulations=100):\n    \"\"\"\n    Run Monte Carlo simulation for investment returns.\n\n    Returns:\n        array: Simulation results\n    \"\"\"\n    # Define possible outcomes and their probabilities\n    outcomes = [300000, 150000, 50000]\n    probabilities = [0.2, 0.6, 0.2]\n\n    # Hint: use np.random.choice() with probabilities\n    # YOUR CODE HERE\n\n\n    return results\n\n# Run simulation\n# YOUR CODE HERE\n\n\n\nTask 2: Add Uncertainty to Probabilities (15%)\n\ndef simulate_with_uncertainty(n_simulations=100):\n    \"\"\"\n    Simulate investment with uncertain probabilities.\n    - Best case probability: 10% to 30% (uniform)\n    - Worst case probability: 10% to 30% (uniform)\n    - Most likely probability: remainder to sum to 100%\n    \"\"\"\n    outcomes = [300000, 150000, 50000]\n    results = []\n\n    return results\n\n# Run simulation with uncertainty\n# YOUR CODE HERE\n\n\n\nTask 3: Analysis & Visualization (20%)\n\n# Create histogram of returns\n# YOUR CODE HERE\n\n# Calculate key metrics\n# 1. Probability of losing money (return &lt; €100,000)\n# 2. 95% Value at Risk (5th percentile)\n# 3. Expected profit\n# YOUR CODE HERE\n\nBusiness Question: Should the client make this investment? Write 3-4 sentences explaining your recommendation.\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#part-b-demand-forecasting-50",
    "href": "assignments/assignment_01.html#part-b-demand-forecasting-50",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Part B: Demand Forecasting (50%)",
    "text": "Part B: Demand Forecasting (50%)\n\nScenario\nA retail client needs to forecast demand for the next 3 months to plan inventory.\n\n\nThe Data\n\n# 24 months of sales data\nsales_data = {\n    'month': list(range(1, 25)),\n    'sales_units': [\n        120, 135, 155, 145,  # Spring Year 1\n        165, 180, 195, 175,  # Summer Year 1\n        150, 140, 125, 130,  # Fall Year 1\n        110, 105, 115, 125,  # Winter Year 1/2\n        140, 150, 170, 160,  # Spring Year 2\n        175, 190, 210, 185   # Summer Year 2\n    ]\n}\n\n# Convert to pandas DataFrame for easier handling\ndf = pd.DataFrame(sales_data)\nprint(df.head())\nprint(f\"\\nTotal months: {len(df)}\")\nprint(f\"Average sales: {df['sales_units'].mean():.1f}\")\n\n   month  sales_units\n0      1          120\n1      2          135\n2      3          155\n3      4          145\n4      5          165\n\nTotal months: 24\nAverage sales: 152.1\n\n\n\n\nTask 1: Moving Average Forecast (15%)\n\ndef moving_average_forecast(data, window_size=3):\n    \"\"\"\n    Calculate moving average forecast for next period.\n\n    Args:\n        data: List or array of historical values\n        window_size: Number of periods to average\n\n    Returns:\n        float: Forecast for next period\n    \"\"\"\n    # YOUR CODE HERE\n    # Take the average of the last 'window_size' periods\n\n    return forecast\n\n# Test different window sizes and print the results\n# YOUR CODE HERE\n\n\n\nTask 2: Exponential Smoothing (15%)\nUnderstanding Exponential Smoothing:\nExponential smoothing gives more weight to recent observations while still considering historical data. The formula is:\n\\[F_t = α × A_(t-1) + (1 - α) × F_(t-1)\\]\nWhere:\n\n\\(F_t\\) = Forecast for period \\(t\\)\n\\(A_(t-1)\\) = Actual value in previous period\n\\(F_(t-1)\\) = Forecast for previous period\n\\(α\\) = Smoothing parameter between 0 and 1\n\nHow it works:\n\nStart with the first actual value as your initial forecast: \\(F_1 = A_1\\)\nFor each subsequent period, update the forecast using the formula above\nHigher α (e.g., 0.7) = more weight on recent data (responsive to changes)\nLower α (e.g., 0.1) = more weight on historical pattern (smooth, stable)\n\nExample with α = 0.3:\n\nMonth 1: Actual = 120, Forecast = 120 (initial)\nMonth 2: Actual = 135, Forecast = 0.3 × 120 + 0.7 × 120 = 120\nMonth 3: Actual = 155, Forecast = 0.3 × 135 + 0.7 × 120 = 124.5\nAnd so on…\n\n\ndef exponential_smoothing(data, alpha=0.3):\n    \"\"\"\n    Calculate exponential smoothing forecast for next period.\n\n    Args:\n        data: Historical values (list or array)\n        alpha: Smoothing parameter (0-1)\n               Higher alpha = more weight on recent data\n\n    Returns:\n        float: Forecast for next period\n    \"\"\"\n    # Initialize forecast with first actual value\n    forecast = data[0]\n\n    # YOUR CODE HERE\n    # Loop through data starting from index 1\n    # For each actual value, update forecast using the formula:\n    #   forecast = alpha * actual + (1 - alpha) * forecast\n\n    # Return the final forecast (which predicts the next period)\n    return forecast\n\n# Test different alpha values and print the results\n# Try alpha = 0.1 (smooth), 0.3 (balanced), 0.7 (responsive)\n# YOUR CODE HERE\n\n\n\nTask 3: Evaluate and Compare Methods (20%)\n\n# Split data: first 20 months for training, last 4 for testing\ntrain_data = df['sales_units'].values[:20]\ntest_data = df['sales_units'].values[20:]\n\n# Generate forecasts for test period\nma_forecasts = []\nes_forecasts = []\n\n# For each test month:\n# 1. Use training data to forecast\n# 2. Add actual value to training for next forecast\n# YOUR CODE HERE\n\n# Calculate Mean Absolute Error (MAE)\n# YOUR CODE HERE\n\n\n# Visualization\n# Add lines for:\n# - Moving average forecasts\n# - Exponential smoothing forecasts\n# Mark the train/test split\n# YOUR CODE HERE\n\nBusiness Question: Which forecasting method would you recommend and why? How much safety stock should they hold (based on your assumption)? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#submission-checklist",
    "href": "assignments/assignment_01.html#submission-checklist",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Submission Checklist",
    "text": "Submission Checklist\n\nAll code cells run without errors\nFunctions are commented\nVisualizations are clear and labeled\nBusiness questions are answered\nNames added to top of notebook"
  },
  {
    "objectID": "assignments/assignment_01.html#tips",
    "href": "assignments/assignment_01.html#tips",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Tips",
    "text": "Tips\n\nUse AI tools to help understand concepts and programm, but make sure you understand the code\nStart simple - get something working before optimizing\nRemember: the goal is good solutions, not perfect ones"
  }
]