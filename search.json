[
  {
    "objectID": "assignments/assignment_02.html",
    "href": "assignments/assignment_02.html",
    "title": "Assignment 2: Optimization in Practice",
    "section": "",
    "text": "Due: Start of Lecture 10 Weight: 20% of final grade Expected Time: 5-7 hours Work: Groups\nYour consulting firm has been hired by “CityExpress,” a local delivery company. They need help with: 1. Optimizing delivery routes to reduce costs 2. Creating efficient shift assignments that balance operational needs and worker preferences"
  },
  {
    "objectID": "assignments/assignment_02.html#assignment-overview",
    "href": "assignments/assignment_02.html#assignment-overview",
    "title": "Assignment 2: Optimization in Practice",
    "section": "",
    "text": "Due: Start of Lecture 10 Weight: 20% of final grade Expected Time: 5-7 hours Work: Groups\nYour consulting firm has been hired by “CityExpress,” a local delivery company. They need help with: 1. Optimizing delivery routes to reduce costs 2. Creating efficient shift assignments that balance operational needs and worker preferences"
  },
  {
    "objectID": "assignments/assignment_02.html#consultants",
    "href": "assignments/assignment_02.html#consultants",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Consultants",
    "text": "Consultants\nWho is part of your group?\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#setup",
    "href": "assignments/assignment_02.html#setup",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Setup",
    "text": "Setup\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sets a random seed for reproducibility (no need to adjust this for you)\nnp.random.seed(42)"
  },
  {
    "objectID": "assignments/assignment_02.html#part-a-smart-delivery-routes-50",
    "href": "assignments/assignment_02.html#part-a-smart-delivery-routes-50",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Part A: Smart Delivery Routes (50%)",
    "text": "Part A: Smart Delivery Routes (50%)\n\nScenario\nCityExpress has 12 customer orders to deliver tomorrow. They need an efficient route starting and ending at their depot.\n\n\nThe Data\n\n# Location coordinates (in km from origin)\nlocations = {\n    0: (10, 10),   # Depot\n    1: (8, 15),    # Customer 1\n    2: (14, 18),   # Customer 2\n    3: (5, 12),    # Customer 3\n    4: (18, 8),    # Customer 4\n    5: (12, 5),    # Customer 5\n    6: (3, 7),     # Customer 6\n    7: (16, 14),   # Customer 7\n    8: (7, 3),     # Customer 8\n    9: (15, 6),    # Customer 9\n    10: (11, 17),  # Customer 10\n    11: (4, 16),   # Customer 11\n    12: (19, 12)   # Customer 12\n}\n\n\n\nTask 1: Build a Basic Route (20%)\n\ndef calculate_distance(loc1, loc2):\n    \"\"\"Calculate Euclidean distance between two locations.\"\"\"\n    x1, y1 = loc1\n    x2, y2 = loc2\n    # YOUR CODE HERE\n\n    return distance\n\ndef calculate_total_distance(route, locations):\n    \"\"\"Calculate total distance for a route.\"\"\"\n    total = 0\n    # YOUR CODE HERE\n\n    # Sum distances between consecutive locations\n    return total\n\ndef nearest_neighbor_route(depot, locations):\n    \"\"\"\n    Build route using nearest neighbor heuristic.\n    Always visit the nearest unvisited customer next.\n    \"\"\"\n    route = [depot] # Start with depot\n    # YOUR CODE HERE\n\n    route.append(depot)  # End with depot\n    return route\n\n# Build your route\n# YOUR CODE HERE\n\n\n\nTask 2: Improve Your Route (20%)\nUnderstanding 2-Opt Improvement:\nThe 2-opt algorithm improves a route by removing two edges and reconnecting them in a different way. This is like “uncrossing” routes that cross over themselves.\nVisual Example:\nBefore:  A → B → C → D → A\nIf we take edges (A→B) and (C→D) and swap them:\nAfter:   A → C → B → D → A  (reversed the B→C segment)\nThe Algorithm:\n\nStart with your current best route and its distance\nTry swapping every possible pair of edges:\n\nTake positions i and j in the route (where i &lt; j)\nReverse the segment between i and j\nCalculate the new distance\n\nIf the new route is better, keep it as your new best\nRepeat until no improvement is found\n\n\ndef try_swap_improvement(route, locations):\n    \"\"\"\n    Try all possible 2-opt swaps and return the best improvement found.\n\n    Args:\n        route: Current route (list of location indices)\n        locations: Dictionary of location coordinates\n\n    Returns:\n        tuple: (best_route, best_distance) or (None, None) if no improvement\n    \"\"\"\n    # YOUR CODE HERE (replace pass)\n\n    pass\n\ndef improve_route(initial_route, locations, max_iterations=50):\n    \"\"\"\n    Repeatedly apply 2-opt improvements until no improvement is found.\n\n    Args:\n        initial_route: Starting route\n        locations: Dictionary of location coordinates\n        max_iterations: Maximum number of improvement attempts\n\n    \"\"\"\n    # Loop while iteration &lt; max_iterations:\n    #   1. Call try_swap_improvement on current_route\n    #   2. If no improvement found, break\n    #   3. Otherwise, update current_route and current_distance\n    #   4. Increment iteration counter\n    # YOUR CODE HERE (replace pass)\n\n    pass\n\n# Improve your route\n# YOUR CODE HERE\n\n\n\nTask 3: Visualize and Analyze (10%)\n\nVisualize both routes (before and after improvement)\nCalculate and compare:\n\nOriginal route distance\nImproved route distance\nPercentage improvement\nEstimated cost savings (€2 per km)\n\n\n\n# Visualize both routes\n# YOUR CODE HERE\n\n# Calculate metrics\n# YOUR CODE HERE\n\nBusiness Question: If CityExpress has 50 deliveries per day, how much could they save per month with route optimization? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#part-b-smart-shift-assignment-50",
    "href": "assignments/assignment_02.html#part-b-smart-shift-assignment-50",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Part B: Smart Shift Assignment (50%)",
    "text": "Part B: Smart Shift Assignment (50%)\n\nScenario\nCityExpress warehouse needs to assign 6 workers to 6 different shifts this week. Each worker works exactly one shift. Your job: maximize worker satisfaction by matching them to their preferred shifts.\n\n\nConnection to Lecture 6\nRemember greedy heuristics from job shop scheduling (SPT, EDD)? You’ll design similar rules here—but for workers and shifts instead of jobs and machines.\nThink about:\n\nSPT prioritized shortest jobs first\nEDD prioritized jobs with earliest deadlines first\nWhat should you prioritize for shift assignment?\n\n\n\nThe Data\n\n# 6 shifts available this week\nshifts = [\n    'Monday-Morning',\n    'Monday-Evening',\n    'Tuesday-Morning',\n    'Tuesday-Evening',\n    'Wednesday-Morning',\n    'Wednesday-Evening'\n]\n\n# Worker shift preferences (in order of preference: 1st choice, 2nd choice, 3rd choice)\nworker_preferences = {\n    0: ['Monday-Morning', 'Tuesday-Morning', 'Wednesday-Morning'],     # Morning person\n    1: ['Monday-Evening', 'Tuesday-Evening', 'Wednesday-Evening'],     # Prefers evenings\n    2: ['Monday-Morning', 'Wednesday-Morning'],                        # Flexible, fewer preferences\n    3: ['Tuesday-Evening', 'Wednesday-Evening'],                       # Evening only, fewer preferences\n    4: ['Monday-Morning', 'Monday-Evening', 'Tuesday-Morning'],        # Busy early week\n    5: ['Wednesday-Morning', 'Wednesday-Evening']                      # Wednesday preferred\n}\n\n# Assignment representation:\n# assignment = [shift_index for each worker]\n# Example: assignment = [0, 1, 2, 3, 4, 5]\n#   Worker 0 gets shift 0 (Monday-Morning)\n#   Worker 1 gets shift 1 (Monday-Evening)\n#   Worker 2 gets shift 2 (Tuesday-Morning)\n#   etc.\n\n\n\nTask 1: Design Your Greedy Heuristic (15%)\nChallenge: Create a function that builds an assignment using YOUR OWN greedy strategy.\nNeed a starting point?\nAsk yourself:\n\nWhat made SPT different from EDD?\nWhat attributes do workers have?\nWhat attributes do shifts have?\nPick one attribute to prioritize. That’s your greedy rule!\n\n\ndef my_greedy_assignment(worker_preferences, shifts):\n    \"\"\"\n    Build an assignment using YOUR greedy strategy.\n\n    Args:\n        worker_preferences: Dict of worker_id → list of preferred shift names\n        shifts: List of 6 shift names\n\n    Returns:\n        list: assignment where assignment[worker_id] = shift_index\n              Example: [0, 1, 2, 3, 4, 5] means worker 0→shift 0, worker 1→shift 1, etc.\n    \"\"\"\n    assignment = [-1] * 6  # -1 means unassigned\n    available_shifts = list(range(6))  # Track which shifts are still open\n\n    # YOUR GREEDY STRATEGY HERE\n    # Questions to guide you:\n    # 1. In what order will you process the workers? (0,1,2,3,4,5 or different order?)\n    # 2. For each worker, how do you pick their shift from available ones?\n    # 3. What if their preferred shifts are all taken?\n\n    # YOUR CODE HERE\n\n    return assignment\n\n# Test your greedy heuristic\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking greedy function that produces a valid assignment (all assigned, no duplicate shifts)\nWritten explanation (3-4 sentences)\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nMy greedy strategy: [describe your rule]\nReasoning: [why did you choose this approach?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nMy greedy strategy: [describe your rule]\\nReasoning: [why did you choose this approach?]\\n'\n\n\n\n\nTask 2: Build an Evaluation Function (15%)\nChallenge: Create a function that measures how GOOD an assignment is.\nDesign questions:\n\nShould you give more points for 1st choice vs 2nd choice vs 3rd choice?\nShould all workers count equally, or weight some more?\nWhat if a worker gets a shift they didn’t list as preferred?\n\n\ndef calculate_satisfaction(assignment, worker_preferences, shifts):\n    \"\"\"\n    Calculate how good an assignment is.\n\n    Design YOUR OWN scoring system!\n\n    Possible approaches:\n    - 1st choice = 3 pts, 2nd choice = 2 pts, 3rd choice = 1 pt, other = 0 pts\n    - 1st choice = 10 pts, 2nd choice = 5 pts, 3rd choice = 1 pt, other = -5 pts\n    - Binary: preferred shift = 1 pt, non-preferred = 0 pts\n    - Your own scoring!\n\n    Args:\n        assignment: List where assignment[worker_id] = shift_index\n        worker_preferences: Dict of worker_id → list of preferred shift names\n        shifts: List of shift names\n\n    Returns:\n        float or int: Total satisfaction score (higher is better)\n    \"\"\"\n    # Design your own scoring system!\n    # YOUR EVALUATION LOGIC HERE\n\n\n    return total_satisfaction\n\n# Test your evaluation function\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking evaluation function\nWritten explanation (2-3 sentences):\n\nWhat scoring system did you design?\nWhy did you choose this approach?\nHow does it relate to metrics from Lecture 6?\n\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nMy scoring system: [describe how you calculate satisfaction]\nReasoning: [why this approach?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nMy scoring system: [describe how you calculate satisfaction]\\nReasoning: [why this approach?]\\n'\n\n\n\n\nTask 3: Improve with Local Search (15%)\nChallenge: Take your greedy solution and improve it using local search.\nThink about Lecture 7:\n\n2-opt tried swaps and kept improvements\nIt kept searching until no improvement was found\nCan you apply similar logic here?\n\nYour task: Implement a local search that tries swapping workers’ shifts.\n\ndef improve_with_local_search(initial_assignment, worker_preferences, shifts):\n    \"\"\"\n    Improve an assignment using local search (like 2-opt from Lecture 7).\n    Strategy: Try swapping pairs of workers' shifts, keep if it improves satisfaction.\n\n    Think about:\n    - How do you generate \"neighbor\" solutions? (swap two workers)\n    - How do you know if a neighbor is better? (use your evaluation function!)\n    - When do you stop? (no improvement found, or max iterations)\n\n    Args:\n        initial_assignment: Starting assignment (from your greedy)\n        worker_preferences: Dict of worker_id → preferred shifts\n        shifts: List of shift names\n\n    Returns:\n        list: improved assignment\n    \"\"\"\n\n    # YOUR LOCAL SEARCH LOGIC HERE\n\n\n    # YOUR CODE HERE\n\n    return improved_assignment\n\n# Apply local search\n# YOUR CODE HERE\n\nDeliverable:\n\nWorking local search function that improves the solution\nVisualization showing before/after\nWritten explanation (3-4 sentences):\n\nHow does your local search work?\nHow much did you improve the greedy solution?\nCould you improve it further?\n\n\n\n\"\"\"\nYOUR EXPLANATION HERE:\nLocal search method: [describe your approach]\nResults: [how much improvement?]\nFurther improvements?: [yes/no and why?]\n\"\"\"\n\n'\\nYOUR EXPLANATION HERE:\\nLocal search method: [describe your approach]\\nResults: [how much improvement?]\\nFurther improvements?: [yes/no and why?]\\n'\n\n\n\n\nTask 4: Business Reflection (5%)\nQuestion 1: Imagine one worker calls in sick at the last minute. How would you quickly reassign the remaining 5 workers to 6 shifts (one shift will be unfilled)? Would your greedy strategy still work? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'\n\n\nQuestion 2: Your manager says “I don’t care about worker preferences, just fill all shifts as quickly as possible.” How would this change your approach? What would you lose? (2-3 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_02.html#submission-checklist",
    "href": "assignments/assignment_02.html#submission-checklist",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Submission Checklist",
    "text": "Submission Checklist\n\nAll code cells run without errors\nPart A: Routes are properly visualized\nPart B: Greedy heuristic, evaluation function, and local search all implemented\nWritten explanations completed for all tasks\nBusiness questions answered\nCode is commented and clear\nNames added to top of notebook"
  },
  {
    "objectID": "assignments/assignment_02.html#tips",
    "href": "assignments/assignment_02.html#tips",
    "title": "Assignment 2: Optimization in Practice",
    "section": "Tips",
    "text": "Tips\n\nUse AI tools to help understand concepts and program, but make sure you understand the code\nStart simple - get something working before optimizing\nExperiment! - there’s no single “correct” approach\nFocus on reasoning - I care more about your thinking than perfect code\nThe goal is good solutions, not perfect ones"
  },
  {
    "objectID": "assignments/assignment_00.html",
    "href": "assignments/assignment_00.html",
    "title": "Assignments in this Course",
    "section": "",
    "text": "This course uses two practical assignments to help you learn how to think like an optimization-minded analyst. Your focus throughout should be: understand the problem, design a sensible algorithmic approach, interpret results, and translate findings into clear business recommendations. Perfect code is not the goal—insight is.\n\n\n\n\n\n\nYou’re encouraged to use AI tools responsibly. Treat them like a smart pair-programmer that helps you learn and debug, but make sure you understand all code you submit and can explain it.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#welcome",
    "href": "assignments/assignment_00.html#welcome",
    "title": "Assignments in this Course",
    "section": "",
    "text": "This course uses two practical assignments to help you learn how to think like an optimization-minded analyst. Your focus throughout should be: understand the problem, design a sensible algorithmic approach, interpret results, and translate findings into clear business recommendations. Perfect code is not the goal—insight is.\n\n\n\n\n\n\nYou’re encouraged to use AI tools responsibly. Treat them like a smart pair-programmer that helps you learn and debug, but make sure you understand all code you submit and can explain it.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#the-two-assignments",
    "href": "assignments/assignment_00.html#the-two-assignments",
    "title": "Assignments in this Course",
    "section": "The Two Assignments",
    "text": "The Two Assignments\nAssignment 1: Risk Analysis & Forecasting (Due at the start of Lecture 7, weight 30%)\nYou’ll simulate investment outcomes to understand risk and then forecast demand using simple time-series techniques. Expect to implement Monte Carlo simulations, moving averages, and exponential smoothing, then compare methods and justify a recommendation.\nAssignment 2: Optimization in Practice (Due at the start of Lecture 10, weight 30%)\nYou’ll build and improve delivery routes and construct valid staff schedules under constraints, then iterate to improve quality and satisfaction. Expect to implement heuristics, evaluate improvements, visualize routes/schedules, and discuss trade-offs.\nWork is in groups for both assignments. Typical time commitment is 4–6 hours for Assignment 1 and 5–7 hours for Assignment 2.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#how-youll-be-graded",
    "href": "assignments/assignment_00.html#how-youll-be-graded",
    "title": "Assignments in this Course",
    "section": "How You’ll Be Graded",
    "text": "How You’ll Be Graded\n\nTechnical Implementation (60% of assignment grade)\n\nExcellent (90-100%): Code runs correctly, handles edge cases, well-structured\nGood (80-89%): Code runs with minor issues, mostly well-structured\nSatisfactory (70-79%): Code runs but has some problems, basic structure\nNeeds Improvement (60-69%): Code has significant issues but shows understanding\nInadequate (&lt;60%): Code doesn’t run or shows fundamental misunderstanding\n\n\n\nBusiness Insight (20% of assignment grade)\n\nExcellent: Clear actionable recommendations with quantified impact\nGood: Solid insights with some quantification\nSatisfactory: Basic insights communicated clearly\nNeeds Improvement: Insights unclear or not business-relevant\nInadequate: No meaningful insights provided\n\n\n\nPresentation Quality (20% of assignment grade)\n\nExcellent: Compelling visualizations, clear narrative\nGood: Good visuals, mostly clear communication\nSatisfactory: Basic visualizations, understandable presentation\nNeeds Improvement: Poor visuals or unclear communication\nInadequate: No effective communication of results\n\n\n\n\n\n\n\nUse AI to clarify concepts, explore alternatives, and debug. Please, do not submit code you don’t understand. You’re responsible for every line. If you draw from external sources, cite them briefly in your notebook.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#tips-for-success",
    "href": "assignments/assignment_00.html#tips-for-success",
    "title": "Assignments in this Course",
    "section": "Tips for Success",
    "text": "Tips for Success\n\nStart simple, then iterate. Get a working baseline first.\nCheck your logic with small tests and intermediate prints.\nKeep business questions in view—your job is to inform a decision.\n\n\n\n\n\n\n\nCommon pitfalls to watch for: forgetting return-to-depot in routing, violating constraints after a change, optimizing forever instead of delivering “good enough,” and failing to actually answer the business questions.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#submission-requirements",
    "href": "assignments/assignment_00.html#submission-requirements",
    "title": "Assignments in this Course",
    "section": "Submission Requirements",
    "text": "Submission Requirements\nSubmit one Jupyter notebook per assignment that includes:\n\nYour commented code with outputs and clear visualizations.\nShort, direct answers to the business questions.\n\nFile naming:\n\nAssignment 1: Assignment_01_[GroupNames].ipynb\nAssignment 2: Assignment_02_[GroupNames].ipynb",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "assignments/assignment_00.html#late-policy",
    "href": "assignments/assignment_00.html#late-policy",
    "title": "Assignments in this Course",
    "section": "Late Policy",
    "text": "Late Policy\nSubmissions lose 10% per day late, up to a maximum of three days. Exceptions are granted only for documented emergencies.",
    "crumbs": [
      "Assignments",
      "Introduction"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html",
    "href": "tutorials/nb_04_01_monte_carlo.html",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "",
    "text": "Welcome back to Bean Counter, CEO! In the lecture, we saw how Monte Carlo simulation helps us make decisions when the future is uncertain. Now it’s time to apply these techniques to expand your coffee empire and prepare for the TechVenture competition.\nYour CEO Challenge: Bean Counter Expansion - analyzing single locations and portfolios for strategic growth\nKey Skills for Competition:\n\nSimulating uncertain returns\nAnalyzing risk metrics\nComparing portfolio combinations\nMaking data-driven recommendations\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import combinations # Allows us to generate all portfolio combinations\n\n# Set seed for reproducibility\nnp.random.seed(42)\nprint(\"Libraries loaded! Let's analyze Bean Counter expansion opportunities ☕\")\n\nLibraries loaded! Let's analyze Bean Counter expansion opportunities ☕",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#understanding-np.random",
    "href": "tutorials/nb_04_01_monte_carlo.html#understanding-np.random",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Understanding np.random",
    "text": "Understanding np.random\n\n# Example: Daily customer traffic follows a normal distribution\n# Historical data shows: mean = 100, std = 20\n\n# Simulate one day\none_day_customers = np.random.normal(100, 20)\nprint(f\"One random day: {one_day_customers:.0f} customers\")\n\n# Simulate many days to see the pattern\nmany_days = np.random.normal(100, 20, size=1000)\nprint(f\"\\n1000 days simulation:\")\nprint(f\"  Mean: {many_days.mean():.1f} (expected: 100)\")\nprint(f\"  Std Dev: {many_days.std():.1f} (expected: 20)\")\nprint(f\"  Min: {many_days.min():.0f}, Max: {many_days.max():.0f}\")\n\nOne random day: 110 customers\n\n1000 days simulation:\n  Mean: 100.4 (expected: 100)\n  Std Dev: 19.6 (expected: 20)\n  Min: 35, Max: 177",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-1.1---simulate-purchase-amounts",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-1.1---simulate-purchase-amounts",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 1.1 - Simulate Purchase Amounts",
    "text": "Exercise 1.1 - Simulate Purchase Amounts\nAverage purchase per customer varies uniformly between €8 and €12. Simulate 10,000 purchase amounts.\n\n# YOUR CODE BELOW\n# Simulate 10,000 purchase amounts uniformly distributed between 8 and 12\npurchase_amounts =\n\n# Calculate statistics\nmean_purchase =\nmin_purchase =\nmax_purchase =\n\n\n\nCode\n# Don't modify below - these test your solution\nassert len(purchase_amounts) == 10_000, \"Should have 10,000 simulations\"\nassert 9.9 &lt; mean_purchase &lt; 10.1, f\"Mean should be ~10, got {mean_purchase:.2f}\"\nassert 8 &lt;= min_purchase &lt; 9, f\"Min should be ~8, got {min_purchase:.2f}\"\nassert 11 &lt; max_purchase &lt;= 12, f\"Max should be ~12, got {max_purchase:.2f}\"\nprint(\"Great, the purchase simulation is correct!\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-1.2---calculate-probabilities",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-1.2---calculate-probabilities",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 1.2 - Calculate Probabilities",
    "text": "Exercise 1.2 - Calculate Probabilities\nUsing your simulated data from the previous task, calculate key probabilities.\n\n# YOUR CODE BELOW\n# Using the many_days array from above (1000 days of customer data)\n# Calculate the probability of different scenarios\n\n# Probability of getting more than 120 customers\nprob_high =\n\n# Probability of getting fewer than 80 customers\nprob_low =\n\n# Probability of being within one std dev of mean (80-120)\nprob_normal =\n\n\n\nCode\n# Don't modify below\nassert 0.10 &lt; prob_high &lt; 0.20, f\"High probability should be ~0.16, got {prob_high:.3f}\"\nassert 0.10 &lt; prob_low &lt; 0.20, f\"Low probability should be ~0.16, got {prob_low:.3f}\"\nassert 0.65 &lt; prob_normal &lt; 0.72, f\"Normal range probability should be ~0.68, got {prob_normal:.3f}\"\nprint(f\"  P(&gt;120): {prob_high:.1%}\")\nprint(f\"  P(&lt;80): {prob_low:.1%}\")\nprint(f\"  P(80-120): {prob_normal:.1%}\")\nprint(\"Wonderful, probability calculations correct!\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#the-bean-counter-store-model",
    "href": "tutorials/nb_04_01_monte_carlo.html#the-bean-counter-store-model",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "The Bean Counter Store Model",
    "text": "The Bean Counter Store Model\n\ndef simulate_bean_counter_day(mean_customers=100, std_customers=20,\n                            min_purchase=8, max_purchase=12,\n                            fixed_costs=500, variable_cost_rate=0.35):\n    \"\"\"Simulate one day of Bean Counter store operations\"\"\"\n    # Uncertain variables\n    customers = np.random.normal(mean_customers, std_customers)\n    avg_purchase = np.random.uniform(min_purchase, max_purchase)\n\n    # Business calculations\n    revenue = customers * avg_purchase\n    variable_costs = variable_cost_rate * revenue\n    profit = revenue - fixed_costs - variable_costs\n\n    return {\n        'customers': customers,\n        'avg_purchase': avg_purchase,\n        'revenue': revenue,\n        'profit': profit\n    }\n\n# Test one simulation\none_day = simulate_bean_counter_day()\nprint(f\"One day at Bean Counter:\")\nprint(f\"  Customers: {one_day['customers']:.0f}\")\nprint(f\"  Avg purchase: €{one_day['avg_purchase']:.2f}\")\nprint(f\"  Revenue: €{one_day['revenue']:.2f}\")\nprint(f\"  Profit: €{one_day['profit']:.2f}\")\n\nOne day at Bean Counter:\n  Customers: 118\n  Avg purchase: €9.73\n  Revenue: €1153.10\n  Profit: €249.52",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-2.1---run-multiple-simulations",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-2.1---run-multiple-simulations",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 2.1 - Run Multiple Simulations",
    "text": "Exercise 2.1 - Run Multiple Simulations\nSimulate 10,000 days of Bean Counter operations and analyze the results.\n\n# YOUR CODE BELOW\n# Run 10,000 simulations of Bean Counter store\nn_simulations = 10_000\nresults = []\n\nfor i in range(n_simulations):\n    # Simulate one day and add to results\n\n# Calculate key metrics (Tip: a DataFrame could help here!)\nmean_profit =\nprob_loss =\nmax_profit =\n\n\n\nCode\n# Don't modify below\nassert len(df) == 10_000, \"Should have 10,000 simulations\"\nassert 100 &lt; mean_profit &lt; 200, f\"Mean profit should be ~150, got {mean_profit:.2f}\"\nassert 0.12 &lt; prob_loss &lt; 0.18, f\"Probability of loss should be ~15%, got {prob_loss:.1%}\"\nassert max_profit &gt; 500, f\"Max profit should be &gt;500, got {max_profit:.2f}\"\nprint(\"Very good, the simulation is correct!\")\nprint(f\"  Mean daily profit: €{mean_profit:.2f}\")\nprint(f\"  Probability of loss: {prob_loss:.1%}\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-2.2---visualize-the-distribution",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-2.2---visualize-the-distribution",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 2.2 - Visualize the Distribution",
    "text": "Exercise 2.2 - Visualize the Distribution\nCreate a histogram of profit distribution and the percentage of profits between 100 and 400 Euro with key markers based on the results before.\n\n# YOUR CODE BELOW\n\n# Calculate what percentage of profits are between €100 and €400\nprob_target_range =\n\n\n# Create a histogram of the profit distribution with 50 bins\n\n\n\nCode\n# Don't modify below\nassert 0.5 &lt; prob_target_range &lt; 0.6, f\"Should be ~55% in range, got {prob_target_range:.1%}\"\nprint(f\"Visualization complete! {prob_target_range:.1%} of days have profit €100-400\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#value-at-risk-var",
    "href": "tutorials/nb_04_01_monte_carlo.html#value-at-risk-var",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Value at Risk (VaR)",
    "text": "Value at Risk (VaR)\n\n# Value at Risk: \"What's the worst-case scenario in X% of cases?\"\nprofits_array = df['profit'].values\n\n# 5% VaR: The profit level that we'll exceed 95% of the time\nvar_5 = np.percentile(profits_array, 5)\nprint(f\"Value at Risk (5%): €{var_5:.2f}\")\nprint(f\"Interpretation: There's a 5% chance of daily profit below €{var_5:.2f}\")\n\n# 1% VaR: More extreme scenario\nvar_1 = np.percentile(profits_array, 1)\nprint(f\"\\nValue at Risk (1%): €{var_1:.2f}\")\nprint(f\"Interpretation: There's a 1% chance of daily profit below €{var_1:.2f}\")\n\n# Standard deviation\nstd_dev = np.std(profits_array)\nprint(f\"\\nStandard deviation: €{std_dev:.2f}\")\nprint(f\"Interpretation: Daily profit typically varies by €{std_dev:.2f} from the mean\")\n#\n\nValue at Risk (5%): €-85.38\nInterpretation: There's a 5% chance of daily profit below €-85.38\n\nValue at Risk (1%): €-169.11\nInterpretation: There's a 1% chance of daily profit below €-169.11\n\nStandard deviation: €150.86\nInterpretation: Daily profit typically varies by €150.86 from the mean",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-3.1---calculate-risk-metrics",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-3.1---calculate-risk-metrics",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 3.1 - Calculate Risk Metrics",
    "text": "Exercise 3.1 - Calculate Risk Metrics\nCalculate comprehensive risk metrics for the coffee shop.\n\n# YOUR CODE BELOW\n# Calculate various risk metrics\n\n# Standard deviation (volatility)\nvolatility =\n\n# Probability of making at least €200 profit\nprob_good_day =\n\n# Expected Shortfall: average profit in worst 10% of days\nworst_10_pct_threshold = np.percentile(profits_array, 10)\nworst_days = profits_array[profits_array &lt;= worst_10_pct_threshold]\nexpected_shortfall =\n\n\n\nCode\n# Don't modify below\nassert 140 &lt; volatility &lt; 160, f\"Volatility should be ~150, got {volatility:.2f}\"\nassert 0.25 &lt; prob_good_day &lt; 0.45, f\"Probability should be ~35%, got {prob_good_day:.1%}\"\nassert -125 &lt; expected_shortfall &lt; -75, f\"ES should be ~100, got {expected_shortfall:.2f}\"\nprint(\"Risk metrics correct!\")\nprint(f\"  Volatility: €{volatility:.2f}\")\nprint(f\"  P(Profit ≥ €200): {prob_good_day:.1%}\")\nprint(f\"  Expected Shortfall (10%): €{expected_shortfall:.2f}\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#simulating-multiple-locations",
    "href": "tutorials/nb_04_01_monte_carlo.html#simulating-multiple-locations",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Simulating Multiple Locations",
    "text": "Simulating Multiple Locations\n\n# Bean Counter is considering 4 different expansion locations with different characteristics\ndef simulate_location(location_params, n_days=10_000):\n    \"\"\"Simulate n_days for a specific location\"\"\"\n    profits = []\n    for _ in range(n_days):\n        customers = np.random.normal(location_params['mean_customers'],\n                                    location_params['std_customers'])\n        avg_purchase = np.random.uniform(location_params['min_purchase'],\n                                        location_params['max_purchase'])\n        revenue = customers * avg_purchase\n        variable_costs = location_params['variable_rate'] * revenue\n        profit = revenue - location_params['fixed_costs'] - variable_costs\n        profits.append(profit)\n    return np.array(profits)\n\n# Define 4 different Bean Counter expansion locations\nlocations = {\n    'Downtown': {\n        'mean_customers': 150, 'std_customers': 30,\n        'min_purchase': 10, 'max_purchase': 15,\n        'fixed_costs': 800, 'variable_rate': 0.35\n    },\n    'Campus': {\n        'mean_customers': 200, 'std_customers': 60,\n        'min_purchase': 6, 'max_purchase': 10,\n        'fixed_costs': 600, 'variable_rate': 0.40\n    },\n    'Suburb': {\n        'mean_customers': 80, 'std_customers': 15,\n        'min_purchase': 12, 'max_purchase': 18,\n        'fixed_costs': 400, 'variable_rate': 0.30\n    },\n    'Airport': {\n        'mean_customers': 120, 'std_customers': 40,\n        'min_purchase': 15, 'max_purchase': 25,\n        'fixed_costs': 1200, 'variable_rate': 0.45\n    }\n}\n\n# Simulate all locations\nprint(\"Simulating 4 locations...\")\nlocation_profits = {}\nfor name, params in locations.items():\n    location_profits[name] = simulate_location(params)\n    print(f\"  {name}: Mean profit €{location_profits[name].mean():.2f}\")\n\nSimulating 4 locations...\n  Downtown: Mean profit €419.31\n  Campus: Mean profit €361.22\n  Suburb: Mean profit €438.13\n  Airport: Mean profit €115.56",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-4.1---analyze-all-portfolio-combinations",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-4.1---analyze-all-portfolio-combinations",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 4.1 - Analyze All Portfolio Combinations",
    "text": "Exercise 4.1 - Analyze All Portfolio Combinations\nBean Counter can afford to open exactly 2 new locations. Which pair should they choose for maximum profitability?\n\n# Analyze all possible pairs of locations\n# Get all combinations of 2 locations\nlocation_names = list(locations.keys())\npairs = list(combinations(location_names, 2))\n\n# YOUR CODE BELOW\n\n# Analyze each portfolio\nportfolio_results = []\n\nfor pair in pairs:\n    # Get profits for each location in the pair\n    profits_1 = location_profits[pair[0]]\n    profits_2 = location_profits[pair[1]]\n\n    # Portfolio assumes equal investment (50/50 split)\n    portfolio_profit = # Your task!\n\n    # Calculate metrics\n    result = {\n        'pair': f\"{pair[0]} + {pair[1]}\",\n        'mean': , # Your task!\n        'std': , # Your task!\n        'prob_loss': , # Your task!\n        'var_5': # Your task!\n    }\n    portfolio_results.append(result)\n\n# Convert to DataFrame and sort by mean profit\ndf_portfolios = pd.DataFrame(portfolio_results)\ndf_portfolios = df_portfolios.sort_values('mean', ascending=False)\n\n# Find best portfolio by mean return\nbest_mean_portfolio = # Your task!\nbest_mean_value = # Your task!\n\n\n\nCode\n# Don't modify below\nassert len(portfolio_results) == 6, \"Should have 6 portfolio combinations\"\nassert 'Downtown + Suburb' in best_mean_portfolio or 'Suburb + Downtown' in best_mean_portfolio, \\\n    f\"Best mean portfolio should include Downtown and Campus, got {best_mean_portfolio}\"\nassert 350 &lt; best_mean_value &lt; 450, f\"Best mean should be ~400, got {best_mean_value:.2f}\"\nprint(\"Portfolio analysis correct!\")\nprint(\"\\nAll Portfolio Combinations:\")\nprint(df_portfolios.to_string(index=False))",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#visualizing-risk-return-tradeoffs",
    "href": "tutorials/nb_04_01_monte_carlo.html#visualizing-risk-return-tradeoffs",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Visualizing Risk-Return Tradeoffs",
    "text": "Visualizing Risk-Return Tradeoffs\n\n# Create risk-return scatter plot for Bean Counter expansion\nplt.figure(figsize=(10, 6))\n\nfor _, row in df_portfolios.iterrows():\n    plt.scatter(row['std'], row['mean'], s=100, alpha=0.7)\n    plt.annotate(row['pair'], (row['std'], row['mean']),\n                fontsize=9, xytext=(5, 5), textcoords='offset points')\n\nplt.xlabel('Risk (Standard Deviation)')\nplt.ylabel('Expected Daily Profit (€)')\nplt.title('Risk-Return Profile of Bean Counter Portfolio Options')\nplt.grid(True, alpha=0.3)\nplt.show()",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#exercise-5.1---final-ceo-recommendation",
    "href": "tutorials/nb_04_01_monte_carlo.html#exercise-5.1---final-ceo-recommendation",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Exercise 5.1 - Final CEO Recommendation",
    "text": "Exercise 5.1 - Final CEO Recommendation\nBased on your analysis, make a strategic expansion recommendation for Bean Counter.\n\n# YOUR CODE BELOW\n# Create a recommendation dictionary with your analysis\n\n# Which portfolio maximizes expected profit?\nmax_profit_portfolio =\n\n# Which portfolio minimizes risk (lowest std)?\nmin_risk_portfolio =\n\n# Your final recommendation (choose one)\nfinal_recommendation = # Choose the portfolio you would recommend\n\n\n\nCode\n# Don't modify below\nassert final_recommendation in df_portfolios['pair'].values, \"Must choose an actual portfolio\"\nprint(f\"\\nYour Recommendation: {final_recommendation}\")",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_04_01_monte_carlo.html#key-differences-for-competition",
    "href": "tutorials/nb_04_01_monte_carlo.html#key-differences-for-competition",
    "title": "Notebook 4.1 - Monte Carlo Simulation Practice",
    "section": "Key Differences for Competition",
    "text": "Key Differences for Competition\nThe competition uses:\n\nInvestment returns instead of daily profits\nDifferent distributions (some normal, one uniform)\nLarger scale (€1M investments vs daily operations)\n\nBut the approach is identical! Apply what you’ve learned here.\n\n\n\n\n\n\nJust as you’ve optimized Bean Counter’s expansion, use scoring functions in the competition to make objective decisions when multiple factors matter. Your journey from Barista Trainee to CEO has prepared you for this!\n\n\n\nGood luck in the TechVenture Investment Challenge, CEO!",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-01 Monte Carlo"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html",
    "href": "tutorials/nb_03_02_pandas.html",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "",
    "text": "Welcome back to the CEO suite at Bean Counter!\nYour Data Challenge as CEO\nNow that you’ve mastered NumPy for numerical analysis, you face a new challenge: Bean Counter’s data comes in spreadsheets, CSVs, and databases. You have:\n\nSales reports from 50+ locations\nProduct catalogs with thousands of items\nCustomer data with demographics and preferences\nSupplier information across multiple regions\n\nThe Problem: This data has labels, categories, dates, and mixed types. NumPy arrays aren’t enough, you need something more powerful!\nYour Tool: Pandas - Think of it as Excel but better, capable of handling millions of rows.\nIn this tutorial, you’ll learn to wrangle business data, turning spreadsheets into actionable insights.\n\n\n\n\n\n\nExcel cannot have more than 1 million rows!\n\n\n\n\n\n\n\n\n\nNoteHow to Use This Tutorial\n\n\n\nFirst import pandas and numpy. Work through exercises marked “YOUR CODE BELOW”.",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html#exercise-1.1---create-product-catalog-dataframe",
    "href": "tutorials/nb_03_02_pandas.html#exercise-1.1---create-product-catalog-dataframe",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "Exercise 1.1 - Create Product Catalog DataFrame",
    "text": "Exercise 1.1 - Create Product Catalog DataFrame\nBuild a DataFrame for Bean Counter’s top products.\n\nimport pandas as pd\n\n# Create a dictionary with product data\nproduct_data = {\n    'product_name': ['Espresso', 'Latte', 'Cappuccino', 'Americano', 'Mocha'],\n    'price': [2.50, 4.50, 4.00, 3.00, 5.00],\n    'cost': [0.75, 1.50, 1.25, 0.90, 1.80],\n    'units_sold_daily': [450, 320, 280, 210, 190]\n}\n\n# YOUR CODE BELOW\n\n# Create DataFrame\nproducts_df =\n\n\n\nCode\n# Test your DataFrame\nassert products_df.shape == (5, 4), \"Should have 5 products and 4 columns\"\nassert list(products_df.columns) == ['product_name', 'price', 'cost', 'units_sold_daily']\nassert products_df['price'].sum() == 19.00, \"Total price should be 19.00\"\nprint(\"Bean Counter Product Catalog:\")\nprint(products_df)\nprint(\"Perfect! Your product catalog is ready for analysis!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html#exercise-2.1---explore-store-performance",
    "href": "tutorials/nb_03_02_pandas.html#exercise-2.1---explore-store-performance",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "Exercise 2.1 - Explore Store Performance",
    "text": "Exercise 2.1 - Explore Store Performance\nUse pandas exploration methods to understand store performance data.\n\nimport pandas as pd\nimport numpy as np\n\n# Store performance data\nperformance_df = pd.DataFrame({\n    'store': ['Plaza', 'Station', 'Park', 'Beach', 'Airport', 'Mall', 'Downtown', 'University'],\n    'quarterly_revenue': [1250000, 980000, 870000, 650000, 1450000, 1100000, 1350000, 920000],\n    'profit_margin': [32.5, 28.7, 30.1, 25.4, 35.2, 31.8, 33.9, 29.5],\n    'customer_count': [45000, 38000, 34000, 28000, 52000, 41000, 48000, 36000],\n    'satisfaction': [4.7, 4.5, 4.6, 4.8, 4.4, 4.6, 4.8, 4.9]\n})\n\n# YOUR CODE BELOW\n# 1. Display the first 3 rows and store in a variable\nfirst_rows =\n\n# 2. Get the shape (rows, columns) and save it\ndata_shape =\n\n# 3. Get summary statistics for numerical columns and store them\nsummary_stats =\n\n\n\nCode\n# Test your exploration\nassert data_shape == (8, 5), \"Should have 8 stores and 5 columns\"\nassert len(first_rows) == 3, \"first_rows should have 3 stores\"\nassert isinstance(summary_stats, pd.DataFrame), \"summary_stats should be a DataFrame\"\nprint(\"First 3 stores:\")\nprint(first_rows)\nprint(f\"\\nDataFrame shape: {data_shape}\")\nprint(\"Great exploration! You understand your data structure!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html#exercise-3.1---filter-strategic-locations",
    "href": "tutorials/nb_03_02_pandas.html#exercise-3.1---filter-strategic-locations",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "Exercise 3.1 - Filter Strategic Locations",
    "text": "Exercise 3.1 - Filter Strategic Locations\nIdentify stores meeting specific CEO criteria.\n\nimport pandas as pd\n\nstores_df = pd.DataFrame({\n    'location': ['Plaza', 'Station', 'Park', 'Beach', 'Airport', 'Mall', 'Downtown', 'University'],\n    'monthly_revenue': [125000, 98000, 87000, 65000, 145000, 110000, 135000, 92000],\n    'growth_rate': [5.2, -2.1, 3.8, -0.5, 8.7, 4.1, 6.3, 2.9],\n    'staff': [25, 20, 18, 15, 32, 23, 28, 19]\n})\n\n# YOUR CODE BELOW\n# 1. Select only location and monthly_revenue columns\nrevenue_report =\n\n# 2. Filter stores with revenue &gt; 100000\nhigh_revenue_stores =\n\n# 3. Filter stores with positive growth\ngrowing_stores =\n\n\n\nCode\n# Test your filtering\nassert len(high_revenue_stores) == 4, \"Should find 4 high revenue stores\"\nassert all(high_revenue_stores['monthly_revenue'] &gt; 100000), \"All selected stores should have revenue &gt; 100000\"\nassert len(growing_stores) == 6, \"Should find 6 stores with positive growth\"\nassert all(growing_stores['growth_rate'] &gt; 0), \"All selected stores should have positive growth\"\nprint(f\"High revenue stores: {list(high_revenue_stores['location'])}\")\nprint(f\"Growing stores: {list(growing_stores['location'])}\")\nprint(\"Excellent! You've identified your star performers!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html#exercise-4.1---ceo-performance-dashboard",
    "href": "tutorials/nb_03_02_pandas.html#exercise-4.1---ceo-performance-dashboard",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "Exercise 4.1 - CEO Performance Dashboard",
    "text": "Exercise 4.1 - CEO Performance Dashboard\nCreate a comprehensive performance analysis with calculated metrics.\n\nimport pandas as pd\n\n# Store operational data\noperations_df = pd.DataFrame({\n    'store': ['Plaza', 'Airport', 'Beach', 'Mall', 'Downtown'],\n    'revenue': [125000, 145000, 65000, 110000, 135000],\n    'costs': [87500, 94250, 48750, 77000, 87750],\n    'customers': [4500, 5200, 2800, 4100, 4800],\n    'staff': [25, 32, 15, 23, 28]\n})\n\n# YOUR CODE BELOW\n# 1. Calculate profit for each store\noperations_df['profit'] =\n\n# 2. Calculate profit margin percentage\noperations_df['profit_margin'] =\n\n# 3. Calculate revenue per customer\noperations_df['revenue_per_customer'] =\n\n# 4. Calculate customers per staff (efficiency)\noperations_df['efficiency'] =\n\n# 5. Sort by profit (highest to lowest)\ntop_performers =\n\n\n\nCode\n# Test your dashboard\nassert operations_df['profit'].sum() == 184750, \"Total profit should be 184,750\"\nassert operations_df['profit_margin'].max() == 35.0, \"Highest margin should be 35%\"\nassert top_performers.iloc[0]['store'] == 'Airport', \"Airport should be most profitable\"\nprint(\"CEO Dashboard - Top Performers by Profit:\")\nprint(top_performers[['store', 'profit', 'profit_margin', 'efficiency']])\nprint(\"Great CEO dashboard! You have visibility of performance!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_03_02_pandas.html#exercise-5.1---load-and-analyze-sales-data",
    "href": "tutorials/nb_03_02_pandas.html#exercise-5.1---load-and-analyze-sales-data",
    "title": "Notebook 3.2 - Pandas for CEO Data Management",
    "section": "Exercise 5.1 - Load and Analyze Sales Data",
    "text": "Exercise 5.1 - Load and Analyze Sales Data\nProcess a CSV file containing Bean Counter’s sales data.\n\nimport pandas as pd\nimport io\n\n# Simulated CSV data (in practice, you'd read from a file)\ncsv_content = \"\"\"product,category,price,units_sold,customer_rating\nEspresso,Coffee,2.50,4500,4.7\nLatte,Coffee,4.50,3200,4.8\nCappuccino,Coffee,4.00,2800,4.6\nCroissant,Food,3.50,1200,4.5\nMuffin,Food,2.75,1800,4.4\nSandwich,Food,6.50,900,4.7\nMocha,Coffee,5.00,1900,4.5\nAmericano,Coffee,3.00,2100,4.6\"\"\"\n\n# YOUR CODE BELOW\n# 1. Read the CSV data\nsales_df = pd.read_csv(io.StringIO(csv_content))\n\n# 2. Calculate revenue for each product\nsales_df['revenue'] =\n\n# 3. Filter for only Coffee products\ncoffee_df =\n\n# 4. Sort coffee products by units_sold (highest first)\ncoffee_sorted =\n\n# 5. Calculate total coffee revenue\ntotal_coffee_revenue =\n\n\n\nCode\n# Test your data loading and analysis\nassert len(coffee_df) == 5, \"Should have 5 coffee products\"\nassert coffee_sorted.iloc[0]['product'] == 'Espresso', \"Espresso should be top seller\"\nassert total_coffee_revenue == 52650.0, f\"Coffee revenue should be 52,650\"\nprint(\"Top Coffee Products by Volume:\")\nprint(coffee_sorted[['product', 'units_sold', 'revenue']])\nprint(f\"\\nTotal Coffee Revenue: ${total_coffee_revenue:,.2f}\")\nprint(\"Perfect! You can now load and analyze real business data!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-02 Pandas"
    ]
  },
  {
    "objectID": "tutorials/nb_02_04_recap.html",
    "href": "tutorials/nb_02_04_recap.html",
    "title": "Notebook 2.4 - Integration Challenge",
    "section": "",
    "text": "You’ve climbed the ranks:\n\nAssistant Manager → Mastered functions for standardized operations\nRegional Manager → Conquered dictionaries for data management\nOperations Director → Optimized with sorting and selection\n\nNow the CEO wants to see if you can integrate all these skills. This is your chance to make an impression before potentially taking over as CEO of Bean Counter!\nToday’s Challenge: Build an integrated system that uses functions, dictionaries, and sorting together to solve real business problems.\n\n\n\n\n\n\nNoteHow to Use This Tutorial\n\n\n\nThis is a shorter recap session. Each exercise integrates multiple concepts you’ve learned.",
    "crumbs": [
      "02 Advances",
      "NB-02-04 Recap"
    ]
  },
  {
    "objectID": "tutorials/nb_02_04_recap.html#exercise-1.1---performance-calculator",
    "href": "tutorials/nb_02_04_recap.html#exercise-1.1---performance-calculator",
    "title": "Notebook 2.4 - Integration Challenge",
    "section": "Exercise 1.1 - Performance Calculator",
    "text": "Exercise 1.1 - Performance Calculator\nCreate a function evaluate_store that:\n\nTakes a store dictionary as input (see above)\nCalculates if the store is meeting targets\nReturns a tuple: (is_successful, performance_message)\n\nSuccess criteria:\n\nDaily sales &gt; 4000 AND\nCustomer rating &gt;= 4.5 AND\nStaff efficiency &gt; 50 customers/staff\n\n\n\n\n\n\n\nThe returned is_successful is just a boolean (True or False), while the performance message should be a string with feedback for the store.\n\n\n\n\n# YOUR CODE BELOW\ndef evaluate_store(store):\n    \"\"\"Evaluate if a store meets Bean Counter standards\"\"\"\n    # Check all three criteria\n\n    # Return (success_boolean, message)\n\n\n\nCode\n# Test your evaluation function\nstore1 = {\"name\": \"Plaza\", \"daily_sales\": 5000, \"rating\": 4.8, \"customers_per_staff\": 75}\nsuccess1, msg1 = evaluate_store(store1)\nassert success1 == True, \"Plaza should be successful\"\n\nstore2 = {\"name\": \"Beach\", \"daily_sales\": 3500, \"rating\": 4.6, \"customers_per_staff\": 60}\nsuccess2, msg2 = evaluate_store(store2)\nassert success2 == False, \"Beach should not be successful (low sales)\"\n\nprint(\"Great! Your evaluation function works perfectly!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-04 Recap"
    ]
  },
  {
    "objectID": "tutorials/nb_02_04_recap.html#exercise-2.1---complete-store-ranking-system",
    "href": "tutorials/nb_02_04_recap.html#exercise-2.1---complete-store-ranking-system",
    "title": "Notebook 2.4 - Integration Challenge",
    "section": "Exercise 2.1 - Complete Store Ranking System",
    "text": "Exercise 2.1 - Complete Store Ranking System\nBuild a system that:\n\nCalculates a composite score for each store using a function\nAdds this score to each store dictionary\nRanks stores from best to worst\nReturns the name of the best store\n\nComposite score = (revenue/1000) + (rating * 10) - (complaints * 2)\n\ndef calculate_composite_score(store):\n    \"\"\"Calculate composite score for ranking\"\"\"\n    # YOUR CODE BELOW\n\n    return score\n\ndef find_best_store(stores_list):\n    \"\"\"Find the best store based on composite score\"\"\"\n    # YOUR CODE BELOW\n    # 1. Add composite score to each store\n\n    # 2. Sort by composite score (highest first)\n\n    # 3. Return the name of the best store\n\n    return best_store_name\n\n# Test data\nstores = [\n    {\"name\": \"Plaza\", \"revenue\": 45000, \"rating\": 4.7, \"complaints\": 5},\n    {\"name\": \"Station\", \"revenue\": 38000, \"rating\": 4.9, \"complaints\": 2},\n    {\"name\": \"Airport\", \"revenue\": 52000, \"rating\": 4.4, \"complaints\": 12}\n]\n\nbest = find_best_store(stores)\nprint(f\"The best performing store is: {best}\")\n\n\n\nCode\n# Test your ranking system\nassert best == \"Station\", f\"Best store should be Station, got {best}\"\n\n# Verify scores were calculated correctly\nfor store in stores:\n    if store[\"name\"] == \"Plaza\":\n        assert store[\"composite_score\"] == 82.0, \"Plaza score incorrect\"\n    elif store[\"name\"] == \"Station\":\n        assert store[\"composite_score\"] == 83.0, \"Station score incorrect (should be highest)\"\n    elif store[\"name\"] == \"Airport\":\n        assert store[\"composite_score\"] == 72.0, \"Airport score incorrect\"\n\nprint(\"Excellent! Your integrated ranking system works perfectly!\")\nprint(\"Station wins with the best composite score!\")\nprint(\"You're ready to become the CEO of Bean Counter!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-04 Recap"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html",
    "href": "tutorials/nb_02_02_dictionaries.html",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "",
    "text": "Welcome to your new role as Regional Manager at Bean Counter!\nCongratulations on another promotion!\nYour standardized functions from the Assistant Manager role were so successful that the CEO has promoted you to Regional Manager! You’re now responsible for overseeing 10 Bean Counter locations across the city.\nThe Challenge: Managing 10 locations means tracking large amounts of data:\n\nEach location has different inventory levels\nSales vary by neighborhood\nBarista teams have different sizes\nEquipment needs vary by store size\n\nUsing simple variables or lists isn’t enough anymore. You need a better way to organize all this information!\nYour Task: Understand dictionaries - Python’s way of storing structured data with labels. Think of them as digital filing cabinets where everything has a clear label and is easy to find.\nIn this tutorial, we’ll learn how dictionaries help you manage complex business data across all Bean Counter locations.\n\n\n\n\n\n\nNoteHow to Use This Tutorial\n\n\n\nCells marked with “YOUR CODE BELOW” expect you to write your own code. Test blocks will verify your solutions.",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-1.1---create-a-location-profile",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-1.1---create-a-location-profile",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 1.1 - Create a Location Profile",
    "text": "Exercise 1.1 - Create a Location Profile\nCreate a dictionary called airport_store for the Bean Counter airport location with:\n\nname: “Bean Counter Airport”\nmanager: “James Wilson”\ndaily_sales: 6200.00\nstaff_count: 12\ncoffee_beans_kg: 62.0\n\n\n# YOUR CODE BELOW\nairport_store = {\n    # Add the key-value pairs here\n}\n\n\n\nCode\n# Test your location profile\nassert airport_store[\"name\"] == \"Bean Counter Airport\", \"Store name should be 'Bean Counter Airport'\"\nassert airport_store[\"manager\"] == \"James Wilson\", \"Manager should be 'James Wilson'\"\nassert airport_store[\"daily_sales\"] == 6200.00, \"Daily sales should be 6200.00\"\nassert airport_store[\"staff_count\"] == 12, \"Staff count should be 12\"\nassert airport_store[\"coffee_beans_kg\"] == 62.0, \"Coffee beans should be 62.0 kg\"\nprint(\"Perfect! You've created your first location profile!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-1.2---update-inventory",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-1.2---update-inventory",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 1.2 - Update Inventory",
    "text": "Exercise 1.2 - Update Inventory\nThe airport store just received a delivery! Update the dictionary:\n\nAdd 25 kg to the current coffee_beans_kg\nUpdate the manager to “Maria Garcia” (James got promoted!)\nAdd a new key “last_inspection” with value “2024-01-15”\n\n\n\n\n\n\n\nTipUpdating Dictionaries\n\n\n\n\nUpdate existing values: dict['key'] = new_value\nAdd new keys: dict['new_key'] = value\nModify values using math: dict['number'] = dict['number'] + 10\n\n\n\n\n# Assuming airport_store exists from previous exercise\nairport_store = {\n    \"name\": \"Bean Counter Airport\",\n    \"manager\": \"James Wilson\",\n    \"daily_sales\": 6200.00,\n    \"staff_count\": 12,\n    \"coffee_beans_kg\": 62.0\n}\n\n# YOUR CODE BELOW\n# Update coffee beans (add 25 kg)\n\n# Update manager\n\n# Add last_inspection\n\n\n\nCode\n# Test your updates\nassert airport_store[\"coffee_beans_kg\"] == 87.0, \"Coffee beans should now be 87.0 kg\"\nassert airport_store[\"manager\"] == \"Maria Garcia\", \"Manager should be Maria Garcia\"\nassert airport_store[\"last_inspection\"] == \"2024-01-15\", \"Should have last_inspection date\"\nprint(\"Excellent inventory management! The airport store is fully updated!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-2.1---build-your-regional-network",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-2.1---build-your-regional-network",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 2.1 - Build Your Regional Network",
    "text": "Exercise 2.1 - Build Your Regional Network\nCreate a list called regional_stores containing 2 Bean Counter locations. Each store dictionary should have:\n\nlocation_name (string)\nmonthly_revenue (number)\nmanager_name (string)\nflagship (boolean - True for one store, False for others)\n\n\n# YOUR CODE BELOW\nregional_stores = [\n    # Add 2 store dictionaries here\n]\n\n\n\nCode\n# Test your regional network\nassert len(regional_stores) == 2, \"Should have exactly 2 stores\"\nassert all(\"location_name\" in store for store in regional_stores), \"Each store needs location_name\"\nassert all(\"monthly_revenue\" in store for store in regional_stores), \"Each store needs monthly_revenue\"\nassert all(\"manager_name\" in store for store in regional_stores), \"Each store needs manager_name\"\nassert all(\"flagship\" in store for store in regional_stores), \"Each store needs flagship status\"\nassert sum(store[\"flagship\"] for store in regional_stores) &gt;= 1, \"At least one store should be flagship\"\nprint(\"Great work! Your regional network is established!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-3.1---regional-performance-analysis",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-3.1---regional-performance-analysis",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 3.1 - Regional Performance Analysis",
    "text": "Exercise 3.1 - Regional Performance Analysis\nWrite code to analyze the performance_data list:\n\nCalculate the total customers served across all stores\nFind the average customer satisfaction score\nCount how many stores served over 500 customers\n\n\nperformance_data = [\n    {\"store\": \"Downtown\", \"customers\": 450, \"satisfaction\": 4.7},\n    {\"store\": \"Airport\", \"customers\": 680, \"satisfaction\": 4.4},\n    {\"store\": \"University\", \"customers\": 520, \"satisfaction\": 4.8},\n    {\"store\": \"Mall\", \"customers\": 380, \"satisfaction\": 4.6},\n    {\"store\": \"Station\", \"customers\": 590, \"satisfaction\": 4.5}\n]\n\ntotal_customers = 0\ntotal_satisfaction = 0\nbusy_stores = 0  # Stores with &gt;500 customers\n# YOUR CODE BELOW\nfor store in performance_data:\n    # Add to total customers\n\n    # Add to satisfaction sum\n\n    # Check if this is a busy store\n\n\n# Print your results\n#\n\n\n\nCode\n# Test your analysis\nassert total_customers == 2620, f\"Total customers should be 2620, got {total_customers}\"\nassert round(average_satisfaction, 2) == 4.60, f\"Average satisfaction should be 4.60, got {round(average_satisfaction, 2)}\"\nassert busy_stores == 3, f\"Should have 3 busy stores, got {busy_stores}\"\nprint(f\"Total customers: {total_customers}\")\nprint(f\"Average satisfaction: {average_satisfaction}\")\nprint(f\"Stores serving &gt;500 customers: {busy_stores}\")\nprint(\"Excellent analysis! You have a clear picture of regional performance!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-4.1---identify-priority-stores",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-4.1---identify-priority-stores",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 4.1 - Identify Priority Stores",
    "text": "Exercise 4.1 - Identify Priority Stores\nFind stores that need immediate attention. Create two lists:\n\nrestock_needed: Store names with inventory below 20 kg\nlow_performers: Store names with daily revenue below 1000\n\n\ninventory_data = [\n    {\"name\": \"Plaza\", \"coffee_kg\": 45, \"milk_liters\": 30, \"daily_revenue\": 1850},\n    {\"name\": \"Station\", \"coffee_kg\": 12, \"milk_liters\": 8, \"daily_revenue\": 920},\n    {\"name\": \"Park\", \"coffee_kg\": 18, \"milk_liters\": 15, \"daily_revenue\": 1100},\n    {\"name\": \"Beach\", \"coffee_kg\": 7, \"milk_liters\": 22, \"daily_revenue\": 780},\n    {\"name\": \"Downtown\", \"coffee_kg\": 35, \"milk_liters\": 18, \"daily_revenue\": 2200}\n]\n\n# YOUR CODE BELOW\nrestock_needed = []\nlow_performers = []\n\nfor store in inventory_data:\n    # Check if coffee inventory is low (below 20 kg)\n\n    # Check if daily revenue is low (below 1000)\n\n\n\nCode\n# Test your filtering\nassert set(restock_needed) == {\"Station\", \"Park\", \"Beach\"}, f\"Restock list should be Station, Park, Beach\"\nassert set(low_performers) == {\"Station\", \"Beach\"}, f\"Low performers should be Station and Beach\"\nprint(f\"Stores needing restock: {restock_needed}\")\nprint(f\"Low performing stores: {low_performers}\")\nprint(\"Perfect! You've identified the stores that need immediate attention!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_02_02_dictionaries.html#exercise-5.1---store-performance-report-generator",
    "href": "tutorials/nb_02_02_dictionaries.html#exercise-5.1---store-performance-report-generator",
    "title": "Notebook 2.2 - Dictionaries at Bean Counter",
    "section": "Exercise 5.1 - Store Performance Report Generator",
    "text": "Exercise 5.1 - Store Performance Report Generator\nCreate a function generate_store_report that takes a store dictionary and returns a performance summary string.\nThe function should:\n\nCalculate profit: revenue - costs\nCalculate profit margin: (profit / revenue) * 100\nDetermine status: “Excellent” if margin &gt; 30%, “Good” if &gt; 20%, else “Needs Improvement”\nReturn a formatted string with the store name, margin, and status\n\n\n# YOUR CODE BELOW\ndef generate_store_report(store):\n    # Calculate profit margin\n\n    # Determine performance status\n\n    # Return formatted report string\n\n\n\nCode\n# Test your report generator\ntest_store1 = {\"name\": \"Plaza\", \"revenue\": 50000, \"costs\": 30000}\nreport1 = generate_store_report(test_store1)\nassert \"40.0%\" in report1, \"Plaza should have 40.0% margin\"\nassert \"Excellent\" in report1, \"Plaza should be Excellent\"\n\ntest_store2 = {\"name\": \"Station\", \"revenue\": 40000, \"costs\": 34000}\nreport2 = generate_store_report(test_store2)\nassert \"15.0%\" in report2, \"Station should have 15.0% margin\"\nassert \"Needs Improvement\" in report2, \"Station needs improvement\"\n\nprint(\"Fantastic! Your reporting system gives clear insights into store performance!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-02 Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html",
    "href": "tutorials/nb_01_03_conditionals_while.html",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "",
    "text": "Welcome to your third interactive Python tutorial!\nThe Smart Inventory System Problem\nBean Counter coffee shop is growing! They need a smarter inventory management system that can:\n\nAlert when supplies are running low\nAutomatically reorder items when needed\nTrack which products are selling fastest\nSimulate inventory usage over time\n\nThese tasks require your program to make decisions and repeat processes until certain conditions are met. That’s where conditionals and while loops come in - they’re the brains behind smart automated systems!\nIn this tutorial, we’ll learn how to make decisions with if/elif/else statements and create loops that run until specific conditions are met.\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-1.1---coffee-bean-quality-check",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-1.1---coffee-bean-quality-check",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 1.1 - Coffee Bean Quality Check",
    "text": "Exercise 1.1 - Coffee Bean Quality Check\nCheck if coffee beans meet quality standards. Beans pass if:\n\nThe moisture level is between 10 and 12 (inclusive)\nAND the defect count is less than 5\n\nCreate a variable passes_quality that is True if both conditions are met.\n\nmoisture_level = 11\ndefect_count = 3\n\n# Check if moisture_level is between 10 and 12 (inclusive) AND defect_count &lt; 5\n# Store the result in passes_quality\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert passes_quality == True, \"Beans with moisture=11 and defects=3 should pass\"\nprint(\"Excellent! Your quality check system works correctly!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-1.2---special-offer-eligibility",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-1.2---special-offer-eligibility",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 1.2 - Special Offer Eligibility",
    "text": "Exercise 1.2 - Special Offer Eligibility\nCustomers get a special offer if they meet ANY of these conditions:\n\nThey’re a member (is_member = True)\nOR they’ve spent more than $100\nOR it’s their birthday (is_birthday = True)\n\nDetermine if the customer is eligible by storing the result in a variable called eligible_for_offer.\n\n# YOUR CODE BELOW\nis_member = False\ntotal_spent = 120\nis_birthday = False\n\n# Check if customer is eligible for special offer using 'or'\n# Store result in eligible_for_offer\n\n\n\nCode\n# Test your answer\nassert eligible_for_offer == True, \"Customer spending $120 should be eligible\"\nprint(\"Perfect! Your special offer system works with OR logic!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---simple-stock-alert",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.1---simple-stock-alert",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.1 - Simple Stock Alert",
    "text": "Exercise 2.1 - Simple Stock Alert\nCreate a stock alert system. You need to:\n\nCheck if milk_liters is less than 10\nIf it is, print “Order more milk!” and set order to True\nOtherwise, print “Milk stock OK”\n\n\n# YOUR CODE BELOW\nmilk_liters = 7\norder = False\n\n\n\nCode\n# Test your answer\nassert order == True, \"'order' should be `True` when milk_liters is 7\"\nprint(\"Great! Your stock alert system works!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---multi-level-pricing",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-2.2---multi-level-pricing",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 2.2 - Multi-Level Pricing",
    "text": "Exercise 2.2 - Multi-Level Pricing\nCreate a pricing system with multiple tiers. The rules are:\n\nOrders less than 10 items: $5 per item\nOrders 10-49 items: $4.50 per item\nOrders 50 or more items: $4 per item\n\nCalculate and print the price_per_item and total_cost for the given quantity.\n\n# YOUR CODE BELOW\nquantity = 25\n\n# Use if/elif/else to determine price_per_item\n# Then calculate total_cost = quantity * price_per_item\n# Print both values\n\n\n\nCode\n# Test your answer\nassert price_per_item == 4.50, \"price_per_item should be 4.50 for quantity 25\"\nassert total_cost == 112.50, \"total_cost should be 112.50 (25 * 4.50)\"\nprint(f\"Perfect! Price per item: ${price_per_item}, Total: ${total_cost}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#introducing-enumerate",
    "href": "tutorials/nb_01_03_conditionals_while.html#introducing-enumerate",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Introducing enumerate()",
    "text": "Introducing enumerate()\nPreviously, you learned to use range(len(list)) to get indices. Python has a more elegant way: enumerate(), which gives you both the index AND the value at the same time!\n\n# The old way - using range() for indexed access\nproducts = [\"Coffee\", \"Milk\", \"Sugar\"]\nprices = [4.50, 2.75, 1.25]\n\nprint(\"Using range() - the way you learned before:\")\nfor i in range(len(products)):\n    print(f\"  Item {i}: {products[i]} costs ${prices[i]}\")\n\nUsing range() - the way you learned before:\n  Item 0: Coffee costs $4.5\n  Item 1: Milk costs $2.75\n  Item 2: Sugar costs $1.25\n\n\n\n# The new way - using enumerate() to get both index and value\nproducts = [\"Coffee\", \"Milk\", \"Sugar\"]\nprices = [4.50, 2.75, 1.25]\n\nprint(\"\\nUsing enumerate() - a cleaner approach:\")\nfor i, product in enumerate(products):\n    print(f\"  Item {i}: {product} costs ${prices[i]}\")\n\n\nUsing enumerate() - a cleaner approach:\n  Item 0: Coffee costs $4.5\n  Item 1: Milk costs $2.75\n  Item 2: Sugar costs $1.25\n\n\n\n\n\n\n\n\nTipWhen to Use enumerate():\n\n\n\nUse enumerate() when you need both the index and the value:\nfor i, item in enumerate(my_list):\n    # i is the index (0, 1, 2, ...)\n    # item is the value at that position\nThis is cleaner than for i in range(len(my_list)) and accessing my_list[i]!",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#filtering-data-with-conditionals-in-loops",
    "href": "tutorials/nb_01_03_conditionals_while.html#filtering-data-with-conditionals-in-loops",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Filtering Data with Conditionals in Loops",
    "text": "Filtering Data with Conditionals in Loops\nNow let’s combine everything - loops, enumerate(), and conditionals - to filter and process data intelligently.\n\n# Process a list with conditions\ndaily_sales = [1250, 1890, 950, 2100, 1650]\ntarget = 1500\n\nprint(\"Sales Analysis:\")\nfor i, sale in enumerate(daily_sales):\n    if sale &gt;= target:\n        print(f\"  Day {i+1}: ${sale} Met target!\")\n    else:\n        shortfall = target - sale\n        print(f\"  Day {i+1}: ${sale} Missed by ${shortfall}\")\n\nSales Analysis:\n  Day 1: $1250 Missed by $250\n  Day 2: $1890 Met target!\n  Day 3: $950 Missed by $550\n  Day 4: $2100 Met target!\n  Day 5: $1650 Met target!\n\n\n\n\n\n\n\n\nInstead of just using range, we can use enumerate as we have seen in the example before to get both index and value in a loop at once. The enumerate function returns the index (here i) and value (here sale) of each element in the list.\n\n\n\n\n\n\n\n\n\nWarningCommon Pattern:\n\n\n\nWhen filtering lists, create an empty list first, then append items that meet your conditions:\nfiltered = []\nfor item in original_list:\n    if condition:\n        filtered.append(item)",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-3.1---filter-high-value-orders",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-3.1---filter-high-value-orders",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 3.1 - Filter High-Value Orders",
    "text": "Exercise 3.1 - Filter High-Value Orders\nCreate a list containing only orders above $50. Also count how many high-value orders there are.\n\nall_orders = [35.50, 67.25, 45.00, 89.99, 52.10, 23.75, 91.50, 48.00]\n\n# Create empty list for high_value_orders\nhigh_value_orders = []\ncount = 0\n\n# YOUR CODE BELOW\n\n# Loop through all_orders\n# If order &gt; 50, append to high_value_orders and increment count\n\n\n\nCode\n# Test your answer\nassert high_value_orders == [67.25, 89.99, 52.10, 91.50], \"high_value_orders should contain [67.25, 89.99, 52.10, 91.50]\"\nassert count == 4, \"count should be 4\"\nprint(f\"Great! Found {count} high-value orders: {high_value_orders}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-3.2---categorize-products",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-3.2---categorize-products",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 3.2 - Categorize Products",
    "text": "Exercise 3.2 - Categorize Products\nCategorize products by stock level and create separate lists for each category:\n\nCritical: stock &lt; 10\nLow: stock &gt;= 10 and stock &lt; 25\nGood: stock &gt;= 25\n\n\nproducts = [\"Coffee\", \"Milk\", \"Sugar\", \"Cups\", \"Lids\", \"Stirrers\"]\nstock_levels = [5, 18, 35, 8, 42, 15]\n\ncritical = []\nlow = []\ngood = []\n\n# YOUR CODE BELOW\n#\n# Loop through products using range(len(products))\n# Check stock_levels[i] and append products[i] to appropriate list\n\n\n\nCode\n# Test your answer\nassert critical == [\"Coffee\", \"Cups\"], \"critical should be ['Coffee', 'Cups']\"\nassert low == [\"Milk\", \"Stirrers\"], \"low should be ['Milk', 'Stirrers']\"\nassert good == [\"Sugar\", \"Lids\"], \"good should be ['Sugar', 'Lids']\"\nprint(\"Perfect! Product categorization complete!\")\nprint(f\"Critical: {critical}\")\nprint(f\"Low: {low}\")\nprint(f\"Good: {good}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-4.1---customer-queue-simulation",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-4.1---customer-queue-simulation",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 4.1 - Customer Queue Simulation",
    "text": "Exercise 4.1 - Customer Queue Simulation\nSimulate serving customers in a queue. Each minute you can serve 2 customers, and 3 new customers arrive. The loop should continue running while the queue size is 20 or less.\nTrack:\n\nHow many minutes it takes (until queue exceeds 20)\nThe final queue size\n\n\n\n\n\n\n\nYour while loop condition should be while queue_size &lt;= 20: - this means the loop continues as long as the queue hasn’t exceeded 20 yet.\n\n\n\n\nqueue_size = 5  # Starting queue\nminutes = 0\nserve_rate = 2  # Customers served per minute\narrival_rate = 3  # New customers per minute\n\n# YOUR CODE BELOW\n\n# Use a while loop that continues while queue_size &lt;= 20\n# Each iteration:\n#   1. Update queue_size: add arrivals, subtract served\n#   2. Increment minutes by 1\n\n\n\nCode\n# Test your answer\nassert minutes == 16, \"Should take 16 minutes to exceed 20 customers\"\nassert queue_size == 21, \"Final queue size should be 21\"\nprint(f\"Excellent! After {minutes} minutes, queue size is {queue_size}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#complex-conditions-with-or-logic",
    "href": "tutorials/nb_01_03_conditionals_while.html#complex-conditions-with-or-logic",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Complex Conditions with OR Logic",
    "text": "Complex Conditions with OR Logic\nSometimes you need to combine multiple conditions with OR logic. When mixing AND and OR, use parentheses to make your logic clear:\n\n# Example: Find items that meet EITHER of two criteria\nitems = [\"Coffee\", \"Tea\", \"Pastry\", \"Juice\", \"Sandwich\"]\nprices = [5.00, 2.50, 4.00, 3.50, 7.00]\nis_hot = [True, True, True, False, True]\n\n# Promotion: Hot items over $4 OR cold items over $3\npromotion_items = []\n\nfor i in range(len(items)):\n    # Use parentheses to group each condition\n    hot_and_expensive = (is_hot[i] == True and prices[i] &gt;= 4)\n    cold_and_pricy = (is_hot[i] == False and prices[i] &gt;= 3)\n\n    if hot_and_expensive or cold_and_pricy:\n        promotion_items.append(items[i])\n        print(f\"  {items[i]}: ${prices[i]} - Eligible!\")\n\nprint(f\"\\nPromotion items: {promotion_items}\")\n\n  Coffee: $5.0 - Eligible!\n  Pastry: $4.0 - Eligible!\n  Juice: $3.5 - Eligible!\n  Sandwich: $7.0 - Eligible!\n\nPromotion items: ['Coffee', 'Pastry', 'Juice', 'Sandwich']\n\n\nYou can also write this more compactly in a single condition:\n\n# Same logic, written in one line\npromotion_items_compact = []\n\nfor i in range(len(items)):\n    if (is_hot[i] and prices[i] &gt;= 4) or (not is_hot[i] and prices[i] &gt;= 3):\n        promotion_items_compact.append(items[i])\n\nprint(f\"Promotion items (compact): {promotion_items_compact}\")\n\nPromotion items (compact): ['Coffee', 'Pastry', 'Juice', 'Sandwich']\n\n\n\n\n\n\n\n\nImportantComplex Boolean Logic:\n\n\n\nWhen combining AND and OR: - Use parentheses to group related conditions - Break complex conditions into smaller parts if needed - Test each part separately first, then combine",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_03_conditionals_while.html#exercise-5.1---smart-promotion-filter",
    "href": "tutorials/nb_01_03_conditionals_while.html#exercise-5.1---smart-promotion-filter",
    "title": "Notebook 1.3 - Conditionals & While Loops",
    "section": "Exercise 5.1 - Smart Promotion Filter",
    "text": "Exercise 5.1 - Smart Promotion Filter\nFind products eligible for promotion. Products qualify if they are:\n\nDrinks priced $4 or more, OR\nFood items priced $3 or more\n\nAlso calculate the total discount if we offer 15% off eligible items.\n\n# YOUR CODE BELOW\nproducts = [\"Coffee\", \"Tea\", \"Muffin\", \"Sandwich\", \"Smoothie\", \"Cookie\"]\nprices = [4.50, 2.75, 3.50, 7.95, 5.25, 2.00]\ncategories = [\"drink\", \"drink\", \"food\", \"food\", \"drink\", \"food\"]\n\neligible_products = []\ntotal_discount = 0\n\n# Loop through all products\n# Check if eligible based on category and price\n# If eligible: add to list and add (price * 0.15) to total_discount\n\n\n\nCode\n# Test your answer\nassert eligible_products == [\"Coffee\", \"Muffin\", \"Sandwich\", \"Smoothie\"], \"Should include Coffee, Muffin, Sandwich, Smoothie\"\nassert abs(total_discount - 3.15) &lt; 0.1, \"Total discount should be approximately 3.15\"\nprint(f\"Excellent! Eligible products: {eligible_products}\")\nprint(f\"Total discount offered: ${total_discount:.2f}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-03 Conditions"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html",
    "href": "tutorials/nb_01_01_variables_data_types.html",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "",
    "text": "Welcome to your first interactive Python tutorial!\nThe Coffee Shop Calculator Problem\nImagine you just started working at a busy coffee shop called “Bean Counter.” On your first day, the manager asks you to help with various calculations: pricing drinks, applying discounts, calculating tips, and formatting receipts. The old calculator is broken, and they need a better system anyway. Lucky for them, you know Python!\nIn this tutorial, we’ll learn about variables and basic data types to build your own coffee shop calculator system. By the end, you’ll be able to handle any calculation the shop throws at you!\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-1.1---your-first-variables",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-1.1---your-first-variables",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 1.1 - Your First Variables",
    "text": "Exercise 1.1 - Your First Variables\nCreate three variables for a new order:\n\nlatte_price should be 5.25\ncustomer should be “Maria”\nquantity should be 2\nshop_closed = False\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert latte_price == 5.25, \"The latte_price should be 5.25\"\nassert customer == \"Maria\", \"The customer should be 'Maria'\"\nassert quantity == 2, \"The quantity should be 2\"\nassert shop_closed == False, \"The shop should be open\"\nprint(\"Perfect! You've created your first variables for the coffee shop!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-1.2---updating-variables",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-1.2---updating-variables",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 1.2 - Updating Variables",
    "text": "Exercise 1.2 - Updating Variables\nVariables can change! A customer changed their mind and wants 4 lattes instead of 2. Update the quantity variable to 4 and create a new variable total_order that stores the total price (latte_price multiplied by quantity).\n\n# YOUR CODE BELOW\n# Assume latte_price = 5.25 and quantity = 2 from previous exercise\n# Tip: Just overwrite these old values\n# Then calculate: total_order = latte_price * quantity\n\n\n\nCode\n# Test your answer\nassert quantity == 4, \"The quantity should be updated to 4\"\nassert total_order == 21.0, \"The total_order should be 21.0 (5.25 * 4)\"\nprint(\"Excellent! You can update variables and create new ones from existing values!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-2.1---identifying-data-types",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-2.1---identifying-data-types",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 2.1 - Identifying Data Types",
    "text": "Exercise 2.1 - Identifying Data Types\nCreate variables of each type for our coffee shop:\n\ndaily_customers (int): 85 customers visited today\naverage_tip (float): 2.50 dollars average tip\nbest_seller (str): “Caramel Macchiato”\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert daily_customers == 85 and type(daily_customers) == int, \"daily_customers should be the integer 85\"\nassert average_tip == 2.50 and type(average_tip) == float, \"average_tip should be the float 2.50\"\nassert best_seller == \"Caramel Macchiato\" and type(best_seller) == str, \"best_seller should be the string 'Caramel Macchiato'\"\nprint(\"Great job! You understand the different data types!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-2.2---type-conversion",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-2.2---type-conversion",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 2.2 - Type Conversion",
    "text": "Exercise 2.2 - Type Conversion\nSometimes we need to convert between types. A customer’s loyalty card bonus points were entered as text “1234” but we need it as a number to do calculations.\nConvert the string card_points = \"1234\" to an integer and create a new variable new_points that adds 100 bonus points to it.\n\n\n\n\n\n\nYou can use the int() function to convert a string to an integer or use the float() function to convert a string to a float.\n\n\n\n\n# YOUR CODE BELOW\ncard_points = \"1234\"\n\n\n\nCode\n# Test your answer\nassert card_points == 1234, \"card_points should be 1234 as an integer\"\nassert new_points == 1334, \"new_points should be 1334 (1234 + 100)\"\nprint(\"Perfect! You can convert between data types!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-3.1---calculate-the-bill",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-3.1---calculate-the-bill",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 3.1 - Calculate the Bill",
    "text": "Exercise 3.1 - Calculate the Bill\nA group orders:\n\n3 cappuccinos at $4.75 each\n2 muffins at $3.50 each\n1 sandwich at $8.95\n\nCalculate the subtotal, then add 19% tax to get the total_with_tax.\n\n\n\n\n\n\nTo add 19% tax to a value, you can multiply by 1.19.\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nimport math\nassert math.isclose(subtotal, 30.20, rel_tol=0.01), \"Subtotal should be 30.20\"\nassert math.isclose(total_with_tax, 30.20*1.19, rel_tol=0.01), \"Total with tax should be 35.94\"\nprint(\"Excellent calculation! You've mastered basic arithmetic!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-3.2---splitting-the-bill",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-3.2---splitting-the-bill",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 3.2 - Splitting the Bill",
    "text": "Exercise 3.2 - Splitting the Bill\nThe group wants to split the bill evenly among 4 people. Calculate:\n\nHow much each person pays (per_person)\nIf they pay with exact change, how many dollars (dollars) and cents (cents) each person needs. Provide each as variable.\n\n\n\n\n\n\n\nYou could use // for floor division and % for remainder, but you don’t need to do that as other solutions are possible. If you want to round the cents, you can use the round() function.\n\n\n\n\n# YOUR CODE BELOW\n# Assume total_with_tax = 32.616 from previous exercise\n\n\n\nCode\n# Test your answer\nassert math.isclose(per_person, 8.154, rel_tol=0.01), \"Each person should pay 8.154\"\nassert dollars == 8, \"Each person needs 8 dollars\"\nassert cents == 15, \"Each person needs 15 cents (rounded)\"\nprint(\"Great work! You can split bills and handle money calculations!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "tutorials/nb_01_01_variables_data_types.html#exercise-4.1---create-a-simple-receipt",
    "href": "tutorials/nb_01_01_variables_data_types.html#exercise-4.1---create-a-simple-receipt",
    "title": "Notebook 1.1 - Variables & Basic Data Types",
    "section": "Exercise 4.1 - Create a Simple Receipt",
    "text": "Exercise 4.1 - Create a Simple Receipt\nCreate a formatted receipt for a coffee order with these variables:\n\ncoffee_type = \"Americano\"\nsize = \"Large\"\nprice = 3.75\n\nCreate a variable called receipt with the format: “Order: [size] [coffee_type] - $[price with 2 decimal places]”\n\n\n\n\n\n\nUse an f-string with {price:.2f} to format the price with exactly 2 decimal places.\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert receipt == \"Order: Large Americano - $3.75\", \"Receipt should be 'Order: Large Americano - $3.75'\"\nprint(\"Perfect! You've created your first formatted string!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Variables"
    ]
  },
  {
    "objectID": "lectures/lec_03_presentation.html#context-engineering",
    "href": "lectures/lec_03_presentation.html#context-engineering",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Context Engineering",
    "text": "Context Engineering\nWrite clear descriptions of what you want:\n# Create subplot with 2 rows, 1 column\n# Top: line plot of revenue over time\n# Bottom: bar chart of profit by quarter\n\n\n\n\n\n\n\n\nBe specific in your instructions\nReview generated code\nTest the code as it might use old syntax\nIterate for better results\nForce To-Tos so everything is completed"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#watch-out-for",
    "href": "lectures/lec_03_presentation.html#watch-out-for",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Watch Out For",
    "text": "Watch Out For\n\nDeprecated methods: plt.subplot() vs plt.subplots()\nMissing imports: Always verify imports are included\nWrong assumptions: Might guess your data structure incorrectly\nOver-complexity: Very often suggests unnecessary features\n\n\nRemember: Generative AI is stochastic!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#foundation-complete",
    "href": "lectures/lec_03_presentation.html#foundation-complete",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Foundation Complete!",
    "text": "Foundation Complete!\nWhy This Matters?\n\nYou now have a good foundation for data-driven decisions!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#preview-4---monte-carlo",
    "href": "lectures/lec_03_presentation.html#preview-4---monte-carlo",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Preview: 4 - Monte Carlo",
    "text": "Preview: 4 - Monte Carlo\nNext Session: Modeling Business Uncertainty\n\nWe’ll combine everything you’ve learned:\n\nNumPy for random number generation\nVisualization for showing probability distributions\n\n\n\nReal applications:\n\nPredict project completion times\nEstimate financial risks\nMake decisions under uncertainty"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#the-end",
    "href": "lectures/lec_03_presentation.html#the-end",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "The End",
    "text": "The End\nThat’s it for today! Make sure you:\n\nHave completed all the notebooks\nCheck whether you could follow so far\nSet up Copilot\n\n\n\n\n\n\n\n\nEvery line of code you write makes you a better programmer. Every concept you understand makes you a better decision-maker. Keep practicing and keep learning!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_03_presentation.html#interesting-literature-on-algorithms",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nA great inspiration to learn more about Algorithms!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#books-on-programming",
    "href": "lectures/lec_03_presentation.html#books-on-programming",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#more-literature",
    "href": "lectures/lec_03_presentation.html#more-literature",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_03_closing.html",
    "href": "lectures/lec_03_closing.html",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "",
    "text": "Write clear descriptions of what you want:\n# Create subplot with 2 rows, 1 column\n# Top: line plot of revenue over time\n# Bottom: bar chart of profit by quarter\n. . .\n\n\n\n\n\n\n\nBe specific in your instructions\nReview generated code\nTest the code as it might use old syntax\nIterate for better results\nForce To-Tos so everything is completed\n\n\n\n\n\n\n\n\nDeprecated methods: plt.subplot() vs plt.subplots()\nMissing imports: Always verify imports are included\nWrong assumptions: Might guess your data structure incorrectly\nOver-complexity: Very often suggests unnecessary features\n\n. . .\nRemember: Generative AI is stochastic!",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#context-engineering",
    "href": "lectures/lec_03_closing.html#context-engineering",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "",
    "text": "Write clear descriptions of what you want:\n# Create subplot with 2 rows, 1 column\n# Top: line plot of revenue over time\n# Bottom: bar chart of profit by quarter\n. . .\n\n\n\n\n\n\n\nBe specific in your instructions\nReview generated code\nTest the code as it might use old syntax\nIterate for better results\nForce To-Tos so everything is completed",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#watch-out-for",
    "href": "lectures/lec_03_closing.html#watch-out-for",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "",
    "text": "Deprecated methods: plt.subplot() vs plt.subplots()\nMissing imports: Always verify imports are included\nWrong assumptions: Might guess your data structure incorrectly\nOver-complexity: Very often suggests unnecessary features\n\n. . .\nRemember: Generative AI is stochastic!",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#foundation-complete",
    "href": "lectures/lec_03_closing.html#foundation-complete",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Foundation Complete!",
    "text": "Foundation Complete!\nWhy This Matters?\n. . .\nYou now have a good foundation for data-driven decisions!",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#preview-4---monte-carlo",
    "href": "lectures/lec_03_closing.html#preview-4---monte-carlo",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Preview: 4 - Monte Carlo",
    "text": "Preview: 4 - Monte Carlo\nNext Session: Modeling Business Uncertainty\n. . .\nWe’ll combine everything you’ve learned:\n\nNumPy for random number generation\nVisualization for showing probability distributions\n\n. . .\nReal applications:\n\nPredict project completion times\nEstimate financial risks\nMake decisions under uncertainty",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#the-end",
    "href": "lectures/lec_03_closing.html#the-end",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "The End",
    "text": "The End\nThat’s it for today! Make sure you:\n\nHave completed all the notebooks\nCheck whether you could follow so far\nSet up Copilot\n\n. . .\n\n\n\n\n\n\nEvery line of code you write makes you a better programmer. Every concept you understand makes you a better decision-maker. Keep practicing and keep learning!",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_03_closing.html#interesting-literature-on-algorithms",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#books-on-programming",
    "href": "lectures/lec_03_closing.html#books-on-programming",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#more-literature",
    "href": "lectures/lec_03_closing.html#more-literature",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_03_closing.html#footnotes",
    "href": "lectures/lec_03_closing.html#footnotes",
    "title": "Lecture 3 - Recap & Copilot Strategy",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA great inspiration to learn more about Algorithms!↩︎",
    "crumbs": [
      "03 Foundation",
      "03 Closing"
    ]
  },
  {
    "objectID": "lectures/lec_01_presentation.html#about-me",
    "href": "lectures/lec_01_presentation.html#about-me",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section",
    "href": "lectures/lec_01_presentation.html#section",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "What is\nManagement\nScience?\n\n\nPhoto by Patrick Konior on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#management-science",
    "href": "lectures/lec_01_presentation.html#management-science",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Management Science",
    "text": "Management Science\nManagement science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n\nIt is not the science of management!\n\nAn Introduction to Management Science: Quantitative Approaches to Decision Making (15 ed.). Boston: Cengage Learning, Inc. 2019. ISBN 978-1-337-40652-9."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-outline",
    "href": "lectures/lec_01_presentation.html#course-outline",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#from-amazon-to-hospitals",
    "href": "lectures/lec_01_presentation.html#from-amazon-to-hospitals",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "From Amazon to Hospitals",
    "text": "From Amazon to Hospitals\nWhere Algorithms Make Millions\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\nManagement Science is everywhere!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#this-course-approach",
    "href": "lectures/lec_01_presentation.html#this-course-approach",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "This Course Approach",
    "text": "This Course Approach\nThe Consultant Mindset\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-structure",
    "href": "lectures/lec_01_presentation.html#course-structure",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Course Structure",
    "text": "Course Structure\n\n12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\nEach lecture builds on the previous - attendance is important!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#grading",
    "href": "lectures/lec_01_presentation.html#grading",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Grading",
    "text": "Grading\nGrade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#assignments",
    "href": "lectures/lec_01_presentation.html#assignments",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Assignments",
    "text": "Assignments\nAssignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#learning-python",
    "href": "lectures/lec_01_presentation.html#learning-python",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Learning Python",
    "text": "Learning Python\n\nIn my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-to-expect",
    "href": "lectures/lec_01_presentation.html#what-to-expect",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "What to Expect",
    "text": "What to Expect\n\nNo prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#course-goals",
    "href": "lectures/lec_01_presentation.html#course-goals",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Course Goals",
    "text": "Course Goals\nBy the end, you will be able to:\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\nYou’ll leave with a portfolio of ideas to work on real solutions!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#why-python",
    "href": "lectures/lec_01_presentation.html#why-python",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Why Python?",
    "text": "Why Python?\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#help-from-ai",
    "href": "lectures/lec_01_presentation.html#help-from-ai",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n\n\n\n\n\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#my-recommendation",
    "href": "lectures/lec_01_presentation.html#my-recommendation",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\nCompete: Participate in the competitions to learn\n\n\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of recommendations in the literature recommendations."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#dont-give-up",
    "href": "lectures/lec_01_presentation.html#dont-give-up",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Don’t give up!",
    "text": "Don’t give up!\nProgramming is like learning to ride a bike\n\n\nYou’ll fall a few times\nIt feels impossible at first\nThen suddenly… it clicks!\n\n\n\n\n\n\n\n\n\nLectures 1-3 are the hardest. Push through and it gets much easier!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-is-an-ide",
    "href": "lectures/lec_01_presentation.html#what-is-an-ide",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nZed"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#install-vs-code",
    "href": "lectures/lec_01_presentation.html#install-vs-code",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nGreat! First steps are done\n\n\n\n\n\n\n\n\nUnsure on how to work with VS Code and notebooks? Ask me! I’m happy to help you out!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#installation-of-python-with-uv",
    "href": "lectures/lec_01_presentation.html#installation-of-python-with-uv",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Installation of Python with uv",
    "text": "Installation of Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n\n\n\n\n\n\n\nIf the installation does not work, let me know!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#quick-check",
    "href": "lectures/lec_01_presentation.html#quick-check",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Quick Check",
    "text": "Quick Check\n\nHave you installed uv and initialized the project?\nGreat! Before we continue, check the following:\n\nYou have a folder for the course\nYou have initialized uv with uv init inside the folder\nYou can see a file called pyproject.toml in the folder\n\n\n\n\n\n\n\n\n\nSomething not working yet? Ask me!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#using-notebooks",
    "href": "lectures/lec_01_presentation.html#using-notebooks",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Using Notebooks",
    "text": "Using Notebooks\n\nNow we need to add a kernel to our project\nRun uv add --dev ipykernel from your terminal\nNow run uv add jupyter in the terminal\nThis allows us to use uv Python in notebooks\nDone? Perfect. Now we can start!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#working-with-notebooks",
    "href": "lectures/lec_01_presentation.html#working-with-notebooks",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Working with Notebooks",
    "text": "Working with Notebooks\n\nNow you can download the files from the website\nJust click on one of the sessions and open it\nSelect Jupyter on the right side\nDownload and save the files to your course folder\nOpen them and select “Open with Jupyter Notebook”\n\n\n\n\n\n\n\n\nThat was the hardest part today!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section-1",
    "href": "lectures/lec_01_presentation.html#section-1",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Any questions\nso far?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#whats-next",
    "href": "lectures/lec_01_presentation.html#whats-next",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "What’s Next?",
    "text": "What’s Next?\nAfter the break, we’ll dive into:\n\nTutorial 1: Variables and basic data types\nTutorial 2: Lists and loops\nTutorial 3: Conditionals and control flow\n\n\n\n\n\n\n\n\nReady for the tutorials? Make sure your Jupyter notebook is working before we continue!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-end",
    "href": "lectures/lec_01_presentation.html#the-end",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "The End",
    "text": "The End\nThat’s it for our introduction!\nMake sure you have:\n\nVS Code installed and running\nPython environment set up with uv\nJupyter notebooks working\nThe tutorial files downloaded\n\n\n\n\n\n\n\n\nTake a 10-minute break, then we’ll start with the interactive notebooks."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_01_presentation.html#interesting-literature-on-algorithms",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nA great inspiration to learn more about Algorithms!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#books-on-programming",
    "href": "lectures/lec_01_presentation.html#books-on-programming",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#more-literature",
    "href": "lectures/lec_01_presentation.html#more-literature",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_01_introduction.html",
    "href": "lectures/lec_01_introduction.html",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!\n\n\n\n\n\n\n\nWhat is\nManagement\nScience?\n\n\nPhoto by Patrick Konior on Unsplash\n\n\n\n\nManagement science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n. . .\nIt is not the science of management!\n\n\n\n\n\nPart I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n. . .\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!\n\n\n\n\n\n\nWhere Algorithms Make Millions\n\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\n. . .\nManagement Science is everywhere!\n\n\n\nThe Consultant Mindset\n\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n. . .\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?\n\n\n\n\n\n\n\n\n12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\n. . .\nEach lecture builds on the previous - attendance is important!\n\n\n\nGrade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n. . .\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!\n\n\n\n\n\n\nAssignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n. . .\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)\n\n\n\n\n\n\n\nIn my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!\n\n\n\n\n\n\n\n\nNo prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n. . .\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!\n\n\n\n\n\n\nBy the end, you will be able to:\n\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\n. . .\nYou’ll leave with a portfolio of ideas to work on real solutions!\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation\n\n\n\n\n\nYou are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n. . .\n\n\n\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#about-me",
    "href": "lectures/lec_01_introduction.html#about-me",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#section",
    "href": "lectures/lec_01_introduction.html#section",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "What is\nManagement\nScience?\n\n\nPhoto by Patrick Konior on Unsplash",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#management-science",
    "href": "lectures/lec_01_introduction.html#management-science",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Management science is an interdisciplinary field that applies research-based methods, such as modeling, statistics, and algorithms, to solve complex organizational problems and guide strategic decisions, seeking optimal or near‑optimal outcomes across institutions, corporations, and governments.1\n. . .\nIt is not the science of management!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-outline",
    "href": "lectures/lec_01_introduction.html#course-outline",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Part I: Python Foundation (Lectures 1-3)\n\nVariables, loops, functions, data science tools\n\nPart II: Management Science Tools (Lectures 4-9)\n\nMonte Carlo, Scheduling, Routing, Metaheuristics\n\nPart III: Consulting Competition (Lectures 10-12)\n\nClient briefings, development, final presentations\n\n\n\n. . .\n\n\n\n\n\n\nYou’re now consultants learning to solve real business problems!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#from-amazon-to-hospitals",
    "href": "lectures/lec_01_introduction.html#from-amazon-to-hospitals",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Where Algorithms Make Millions\n\n\nAmazon: Routing algorithms save millions in delivery costs\nUber: Real-time matching algorithms connect drivers and riders\nHospitals: Scheduling algorithms optimize shifts and OR usage\nAirlines: Revenue algorithms price tickets dynamically\nManufacturing: Production scheduling reduces waste and delays\n\n\n. . .\nManagement Science is everywhere!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#this-course-approach",
    "href": "lectures/lec_01_introduction.html#this-course-approach",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "The Consultant Mindset\n\n\nYou’ll work on business problems\nLearn to communicate solutions to non-technical clients\nBuild practical tools that solve actual challenges\nCompete in a consulting competition with real scenarios\n\n\n. . .\n\n\n\n\n\n\nThink like a consultant: What value does my solution bring to the business?",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-structure",
    "href": "lectures/lec_01_introduction.html#course-structure",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "12 lectures of intensive learning\n3 hours per lecture (with breaks!)\nInteractive format:\n\nConcepts & Setup\nHands-on Python notebooks\nConsulting Competition\n\nFinal competition: Apply everything you’ve learned\n\n\n. . .\nEach lecture builds on the previous - attendance is important!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#grading",
    "href": "lectures/lec_01_introduction.html#grading",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Grade Composition:\n\nCourse has 100 points, 50 needed to pass\n2 Assignments: 30 points each\nFinal Consulting Project: 40 points\n\n. . .\n\n\n\n\n\n\nWe will have several competitions including our final competition, where you will have the chance to earn bonus points!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#assignments",
    "href": "lectures/lec_01_introduction.html#assignments",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Assignment Strategy:\n\nStart with easy warm-ups in tutorials\nProgress to real-world problems\nAll assignments have clear rubrics\nBonus points for creative solutions!\n\n. . .\n\n\n\n\n\n\nLate submissions: -10% per day (max 3 days)",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#learning-python",
    "href": "lectures/lec_01_introduction.html#learning-python",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "In my experience, the best way to learn is by doing!\nHere, we will focus on decision algorithms\nYou will start to learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nDon’t worry, I will help you out if you have any questions!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-to-expect",
    "href": "lectures/lec_01_introduction.html#what-to-expect",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "No prior programming required - we start from zero!\nBut experience is helpful!\nFast-paced but with lots of support\nPractical focus - less theory, more doing\nMistakes are welcome - they’re how we learn\n\n\n. . .\n\n\n\n\n\n\nThe course gets easier after week 3 - the hardest part is getting started!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#course-goals",
    "href": "lectures/lec_01_introduction.html#course-goals",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "By the end, you will be able to:\n\n\nWrite Python code to solve business problems\nApply algorithms for scheduling, routing, and optimization\nSimulate uncertainty using Monte Carlo methods\nPresent solutions like a management consultant\nBuild tools that create business value\n\n\n. . .\nYou’ll leave with a portfolio of ideas to work on real solutions!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#why-python",
    "href": "lectures/lec_01_introduction.html#why-python",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#help-from-ai",
    "href": "lectures/lec_01_introduction.html#help-from-ai",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "You are allowed to use AI in the course\nI use it as well (e.g., Claude, ChatGPT, Gemini, …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\nI will also teach you how to use it effectively\n\n. . .\n\n\n\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#my-recommendation",
    "href": "lectures/lec_01_introduction.html#my-recommendation",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\nCompete: Participate in the competitions to learn\n\n. . .\n\n\n\n\n\n\nGreat resources to start are books and small challenges. You can find a list of recommendations in the literature recommendations.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#dont-give-up",
    "href": "lectures/lec_01_introduction.html#dont-give-up",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Don’t give up!",
    "text": "Don’t give up!\nProgramming is like learning to ride a bike\n. . .\n\nYou’ll fall a few times\nIt feels impossible at first\nThen suddenly… it clicks!\n\n. . .\n\n\n\n\n\n\nLectures 1-3 are the hardest. Push through and it gets much easier!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#what-is-an-ide",
    "href": "lectures/lec_01_introduction.html#what-is-an-ide",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nOther IDEs include for example:\n\nPyCharm from JetBrains\nZed",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#install-vs-code",
    "href": "lectures/lec_01_introduction.html#install-vs-code",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nGreat! First steps are done\n\n. . .\n\n\n\n\n\n\nUnsure on how to work with VS Code and notebooks? Ask me! I’m happy to help you out!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#installation-of-python-with-uv",
    "href": "lectures/lec_01_introduction.html#installation-of-python-with-uv",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Installation of Python with uv",
    "text": "Installation of Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n. . .\n\n\n\n\n\n\nIf the installation does not work, let me know!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#quick-check",
    "href": "lectures/lec_01_introduction.html#quick-check",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Quick Check",
    "text": "Quick Check\n\nHave you installed uv and initialized the project?\nGreat! Before we continue, check the following:\n\nYou have a folder for the course\nYou have initialized uv with uv init inside the folder\nYou can see a file called pyproject.toml in the folder\n\n\n. . .\n\n\n\n\n\n\nSomething not working yet? Ask me!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#using-notebooks",
    "href": "lectures/lec_01_introduction.html#using-notebooks",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Using Notebooks",
    "text": "Using Notebooks\n\n\nNow we need to add a kernel to our project\nRun uv add --dev ipykernel from your terminal\nNow run uv add jupyter in the terminal\nThis allows us to use uv Python in notebooks\nDone? Perfect. Now we can start!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#working-with-notebooks",
    "href": "lectures/lec_01_introduction.html#working-with-notebooks",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Working with Notebooks",
    "text": "Working with Notebooks\n\nNow you can download the files from the website\nJust click on one of the sessions and open it\nSelect Jupyter on the right side\nDownload and save the files to your course folder\nOpen them and select “Open with Jupyter Notebook”\n\n. . .\n\n\n\n\n\n\nThat was the hardest part today!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#section-1",
    "href": "lectures/lec_01_introduction.html#section-1",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "",
    "text": "Any questions\nso far?",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#whats-next",
    "href": "lectures/lec_01_introduction.html#whats-next",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "What’s Next?",
    "text": "What’s Next?\nAfter the break, we’ll dive into:\n\nTutorial 1: Variables and basic data types\nTutorial 2: Lists and loops\nTutorial 3: Conditionals and control flow\n\n. . .\n\n\n\n\n\n\nReady for the tutorials? Make sure your Jupyter notebook is working before we continue!",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#the-end",
    "href": "lectures/lec_01_introduction.html#the-end",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "The End",
    "text": "The End\nThat’s it for our introduction!\nMake sure you have:\n\nVS Code installed and running\nPython environment set up with uv\nJupyter notebooks working\nThe tutorial files downloaded\n\n. . .\n\n\n\n\n\n\nTake a 10-minute break, then we’ll start with the interactive notebooks.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#interesting-literature-on-algorithms",
    "href": "lectures/lec_01_introduction.html#interesting-literature-on-algorithms",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Interesting Literature on Algorithms",
    "text": "Interesting Literature on Algorithms\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.2\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#books-on-programming",
    "href": "lectures/lec_01_introduction.html#books-on-programming",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#more-literature",
    "href": "lectures/lec_01_introduction.html#more-literature",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_01_introduction.html#footnotes",
    "href": "lectures/lec_01_introduction.html#footnotes",
    "title": "Lecture 1 - Introduction & Python Setup",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAn Introduction to Management Science: Quantitative Approaches to Decision Making (15 ed.). Boston: Cengage Learning, Inc. 2019. ISBN 978-1-337-40652-9.↩︎\nA great inspiration to learn more about Algorithms!↩︎",
    "crumbs": [
      "01 Let's Start",
      "01 Introduction"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Course Syllabus",
    "section": "",
    "text": "No mini-competitions yet - focus on solid foundations\n\n\n\nCourse introduction\nPython setup with uv package manager\nVariables, data types, basic operations\nLists and indexing fundamentals\nConditionals and basic loops\n\n\n\n\n\nFunctions for code organization\nDictionaries for structured data\nTuples and multiple return values\nSorting and optimization fundamentals\nGitHub Copilot integration and best practices\n\n\n\n\n\nNumPy for numerical computing and random simulation\nPandas for data manipulation and analysis\nData visualization with matplotlib\nCSV file handling and real dataset exploration\nIntegration practice with business scenarios\n\n\n\n\n\nMini-competitions begin - apply algorithms to business problems\nFormat for Lectures 4-9:\n\nHour 1: Solution presentations of previous competition\nHour 2: Interactive lecture on core concepts\nHour 3: Hands-on notebook practice + class discussion\nHour 4: Mini-competition with real data\nBonus Points: Best solution teams earn points toward final grade\n\n\n\n\nProbability distributions and random sampling\nBusiness risk modeling techniques\nPortfolio optimization under uncertainty\nCoffee shop simulation case study\n\n\n\n\n\nTime series analysis fundamentals\nDemand forecasting methods\nForecast evaluation metrics\nSeasonal and trend analysis\n\n\n\n\n\nSPT (Shortest Processing Time) rule\nEDD (Earliest Due Date) rule\nGantt chart visualization\nPerformance metrics: makespan, tardiness, flow time\n\n\n\n\n\nNearest neighbor heuristic\n2-opt local search improvements\nRoute optimization metrics\nReal logistics applications\n\n\n\n\n\nWeighted scoring methods\nPareto efficiency concepts\nDecision criteria combination\nBusiness trade-off analysis\n\n\n\n\n\nWhen simple heuristics fail\nGenetic algorithms introduction\nSimulated annealing basics\nAlgorithm selection strategies\n\n\n\n\n\nReal client challenges with professional presentations\n\n\n\nThree client projects to choose from:\n\nQuickBite: Food delivery routing optimization\nNurseNext: Healthcare staff scheduling\nTechMart: E-commerce inventory optimization\n\nTeam formation and data exploration\nProject scope definition\n\n\n\n\n\nPresentation skills training\nIntensive solution development\nPeer consultation and feedback\nPrototype completion milestone\n\n\n\n\n\nProfessional presentation competition\n“Executive panel evaluation”\nSolution demonstration and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-i-python-foundation-lectures-1-3",
    "href": "general/syllabus.html#part-i-python-foundation-lectures-1-3",
    "title": "Course Syllabus",
    "section": "",
    "text": "No mini-competitions yet - focus on solid foundations\n\n\n\nCourse introduction\nPython setup with uv package manager\nVariables, data types, basic operations\nLists and indexing fundamentals\nConditionals and basic loops\n\n\n\n\n\nFunctions for code organization\nDictionaries for structured data\nTuples and multiple return values\nSorting and optimization fundamentals\nGitHub Copilot integration and best practices\n\n\n\n\n\nNumPy for numerical computing and random simulation\nPandas for data manipulation and analysis\nData visualization with matplotlib\nCSV file handling and real dataset exploration\nIntegration practice with business scenarios",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-ii-management-science-tools-lectures-4-9",
    "href": "general/syllabus.html#part-ii-management-science-tools-lectures-4-9",
    "title": "Course Syllabus",
    "section": "",
    "text": "Mini-competitions begin - apply algorithms to business problems\nFormat for Lectures 4-9:\n\nHour 1: Solution presentations of previous competition\nHour 2: Interactive lecture on core concepts\nHour 3: Hands-on notebook practice + class discussion\nHour 4: Mini-competition with real data\nBonus Points: Best solution teams earn points toward final grade\n\n\n\n\nProbability distributions and random sampling\nBusiness risk modeling techniques\nPortfolio optimization under uncertainty\nCoffee shop simulation case study\n\n\n\n\n\nTime series analysis fundamentals\nDemand forecasting methods\nForecast evaluation metrics\nSeasonal and trend analysis\n\n\n\n\n\nSPT (Shortest Processing Time) rule\nEDD (Earliest Due Date) rule\nGantt chart visualization\nPerformance metrics: makespan, tardiness, flow time\n\n\n\n\n\nNearest neighbor heuristic\n2-opt local search improvements\nRoute optimization metrics\nReal logistics applications\n\n\n\n\n\nWeighted scoring methods\nPareto efficiency concepts\nDecision criteria combination\nBusiness trade-off analysis\n\n\n\n\n\nWhen simple heuristics fail\nGenetic algorithms introduction\nSimulated annealing basics\nAlgorithm selection strategies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#part-iii-consulting-competition-lectures-10-12",
    "href": "general/syllabus.html#part-iii-consulting-competition-lectures-10-12",
    "title": "Course Syllabus",
    "section": "",
    "text": "Real client challenges with professional presentations\n\n\n\nThree client projects to choose from:\n\nQuickBite: Food delivery routing optimization\nNurseNext: Healthcare staff scheduling\nTechMart: E-commerce inventory optimization\n\nTeam formation and data exploration\nProject scope definition\n\n\n\n\n\nPresentation skills training\nIntensive solution development\nPeer consultation and feedback\nPrototype completion milestone\n\n\n\n\n\nProfessional presentation competition\n“Executive panel evaluation”\nSolution demonstration and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#grade-composition-100-points-total",
    "href": "general/syllabus.html#grade-composition-100-points-total",
    "title": "Course Syllabus",
    "section": "Grade Composition (100 points total)",
    "text": "Grade Composition (100 points total)\n\n\n\nComponent\nPoints\nPercentage\nDescription\n\n\n\n\nAssignment 1: Risk & Forecasting\n30\n30%\nDue Lecture 8\n\n\nAssignment 2: Optimization Toolkit\n30\n30%\nDue Lecture 10\n\n\nFinal Competition Project\n40\n40%\nLectures 10-12\n\n\n- Solution Quality\n20\n20%\nTechnical implementation\n\n\n- Presentation\n20\n20%\nCommunication effectiveness",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#bonus-opportunities-additional-points-possible",
    "href": "general/syllabus.html#bonus-opportunities-additional-points-possible",
    "title": "Course Syllabus",
    "section": "Bonus Opportunities (Additional points possible)",
    "text": "Bonus Opportunities (Additional points possible)\n\nMini-competition victories (Lectures 4-9): up to +10 points\nPeer-selected best client project: +5 points",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#late-work-policy",
    "href": "general/syllabus.html#late-work-policy",
    "title": "Course Syllabus",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nAssignment 1 & 2: -10% per day late (up to 3 days)\nCompetition project: No late submissions accepted (real consulting deadline!)\nExtensions granted only for documented emergencies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of algorithmic thinking and programming. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\nA book that inspired this lecture and will give you a good intuition for the principles of algorithmic thinking and how they can be applied to solve problems in everyday life.\n\nZingaro, D. (2024) Algorithmic thinking, 2nd edition: Unlock your programming potential. AU: No Starch Press.\n\nA book that introduces you to different algorithms and their reasoning. Written without any pseudocode, but with a lot of examples and explanations.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\n\n\nDowney, A. B. (2023). Modeling and Simulation in Python. No Starch Press.\n\n\nAn interesting book for those who want know more about simulations in Python.\nLink to the book\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-2",
    "href": "general/literature.html#books-2",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nZed\n\nA young and lightweight code editor that is very fast and lightweight with built-in collaboration and AI features.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/cheatsheet.html",
    "href": "general/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10\n\n\n\n\n\nIntegers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable\n\n\n\n\nChecking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.\n\n\n\n\n\n\nConcatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#variables",
    "href": "general/cheatsheet.html#variables",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#data-types",
    "href": "general/cheatsheet.html#data-types",
    "title": "Cheatsheet",
    "section": "",
    "text": "Integers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#type-conversion",
    "href": "general/cheatsheet.html#type-conversion",
    "title": "Cheatsheet",
    "section": "",
    "text": "Checking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#string-formatting",
    "href": "general/cheatsheet.html#string-formatting",
    "title": "Cheatsheet",
    "section": "",
    "text": "Concatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#comparison-operators",
    "href": "general/cheatsheet.html#comparison-operators",
    "title": "Cheatsheet",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\n==\nEqual to\nscore == 100\n\n\n!=\nNot equal to\ndegree != “Computer Science”\n\n\n&lt;\nLess than\nsalary &lt; 80000\n\n\n&gt;\nGreater than\nexperience &gt; 5\n\n\n&lt;=\nLess than or equal to\nage &lt;= 65\n\n\n&gt;=\nGreater than or equal to\ntest_score &gt;= 80",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#logical-operators",
    "href": "general/cheatsheet.html#logical-operators",
    "title": "Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\nand\nBoth conditions must be true\nscore &gt; 80 and experience &gt; 5\n\n\nor\nAt least one condition must be true\nscore &gt; 80 or experience &gt; 5\n\n\nnot\nCondition must be false\nnot (score &gt; 80)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-statements",
    "href": "general/cheatsheet.html#if-statements",
    "title": "Cheatsheet",
    "section": "if Statements",
    "text": "if Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 7:\n    print(\"This is a good apartment!\")\n\nThis is a good apartment!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-else-statements",
    "href": "general/cheatsheet.html#if-else-statements",
    "title": "Cheatsheet",
    "section": "if-else Statements",
    "text": "if-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 4\nif flat_rating &gt;= 7:\n    print(\"Apply for this flat!\")\nelse:\n    print(\"Keep searching!\")\n\nKeep searching!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-elif-else-statements",
    "href": "general/cheatsheet.html#if-elif-else-statements",
    "title": "Cheatsheet",
    "section": "if-elif-else Statements",
    "text": "if-elif-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelif condition:\n    # code to execute if condition is False\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 9:\n    print(\"Amazing flat - apply immediately!\")\nelif flat_rating &gt;= 7:\n    print(\"Good flat - consider applying\")\nelse:\n    print(\"Keep looking\")\n\nGood flat - consider applying",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#complex-conditions",
    "href": "general/cheatsheet.html#complex-conditions",
    "title": "Cheatsheet",
    "section": "Complex Conditions",
    "text": "Complex Conditions\n\nNested if Statements: Use if statements inside other if statements.\nLogical Operators: Combine conditions using and, or, not.\nStructure:\n\nif (condition1) and (condition2):\n    # code if both conditions are True\nelif (condition1) or (condition2):\n    # code if at least one condition is True\nelse:\n    # code if none of the conditions are True\n\nExample:\n\n\nflat_rating = 9\nprice = 900\nif (flat_rating &gt;= 9) and (price &lt; 1000):\n    print(\"Amazing flat - apply immediately!\")\n\nAmazing flat - apply immediately!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#accessing-elements",
    "href": "general/cheatsheet.html#accessing-elements",
    "title": "Cheatsheet",
    "section": "Accessing Elements",
    "text": "Accessing Elements\n\nIndexing: Use [index] to access elements.\n\n\nprint(restaurants[0])  # Access the first element\n\nMagic Place\n\n\n\nNegative Indexing: Use [-1] to access the last element.\n\n\nprint(restaurants[-1])  # Access the last element\n\nCoffee Shop\n\n\n\nSlicing: Use [start:end] to access a range of elements.\n\n\nprint(restaurants[0:2])  # Access the first two elements\n\n['Magic Place', 'Sushi Bar']",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#adding-elements",
    "href": "general/cheatsheet.html#adding-elements",
    "title": "Cheatsheet",
    "section": "Adding Elements",
    "text": "Adding Elements\n\nAppending: Use append() to add an element to the end of the list.\n\n\nrestaurants.append(\"Pasta Place\")\n\n\nInserting: Use insert() to add an element at a specific index.\n\n\nrestaurants.insert(0, \"Pasta Magic\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#removing-elements",
    "href": "general/cheatsheet.html#removing-elements",
    "title": "Cheatsheet",
    "section": "Removing Elements",
    "text": "Removing Elements\n\nRemoving: Use remove() to remove an element by value.\n\n\nrestaurants.remove(\"Pasta Place\")\n\n\nRemoving by Index: Use pop() to remove an element by index.\n\n\nrestaurants.pop(0)\n\n'Pasta Magic'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#nested-lists",
    "href": "general/cheatsheet.html#nested-lists",
    "title": "Cheatsheet",
    "section": "Nested Lists",
    "text": "Nested Lists\n\nDefinition: Lists containing other lists or tuples.\nAccessing: Use nested indexing.\n\n\nrestaurant_data = [\n    [\"Pasta Place\", 4.5, 3],\n    [\"Sushi Bar\", 4.2, 1]\n]\nprint(restaurants[0][1])  # Access the second element of the first list\n\na",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuples",
    "href": "general/cheatsheet.html#tuples",
    "title": "Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n\nDefinition: Ordered, immutable collections of items.\nCreation: Use parentheses ().\nImmutability: Once created, cannot be changed.\nMemory Efficiency: Use less memory than lists.\nUse Cases: Ideal for fixed data (e.g., restaurant location).\n\n\nratings = (4.5, 3.8, 4.2)\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#for-loops",
    "href": "general/cheatsheet.html#for-loops",
    "title": "Cheatsheet",
    "section": "for Loops",
    "text": "for Loops\n\nDefinition: Iterate over a sequence of items.\nStructure:\n\nfor item in sequence:\n    # code to execute for each item\n\nExample:\n\n\ntreatments = [\"Standard Drug\", \"New Drug A\", \"New Drug B\"]\nfor treatment in treatments:\n    print(f\"Evaluating efficacy of {treatment}\")\n\nEvaluating efficacy of Standard Drug\nEvaluating efficacy of New Drug A\nEvaluating efficacy of New Drug B",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#range-in-for-loops",
    "href": "general/cheatsheet.html#range-in-for-loops",
    "title": "Cheatsheet",
    "section": "Range in for Loops",
    "text": "Range in for Loops\n\nDefinition: Generate a sequence of numbers.\nStructure:\n\nrange(start, stop, step)\n\nExample:\n\n\nfor phase in range(5):  # 0 to 4\n    print(f\"Starting Phase {phase + 1}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5\n\n\n\nfor phase in range(1, 5):  # 1 to 4\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\n\n\n\nfor phase in range(1, 5, 2):  # 1 to 4, step 2\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 3",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#break-and-continue",
    "href": "general/cheatsheet.html#break-and-continue",
    "title": "Cheatsheet",
    "section": "break and continue",
    "text": "break and continue\n\nbreak: Exit the loop.\ncontinue: Skip the current iteration and continue with the next.\n\n\nefficacy_scores = [45, 60, 75, 85, 90]\nfor score in efficacy_scores:\n    if score &lt; 50:\n        continue\n        print(f\"Treatment efficacy: {score}%\")\n    if score &gt;= 85:\n        break",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuple-unpacking",
    "href": "general/cheatsheet.html#tuple-unpacking",
    "title": "Cheatsheet",
    "section": "Tuple unpacking",
    "text": "Tuple unpacking\n\nDefinition: Assign elements of a tuple to variables.\nStructure:\nExample:\n\n\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)\nname, cuisine, year = restaurant_info\nprint(name)\nprint(cuisine)\nprint(year)\n\nPasta Place\nItalian\n2020",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#while-loops",
    "href": "general/cheatsheet.html#while-loops",
    "title": "Cheatsheet",
    "section": "while Loops",
    "text": "while Loops\n\nDefinition: Execute code repeatedly as long as a condition is true.\nStructure:\n\nwhile condition:\n    # code to execute while condition is True\n\nExample:\n\n\nphase = 1\nwhile phase &lt;= 5:\n    print(f\"Starting Phase {phase}\")\n    phase += 1\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#basic-function",
    "href": "general/cheatsheet.html#basic-function",
    "title": "Cheatsheet",
    "section": "Basic Function",
    "text": "Basic Function\n\nDefinition: Use the def keyword.\nStructure:\n\ndef function_name(parameters):\n    # code to execute (function body)\n    return value  # Optional\n\nExample:\n\n\ndef greet_visitor(name):\n    return f\"Welcome to the library, {name}!\"\n\ngreet_visitor(\"Student\")\n\n'Welcome to the library, Student!'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#return-value",
    "href": "general/cheatsheet.html#return-value",
    "title": "Cheatsheet",
    "section": "Return Value",
    "text": "Return Value\n\nDefinition: The value returned by a function.\nExample:\n\n\ndef multiply_by_two(number):\n    return number * 2\n\nresult = multiply_by_two(5)\nprint(result)\n\n10\n\n\n\nNote: If a function does not return a value, it implicitly returns None.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#default-parameters",
    "href": "general/cheatsheet.html#default-parameters",
    "title": "Cheatsheet",
    "section": "Default Parameters",
    "text": "Default Parameters\n\nDefinition: Provide default values for function parameters.\nStructure:\n\ndef greet_visitor(name=\"People\"):\n    return f\"Welcome to the library, {name}!\"\n\nprint(greet_visitor()) # Calls the function with the default parameter\nprint(greet_visitor(\"Tobias\")) # Calls the function with a custom parameter",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#multiple-parameters",
    "href": "general/cheatsheet.html#multiple-parameters",
    "title": "Cheatsheet",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nDefinition: Functions can have multiple parameters.\nStructure:\n\ndef greet_visitor(name, age):\n    return f\"Welcome to the library, {name}! You are {age} years old.\"\n\nprint(greet_visitor(\"Tobias\", 30))",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#standard-libraries",
    "href": "general/cheatsheet.html#standard-libraries",
    "title": "Cheatsheet",
    "section": "Standard Libraries",
    "text": "Standard Libraries\n\nDefinition: Libraries that are part of the Python standard library.\nAccess: Import them using import.\n\n\nimport math\nimport random\n\n\nFor long package names, you can use the as keyword to create an alias.\n\n\nimport random as rd\n\n\nTo call a function from an imported package, use the package name as a prefix.\n\n\nrandom_number = rd.random()\nprint(random_number)\n\n0.5824828570685787",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#installing-packages",
    "href": "general/cheatsheet.html#installing-packages",
    "title": "Cheatsheet",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nDefinition: Install packages using uv. Note, don’t do this inside of a notebook but in the terminal in your project folder!\n\nuv add package_name",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#normal-distribution",
    "href": "general/cheatsheet.html#normal-distribution",
    "title": "Cheatsheet",
    "section": "Normal Distribution",
    "text": "Normal Distribution\n\nWhen to Use: Most common in business and nature; symmetric outcomes around a mean\nCharacteristics:\n\nBell-shaped, symmetric curve\nMost values cluster around the mean\nRare extreme values in tails\n\nExamples:\n\nInvestment returns\nManufacturing variations\nEmployee performance scores\nMeasurement errors\n\n\nPython Syntax:\n\nimport numpy as np\n\n# Generate normal distribution\nreturns = np.random.normal(loc=mean, scale=std_dev, size=n_samples)\n\n# Example: Stock returns with 10% mean, 15% volatility\nstock_returns = np.random.normal(loc=0.10, scale=0.15, size=10000)\n\nParameters:\n\nloc: The mean (center) of the distribution\nscale: The standard deviation (spread)\nsize: Number of samples to generate",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#uniform-distribution",
    "href": "general/cheatsheet.html#uniform-distribution",
    "title": "Cheatsheet",
    "section": "Uniform Distribution",
    "text": "Uniform Distribution\n\nWhen to Use: Complete uncertainty within a range; all outcomes equally likely\nCharacteristics:\n\nFlat distribution\nAll values equally likely\nHard boundaries (min/max)\nNo clustering around any value\n\nExamples:\n\nRandom wait times\nInitial demand estimates with only min/max known\nRandom sampling from a range\n\n\nPython Syntax:\n\n# Generate uniform distribution\nvalues = np.random.uniform(low=minimum, high=maximum, size=n_samples)\n\n# Example: Demand between 1000 and 5000 units\ndemand = np.random.uniform(low=1000, high=5000, size=10000)\n\nParameters:\n\nlow: Minimum value (inclusive)\nhigh: Maximum value (exclusive)\nsize: Number of samples to generate",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#exponential-distribution",
    "href": "general/cheatsheet.html#exponential-distribution",
    "title": "Cheatsheet",
    "section": "Exponential Distribution",
    "text": "Exponential Distribution\n\nWhen to Use: Time between events; waiting times\nCharacteristics:\n\nMany small values, few large ones\nAlways positive\nMemoryless property\nRight-skewed (long tail)\n\nExamples:\n\nTime between customer arrivals\nEquipment failure times\nTime until next sale\nDuration of phone calls\n\n\nPython Syntax:\n\n# Generate exponential distribution\nwait_times = np.random.exponential(scale=average_time, size=n_samples)\n\n# Example: Time between customers (avg 5 minutes)\narrivals = np.random.exponential(scale=5, size=10000)\n\nParameters:\n\nscale: The average (mean) time between events\nsize: Number of samples to generate",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#binomial-distribution",
    "href": "general/cheatsheet.html#binomial-distribution",
    "title": "Cheatsheet",
    "section": "Binomial Distribution",
    "text": "Binomial Distribution\n\nWhen to Use: Fixed number of independent yes/no trials\nCharacteristics:\n\nDiscrete outcomes (counts)\nFixed number of trials\nEach trial has same probability\nTrials are independent\n\nExamples:\n\nNumber of defective items in a batch\nNumber of successful sales calls\nNumber of customers who convert\nNumber of loans that default\n\n\nPython Syntax:\n\n# Generate binomial distribution\nsuccesses = np.random.binomial(n=n_trials, p=prob_success, size=n_samples)\n\n# Example: 100 sales calls with 20% conversion rate\nconversions = np.random.binomial(n=100, p=0.20, size=10000)\n\nParameters:\n\nn: Number of trials\np: Probability of success on each trial\nsize: Number of experiments to simulate",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#common-risk-metrics",
    "href": "general/cheatsheet.html#common-risk-metrics",
    "title": "Cheatsheet",
    "section": "Common Risk Metrics",
    "text": "Common Risk Metrics\nCalculate from simulated results:\n\n# Basic statistics\nmean_return = results.mean()\nstd_dev = results.std()\nmin_value = results.min()\nmax_value = results.max()\n\n# Percentiles (Value at Risk)\nvar_5 = np.percentile(results, 5)  # 5th percentile (worst 5%)\nvar_95 = np.percentile(results, 95)  # 95th percentile (best 5%)\n\n# Probability of loss\nprob_loss = (results &lt; 0).mean()\n\n# Expected shortfall (average of worst 5%)\nworst_5_percent = results[results &lt;= var_5]\nexpected_shortfall = worst_5_percent.mean()\n\n# Correlation between two variables\ncorrelation = np.corrcoef(returns1, returns2)[0, 1]",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Management Science!",
    "section": "",
    "text": "Management Science is an interdisciplinary field that applies scientific methods to organizational problem-solving and decision-making. By leveraging mathematical modeling, statistics, and numerical algorithms, management science helps businesses achieve their strategic goals effectively.\nIn this course, you’ll build a comprehensive toolkit by solving real problems across diverse business domains. Each algorithm is a tool, each case is a client, and each presentation is a pitch. Throughout the semester, you’ll work with realistic, business-relevant scenarios using Python. The course end in a consulting competition where teams tackle client briefs (food delivery routing, healthcare staff scheduling, or inventory optimization) and present solutions to a panel of “executives.”",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#required-tools",
    "href": "index.html#required-tools",
    "title": "Welcome to Management Science!",
    "section": "Required Tools",
    "text": "Required Tools\n\nLaptop capable of running Python and Jupyter notebooks\nPython (installed via uv package manager in class)\nGitHub Copilot (free with Student Developer Pack)\nVS Code or similar IDE",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "Welcome to Management Science!",
    "section": "Getting Help",
    "text": "Getting Help\n\nDuring class: Ask questions immediately, others likely have the same question\nTeam support: Leverage your group for collaborative problem-solving\nEmail: Response within 48 hours for urgent questions",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know by sending me an e-mail to vlcek@beyondsimulations.com.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nHow can I download PDF slides from the lecture?\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.\n\n\n\n\n\n\n\nUnfortunately, this method does not work perfectly on all browsers. If you have a Chrome based browser, you should be fine.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-chatbot-work",
    "href": "general/faq.html#how-does-the-chatbot-work",
    "title": "Frequently Asked Questions",
    "section": "How does the chatbot work?",
    "text": "How does the chatbot work?\nThe course AI is a chatbot that uses the Mistral and some custom code hosted on Hetzner in Germany. If you have any questions about the course, feel free to ask the AI. Note, that the AI is not perfect and sometimes the answers might be incorrect. For more information about how the data is processed, please refer to the privacy policy.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#is-using-copilot-cheating",
    "href": "general/faq.html#is-using-copilot-cheating",
    "title": "Frequently Asked Questions",
    "section": "Is using Copilot cheating?",
    "text": "Is using Copilot cheating?\nNo! Think of it more like using a calculator. It is allowed and encouraged, but you must understand what it does in the background to check the results.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#will-copilot-make-me-a-worse-programmer",
    "href": "general/faq.html#will-copilot-make-me-a-worse-programmer",
    "title": "Frequently Asked Questions",
    "section": "Will Copilot make me a worse programmer?",
    "text": "Will Copilot make me a worse programmer?\nIf you don’t learn the basics first by yourself and try to come up with the solution structure, most likely yes. But it is still better then just copying everything into ChatGPT and if used wisely, it can also accelerate learning by showing you patterns.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#what-if-copilot-suggests-wrong-code",
    "href": "general/faq.html#what-if-copilot-suggests-wrong-code",
    "title": "Frequently Asked Questions",
    "section": "What if Copilot suggests wrong code?",
    "text": "What if Copilot suggests wrong code?\nCopilot (and all Large Mondels) are far from perfect. They work based on statistics and there will always be lots of mistakes and hallucinations, which most likely never can be fixed.1 That’s why humans are still very important in the loop.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#footnotes",
    "href": "general/faq.html#footnotes",
    "title": "Frequently Asked Questions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://machinelearning.apple.com/research/illusion-of-thinking↩︎",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/privacy.html",
    "href": "general/privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#introduction",
    "href": "general/privacy.html#introduction",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#data-controller",
    "href": "general/privacy.html#data-controller",
    "title": "Privacy Policy",
    "section": "2. Data Controller",
    "text": "2. Data Controller\nThe data controller responsible for your personal data is:\nBeyond Simulations GmbH\nAm Eich 9d\n22113 Oststeinbek\nGermany\nEmail: info@beyond-simulations.com"
  },
  {
    "objectID": "general/privacy.html#information-we-collect",
    "href": "general/privacy.html#information-we-collect",
    "title": "Privacy Policy",
    "section": "3. Information We Collect",
    "text": "3. Information We Collect\nWhen you interact with our Chatbot, we collect and process the following types of information:\n\nChat Interactions: This includes the questions, prompts, and text you submit to the Chatbot (“Prompts”) and the responses generated by the Chatbot (“Responses”). We do not store any personal data and all prompts are anonymized.\nTechnical Data: We may automatically collect technical information associated with your interaction, such as timestamps, session identifiers for service functionality. This data is processed on our self-hosted server at Hetzner in Germany.\nUsage Data: We may collect aggregated and anonymized data about how the Chatbot is used to monitor performance and improve the service."
  },
  {
    "objectID": "general/privacy.html#how-we-use-your-information",
    "href": "general/privacy.html#how-we-use-your-information",
    "title": "Privacy Policy",
    "section": "4. How We Use Your Information",
    "text": "4. How We Use Your Information\nWe use the collected information for the following purposes:\n\nTo Provide and Operate the Chatbot: To receive your Prompts, process them using AI models, and deliver Responses back to you.\nTo Route Requests: To manage communication between our Chatbot interface and the underlying AI models via intermediary services.\nFor Safety and Content Moderation: To analyze Prompts and/or potential Responses for harmful, inappropriate, or policy-violating content using designated services by Mistral AI acting as guardrails, aiming to ensure safer interactions.\nFor Service Improvement: To analyze usage patterns to understand user needs, troubleshoot issues, and enhance the Chatbot’s performance and capabilities.\nFor Security and Monitoring: To maintain the security of our service, prevent fraud, and monitor for potential misuse.\nTo Comply with Legal Obligations: To meet any applicable legal or regulatory requirements."
  },
  {
    "objectID": "general/privacy.html#legal-basis-for-processing",
    "href": "general/privacy.html#legal-basis-for-processing",
    "title": "Privacy Policy",
    "section": "5. Legal Basis for Processing",
    "text": "5. Legal Basis for Processing\nWe process your personal data based on the following legal grounds:\n\nLegitimate Interests: Processing is necessary for our legitimate interests in operating and improving the Chatbot service and maintaining its security, provided these interests are not overridden by your data protection rights.\nConsent: In some cases, we might ask for your explicit consent for specific processing activities (e.g., using conversation data for fine-tuning models beyond basic service provision).\nLegal Obligation: Processing is necessary to comply with a legal obligation to which we are subject."
  },
  {
    "objectID": "general/privacy.html#data-sharing-and-third-parties",
    "href": "general/privacy.html#data-sharing-and-third-parties",
    "title": "Privacy Policy",
    "section": "6. Data Sharing and Third Parties",
    "text": "6. Data Sharing and Third Parties\nTo provide the Chatbot service, your Prompts are processed by and shared with the following third-party services and infrastructure providers:\n\nChatbot Interface: The user interface for the Chatbot runs directly in your web browser.\nRAG-Backend: The RAG backend runs on a self-hosted server on Hetzner in Germany.\nLLM Observation (Langfuse): We use Langfuse to observe the usage of the LLM models we use. Your Prompts (and generated responses) pass through Langfuse to reach the selected LLM provider or guardrail service. The data is stored on our self-hosted server at Hetzner in Germany.\nHosting Provider (Hetzner): Our instance of Langfuse is self-hosted on servers provided by Hetzner Online GmbH. Hetzner acts as a data processor providing the infrastructure. We store application data and interaction logs on these servers, located within Germany.\nMistral AI: We use Mistral AI for two primary purposes: (1) as one of the LLM options to generate Responses to your Prompts, and (2) as a guardrail service to check Prompts and/or potential Responses (which may have been generated by Mistral AI itself) for safety, appropriateness, and compliance with content policies before a final response is delivered to you. When Mistral is used for either generation or guardrail checking, your data (relevant Prompts and/or potential Responses) is processed according to Mistral’s terms and privacy policy. The data ist not used or saved for training purposes by the model providers.\n\nImportant Note on Third-Party Processing: These LLM and guardrail providers process your data to generate Responses or perform safety checks. They may use data according to their own policies, potentially including service improvement, subject to their terms. We encourage you to review their respective privacy policies. We do not explicitly share personal identifiers like your name or email through the Chatbot interaction unless you voluntarily include such information in your Prompts."
  },
  {
    "objectID": "general/privacy.html#data-storage-security-and-retention",
    "href": "general/privacy.html#data-storage-security-and-retention",
    "title": "Privacy Policy",
    "section": "7. Data Storage, Security, and Retention",
    "text": "7. Data Storage, Security, and Retention\n\nStorage: Chat interaction data (Prompts, Responses) and technical logs may be stored temporarily or persistently (depending on configuration) on our Langfuse instance hosted on Hetzner servers in Germany.\nSecurity: We implement reasonable technical and organizational measures to protect your data from unauthorized access, disclosure, alteration, or destruction. This includes using HTTPS encryption for data transmitted between your browser, our server, and the LLM providers. Access to the backend systems is restricted.\nRetention: We retain chat interaction data and technical logs only for as long as necessary to fulfill the purposes outlined in this policy, for troubleshooting, security logging, service improvement, or as required by law. Retention periods vary depending on the type of data and our operational needs."
  },
  {
    "objectID": "general/privacy.html#your-data-protection-rights",
    "href": "general/privacy.html#your-data-protection-rights",
    "title": "Privacy Policy",
    "section": "8. Your Data Protection Rights",
    "text": "8. Your Data Protection Rights\nDepending on your location and applicable data protection laws, you may have the following rights regarding your personal data:\n\nRight to Access: You can request copies of your personal data that we hold.\nRight to Rectification: You can request correction of inaccurate or incomplete data.\nRight to Erasure (‘Right to be Forgotten’): You can request the deletion of your personal data under certain conditions.\nRight to Restrict Processing: You can request the limitation of how we process your data under certain conditions.\nRight to Data Portability: You can request that we transfer the data we have collected to another organization, or directly to you, under certain conditions.\nRight to Object: You can object to our processing of your personal data based on legitimate interests.\nRight to Withdraw Consent: If processing is based on consent, you can withdraw it at any time.\n\nTo exercise any of these rights, please contact us using the details provided in Section 2 (Data Controller). We may need to verify your identity before processing your request."
  },
  {
    "objectID": "general/privacy.html#changes-to-this-privacy-policy",
    "href": "general/privacy.html#changes-to-this-privacy-policy",
    "title": "Privacy Policy",
    "section": "9. Changes to This Privacy Policy",
    "text": "9. Changes to This Privacy Policy\nWe may update this Privacy Policy from time to time. We will notify you of any significant changes by posting the new policy on this page and updating the “Last Updated” date at the top. We encourage you to review this policy periodically for any changes."
  },
  {
    "objectID": "general/uv.html",
    "href": "general/uv.html",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It:\n\nInstalls Python for you (no manual downloads).\nCreates isolated virtual environments (safe sandboxes per project).\nInstalls and updates packages quickly.\n\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#why-we-use-uv-for-this-course",
    "href": "general/uv.html#why-we-use-uv-for-this-course",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It:\n\nInstalls Python for you (no manual downloads).\nCreates isolated virtual environments (safe sandboxes per project).\nInstalls and updates packages quickly.\n\n\n\n\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#install-uv",
    "href": "general/uv.html#install-uv",
    "title": "Installing Python",
    "section": "Install uv",
    "text": "Install uv\nChoose the instructions for your operating system. To these, you need to work in your terminal.\n\n\n\n\n\n\nOpen the terminal in VS Code by selecting (Terminal → New Terminal).\n\n\n\n\nmacOS or Linux (Terminal)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf curl is missing:\nwget -qO- https://astral.sh/uv/install.sh | sh\nAfter installation: close and reopen your terminal (so your PATH updates).\n\n\nWindows (PowerShell)\nOpen PowerShell and run:\npowershell -ExecutionPolicy Bypass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nIf you see a script execution warning, you can alternatively first run:\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process\nThen re-run the install line.\n\n\nVerify installation\nRun (macOS / Linux / Windows):\nuv --version\nIf you see a version number: great!\n\n\n\n\n\n\nIf you get “command not found” or “‘uv’ is not recognized”:\n\nClose and reopen the terminal (important).\nOn Windows: make sure you used PowerShell (not Command Prompt).\nStill broken? Ask for help, no need of guessing the error.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#installpython",
    "href": "general/uv.html#installpython",
    "title": "Installing Python",
    "section": "InstallPython",
    "text": "InstallPython\nWe want everyone on the same Python version for consistency. Thus, we’ll use Python 3.12 for the course this year.\nInstall (you only need to do this once):\nuv python install 3.12\nCheck the installation:\nuv run python --version\nExpected output starts with:\nPython 3.12.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#create-your-first-project",
    "href": "general/uv.html#create-your-first-project",
    "title": "Installing Python",
    "section": "Create your first project",
    "text": "Create your first project\nPick a folder where you keep course work. If you do not have one, make sure to create one! Open the course folder in your IDE and then run the following from the terminal:\nuv init\nuv init creates:\n\nmain.py (starter script)\npyproject.toml (project + dependencies config)\n.python-version (records the Python version we chose)\n.gitignore (useful if you ever use Git)\nREADME.md (you can jot notes here)\n(A .venv folder will appear later once packages are added or synced.)\n\n\n\n\n\n\n\nYou do not need to edit any of these (except maybe README.md for your notes and main.py if you want to run something different).",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#run-the-starter-script",
    "href": "general/uv.html#run-the-starter-script",
    "title": "Installing Python",
    "section": "Run the starter script",
    "text": "Run the starter script\nInside the project folder in your terminal:\nuv run python main.py\nYou should see something like:\nHello World!\n(If you want, you can open main.py and change the message, then re-run.)\n\nWhat does that code mean?\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n\ndef main(): defines a function (a reusable block of code).\nprint(...) shows text in the terminal.\nThe line if __name__ == \"__main__\": ensures this only auto-runs when the file is executed directly.\n\nDon’t worry about this yet, we’ll gradually build up to it.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#adding-packages-later-in-the-course",
    "href": "general/uv.html#adding-packages-later-in-the-course",
    "title": "Installing Python",
    "section": "Adding packages (later in the course)",
    "text": "Adding packages (later in the course)\nIf/when you need a package (example: pandas):\nuv add pandas\nIf you added the wrong one:\nuv remove pandas\nIf your pyproject.toml changed (e.g. you pulled code from someone else):\nuv sync\n\n\n\n\n\n\nIf something seems “off”, just close the terminal and reopen in the project folder. Fresh starts fix many early mistakes.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#updating-uv",
    "href": "general/uv.html#updating-uv",
    "title": "Installing Python",
    "section": "Updating uv",
    "text": "Updating uv\nOccasionally:\nuv self update\n\n\n\n\n\n\nIf it ever errors, you can just reinstall using the same one-liner from earlier.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#best-practices-for-this-course",
    "href": "general/uv.html#best-practices-for-this-course",
    "title": "Installing Python",
    "section": "Best practices for this course",
    "text": "Best practices for this course\n\nOne folder for the course keeps everything tidy.\nNever install packages “globally” outside a project.\nKeep a short personal log in each project’s README.md (What did I do? What still confuses me?).\nAsk early for help, guessing usually takes much more time than asking.\n\nYou can always see available commands:\nuv --help",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#recap",
    "href": "general/uv.html#recap",
    "title": "Installing Python",
    "section": "Recap",
    "text": "Recap\nYou can now:\n\nInstall uv.\nCreate a project.\nRun a script.\nAdd/remove/sync packages.\n\nNow, you’re set to continue the course.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html",
    "href": "lectures/lec_02_copilot_intro.html",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Coding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT\n\n. . .\n\n\n\n\n\n\n\n\n\nHow do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash\n\n\n\n\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text\n\n\n\n\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources\n\n. . .\n\n\n\n\n\n\nUsing a trained model is called inference.\n\n\n\n\n\n\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)\n\n. . .\n\n\n\n\n\n\nManaging context windows is crucial!\n\n\n\n\n\n\n\nAfter each written token, it predicts “what should come next?”\nLike a advanced version of the word prediction on your phone\nChooses the most likely next token based on training\nBut can’t actually “think” or “understand” like humans\n\n\n\n\n\nNo true understanding of cause and effect1\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on2 and can reflect biases\nNo emotional understanding (but can simulate responses!)3\n\n\n\n\n\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?\n\n\n. . .\n\n\n\n\n\n\nIf you use free models, be aware that your prompts are going to be used by the providers and are not private. But for learning and experimenting, this should be no issue.\n\n\n\n\n\n\n\nGreg Sanderson provides an excellent explanation of LLMs\nGreat starting point to understand LLMs\nCheck out his YouTube channel, 3Blue1Brown for more",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#using-ai-to-generate-code",
    "href": "lectures/lec_02_copilot_intro.html#using-ai-to-generate-code",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Coding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT\n\n. . .",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#section",
    "href": "lectures/lec_02_copilot_intro.html#section",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#large-language-models-llms",
    "href": "lectures/lec_02_copilot_intro.html#large-language-models-llms",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Think of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#training-llms",
    "href": "lectures/lec_02_copilot_intro.html#training-llms",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Imagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources\n\n. . .\n\n\n\n\n\n\nUsing a trained model is called inference.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#pattern-recognition",
    "href": "lectures/lec_02_copilot_intro.html#pattern-recognition",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Not like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)\n\n. . .\n\n\n\n\n\n\nManaging context windows is crucial!",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#probability-based-responses",
    "href": "lectures/lec_02_copilot_intro.html#probability-based-responses",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "After each written token, it predicts “what should come next?”\nLike a advanced version of the word prediction on your phone\nChooses the most likely next token based on training\nBut can’t actually “think” or “understand” like humans",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#limitations",
    "href": "lectures/lec_02_copilot_intro.html#limitations",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "No true understanding of cause and effect1\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on2 and can reflect biases\nNo emotional understanding (but can simulate responses!)3",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#impact-on-jobs",
    "href": "lectures/lec_02_copilot_intro.html#impact-on-jobs",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Question: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?\n\n\n. . .\n\n\n\n\n\n\nIf you use free models, be aware that your prompts are going to be used by the providers and are not private. But for learning and experimenting, this should be no issue.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#a-great-overview-by-3blue1brown",
    "href": "lectures/lec_02_copilot_intro.html#a-great-overview-by-3blue1brown",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "Greg Sanderson provides an excellent explanation of LLMs\nGreat starting point to understand LLMs\nCheck out his YouTube channel, 3Blue1Brown for more",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#what-is-github-copilot",
    "href": "lectures/lec_02_copilot_intro.html#what-is-github-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "What is GitHub Copilot?",
    "text": "What is GitHub Copilot?\nGitHub Copilot is an AI pair programmer that helps you write code faster and with less effort.\n. . .\nThink of it as:\n\nAn autocomplete for entire lines or blocks of code\nA coding assistant that understands context\nA learning tool that shows you coding patterns\n\n. . .\n\n\n\n\n\n\nCopilot uses AI trained on billions of lines of public code to suggest completions.\n\n\n\n. . .\n\n\n\n\n\n\nThere are alternative like Zed or Cursor, but you can use Copilot for free as student.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#used-autocomplete-before",
    "href": "lectures/lec_02_copilot_intro.html#used-autocomplete-before",
    "title": "Lecture 2 - AI Programming",
    "section": "Used autocomplete before?",
    "text": "Used autocomplete before?\n. . .\nWhen you type on your phone, it suggests the next word.\n. . .\nGitHub Copilot does the same for code:\n\nYou write a comment describing what you want\nCopilot suggests the code to do it\nYou accept, modify, or reject the suggestion\n\n. . .\nIt’s autocomplete but much better then what you are used to",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#why-use-copilot",
    "href": "lectures/lec_02_copilot_intro.html#why-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "Why Use Copilot?",
    "text": "Why Use Copilot?\nBenefits you while learning and working with Python:\n\nFaster coding: Less time typing boilerplate code\nLearn patterns: See how experienced programmers code\nUnderstand syntax: Get correct syntax without memorizing\nStay in flow: Focus on logic, not syntax errors\n\n. . .\n\n\n\n\n\n\nEspecially helpful when you know WHAT you want to do but forget HOW to do it.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#when-should-you-use-copilot",
    "href": "lectures/lec_02_copilot_intro.html#when-should-you-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When should you use Copilot?",
    "text": "When should you use Copilot?\n. . .\nGood uses of Copilot\n\nUnderstanding Python syntax you forgot\nWriting repetitive or boilerplate code\nGetting unstuck on simple problems\nExploring different approaches",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#what-shouldnt-you-do-with-copilot",
    "href": "lectures/lec_02_copilot_intro.html#what-shouldnt-you-do-with-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "What shouldn’t you do with Copilot?",
    "text": "What shouldn’t you do with Copilot?\n. . .\nNot so good uses of Copilot\n\nReplacing learning fundamentals\nAccepting code you don’t understand\nSkipping practice exercises\nCopy-pasting without reading\n\n. . .\nAlways understand what Copilot suggests before accepting!\n. . .\nBut of course I know you will not do that ;)",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#demo-writing-a-function",
    "href": "lectures/lec_02_copilot_intro.html#demo-writing-a-function",
    "title": "Lecture 2 - AI Programming",
    "section": "Demo: Writing a Function",
    "text": "Demo: Writing a Function\nScenario: Calculate shipping costs based on weight and distance.\n. . .\nStep 1: Write a text describing what you want\n\"\"\"\nCalculate shipping cost based on weight (kg) and distance (km)\nBase rate: €5, plus €0.10 per kg, plus €0.05 per km\n\"\"\"\n. . .\nStep 2: Copilot suggests the function\n. . .\nWatch how Copilot solves this in the IDE!",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#demo-the-result-hopefully",
    "href": "lectures/lec_02_copilot_intro.html#demo-the-result-hopefully",
    "title": "Lecture 2 - AI Programming",
    "section": "Demo: The Result (hopefully)",
    "text": "Demo: The Result (hopefully)\n\ndef calculate_shipping_cost(weight, distance):\n    \"\"\"Calculate shipping cost based on weight and distance.\"\"\"\n    base_rate = 5.0\n    weight_rate = 0.10\n    distance_rate = 0.05\n    return base_rate + (weight * weight_rate) + (distance * distance_rate)\n\n. . .\nWhat Copilot did:\n\nCreated function with proper parameters\nImplemented the calculation logic\nUsed clear variable names\n\n. . .\n\n\n\n\n\n\nNotice how the text guided Copilot to generate exactly what we needed!",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#accept-without-reading",
    "href": "lectures/lec_02_copilot_intro.html#accept-without-reading",
    "title": "Lecture 2 - AI Programming",
    "section": "Accept without reading?",
    "text": "Accept without reading?\n. . .\nCopilot might suggest code that:\n\nWorks but uses concepts you haven’t learned yet\nContains subtle bugs or edge cases\nDoesn’t match your specific requirements\nUses inefficient approaches\nIntroduce dangerous code in your project\n\n. . .\n\n\n\n\n\n\nDangerous code can lead to security vulnerabilities, data loss, or other issues. In the context of this lecture it should be no issue, but in companies it can be one!",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#my-take-just-be-careful-ok",
    "href": "lectures/lec_02_copilot_intro.html#my-take-just-be-careful-ok",
    "title": "Lecture 2 - AI Programming",
    "section": "My take: Just be careful, ok?",
    "text": "My take: Just be careful, ok?\nYour code, your responsibility:\n\nRead the suggestion carefully\nUnderstand what it does\nTest it with examples\nModify if needed\n\n. . .\n\n\n\n\n\n\nDon’t accept code blindly, especially later if things are more complicated.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#get-free-access",
    "href": "lectures/lec_02_copilot_intro.html#get-free-access",
    "title": "Lecture 2 - AI Programming",
    "section": "Get Free Access",
    "text": "Get Free Access\nGitHub Student Developer Pack gives you free Copilot access!\n. . .\n\nGo to education.github.com/pack\nSign up with your university email\nVerify your student status\nWait for approval (usually 1-2 days)\nLogin into your account in VS Code\n\n. . .\n\n\n\n\n\n\nYou’ll need a GitHub account. Create one at github.com if you don’t have one.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#verifying-copilot-is-working",
    "href": "lectures/lec_02_copilot_intro.html#verifying-copilot-is-working",
    "title": "Lecture 2 - AI Programming",
    "section": "Verifying Copilot is Working",
    "text": "Verifying Copilot is Working\n\nCreate a new Python file (.py) and type something\nWait 1-2 seconds\n\n. . .\nIf working, you’ll see:\n\nGray “ghost text” suggesting code\nPress Tab to accept\nPress Esc to reject\n\n. . .\n\n\n\n\n\n\nTry to get copilot running on your own until next session.",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#when-to-use-copilot",
    "href": "lectures/lec_02_copilot_intro.html#when-to-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When to Use Copilot",
    "text": "When to Use Copilot\nUse Copilot for:\n. . .\n1. Syntax Help\n# Convert string to datetime\n# Copilot remembers: pd.to_datetime()\n. . .\n2. Boilerplate Code\n# Create a function to read CSV file and return DataFrame\n# Copilot writes the import and function structure\n. . .\n3. Getting Unstuck\n# I know I need to filter this list, but forget the syntax\n# Copilot suggests: [x for x in items if x &gt; 10]",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#when-not-to-use-copilot",
    "href": "lectures/lec_02_copilot_intro.html#when-not-to-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When Not to Use Copilot",
    "text": "When Not to Use Copilot\nDon’t use Copilot for\n. . .\n1. Learning Fundamentals\n\nYou should understand loops, functions, and data types\n\n. . .\n2. Skipping Problem-Solving\n\nFigure out the logic first, then use Copilot for syntax\n\n. . .\n3. Accepting Without Understanding\n\nAsk: “Can I explain what this code does?”",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#key-takeaways",
    "href": "lectures/lec_02_copilot_intro.html#key-takeaways",
    "title": "Lecture 2 - AI Programming",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nGitHub Copilot is a tool: You still need to learn fundamentals\nUnderstand before accepting: Read every suggestion carefully\nUse it strategically: Syntax help yes, thinking replacement no\nGet free access: GitHub Student Developer Pack\nPractice:The more you use it, the more helpful it becomes\n\n. . .\n\n\n\n\n\n\nBefore next lecture, make sure you applied for GitHub Student Developer Pack to get access to copilot!\n\n\n\n. . .\n\n\n\n\n\n\nIf you run into issues, we will solve them next week together!",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_copilot_intro.html#footnotes",
    "href": "lectures/lec_02_copilot_intro.html#footnotes",
    "title": "Lecture 2 - AI Programming",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.anthropic.com/research/tracing-thoughts-language-model↩︎\nThis can partially be improved by using context from the internet.↩︎\nUser can get attached to talking to models↩︎",
    "crumbs": [
      "02 Advances",
      "02 Generative AI"
    ]
  },
  {
    "objectID": "lectures/lec_02_presentation.html#using-ai-to-generate-code",
    "href": "lectures/lec_02_presentation.html#using-ai-to-generate-code",
    "title": "Lecture 2 - AI Programming",
    "section": "Using AI to generate code",
    "text": "Using AI to generate code\n\nCoding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#section",
    "href": "lectures/lec_02_presentation.html#section",
    "title": "Lecture 2 - AI Programming",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#large-language-models-llms",
    "href": "lectures/lec_02_presentation.html#large-language-models-llms",
    "title": "Lecture 2 - AI Programming",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#training-llms",
    "href": "lectures/lec_02_presentation.html#training-llms",
    "title": "Lecture 2 - AI Programming",
    "section": "Training LLMs",
    "text": "Training LLMs\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources\n\n\n\n\n\n\n\n\nUsing a trained model is called inference."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#pattern-recognition",
    "href": "lectures/lec_02_presentation.html#pattern-recognition",
    "title": "Lecture 2 - AI Programming",
    "section": "Pattern Recognition",
    "text": "Pattern Recognition\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)\n\n\n\n\n\n\n\n\nManaging context windows is crucial!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#probability-based-responses",
    "href": "lectures/lec_02_presentation.html#probability-based-responses",
    "title": "Lecture 2 - AI Programming",
    "section": "Probability based responses",
    "text": "Probability based responses\n\nAfter each written token, it predicts “what should come next?”\nLike a advanced version of the word prediction on your phone\nChooses the most likely next token based on training\nBut can’t actually “think” or “understand” like humans"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#limitations",
    "href": "lectures/lec_02_presentation.html#limitations",
    "title": "Lecture 2 - AI Programming",
    "section": "Limitations",
    "text": "Limitations\n\nNo true understanding of cause and effect1\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on2 and can reflect biases\nNo emotional understanding (but can simulate responses!)3\n\nhttps://www.anthropic.com/research/tracing-thoughts-language-modelThis can partially be improved by using context from the internet.User can get attached to talking to models"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#impact-on-jobs",
    "href": "lectures/lec_02_presentation.html#impact-on-jobs",
    "title": "Lecture 2 - AI Programming",
    "section": "Impact on Jobs",
    "text": "Impact on Jobs\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?\n\n\n\n\n\n\n\n\nIf you use free models, be aware that your prompts are going to be used by the providers and are not private. But for learning and experimenting, this should be no issue."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#a-great-overview-by-3blue1brown",
    "href": "lectures/lec_02_presentation.html#a-great-overview-by-3blue1brown",
    "title": "Lecture 2 - AI Programming",
    "section": "A Great Overview by 3Blue1Brown",
    "text": "A Great Overview by 3Blue1Brown\n\nGreg Sanderson provides an excellent explanation of LLMs\nGreat starting point to understand LLMs\nCheck out his YouTube channel, 3Blue1Brown for more"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#what-is-github-copilot",
    "href": "lectures/lec_02_presentation.html#what-is-github-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "What is GitHub Copilot?",
    "text": "What is GitHub Copilot?\nGitHub Copilot is an AI pair programmer that helps you write code faster and with less effort.\n\nThink of it as:\n\nAn autocomplete for entire lines or blocks of code\nA coding assistant that understands context\nA learning tool that shows you coding patterns\n\n\n\n\n\n\n\n\n\nCopilot uses AI trained on billions of lines of public code to suggest completions.\n\n\n\n\n\n\n\n\n\n\n\nThere are alternative like Zed or Cursor, but you can use Copilot for free as student."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#used-autocomplete-before",
    "href": "lectures/lec_02_presentation.html#used-autocomplete-before",
    "title": "Lecture 2 - AI Programming",
    "section": "Used autocomplete before?",
    "text": "Used autocomplete before?\n\nWhen you type on your phone, it suggests the next word.\n\n\nGitHub Copilot does the same for code:\n\nYou write a comment describing what you want\nCopilot suggests the code to do it\nYou accept, modify, or reject the suggestion\n\n\n\nIt’s autocomplete but much better then what you are used to"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#why-use-copilot",
    "href": "lectures/lec_02_presentation.html#why-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "Why Use Copilot?",
    "text": "Why Use Copilot?\nBenefits you while learning and working with Python:\n\nFaster coding: Less time typing boilerplate code\nLearn patterns: See how experienced programmers code\nUnderstand syntax: Get correct syntax without memorizing\nStay in flow: Focus on logic, not syntax errors\n\n\n\n\n\n\n\n\nEspecially helpful when you know WHAT you want to do but forget HOW to do it."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#when-should-you-use-copilot",
    "href": "lectures/lec_02_presentation.html#when-should-you-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When should you use Copilot?",
    "text": "When should you use Copilot?\n\nGood uses of Copilot\n\nUnderstanding Python syntax you forgot\nWriting repetitive or boilerplate code\nGetting unstuck on simple problems\nExploring different approaches"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#what-shouldnt-you-do-with-copilot",
    "href": "lectures/lec_02_presentation.html#what-shouldnt-you-do-with-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "What shouldn’t you do with Copilot?",
    "text": "What shouldn’t you do with Copilot?\n\nNot so good uses of Copilot\n\nReplacing learning fundamentals\nAccepting code you don’t understand\nSkipping practice exercises\nCopy-pasting without reading\n\n\n\nAlways understand what Copilot suggests before accepting!\n\n\nBut of course I know you will not do that ;)"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#demo-writing-a-function",
    "href": "lectures/lec_02_presentation.html#demo-writing-a-function",
    "title": "Lecture 2 - AI Programming",
    "section": "Demo: Writing a Function",
    "text": "Demo: Writing a Function\nScenario: Calculate shipping costs based on weight and distance.\n\nStep 1: Write a text describing what you want\n\"\"\"\nCalculate shipping cost based on weight (kg) and distance (km)\nBase rate: €5, plus €0.10 per kg, plus €0.05 per km\n\"\"\"\n\n\nStep 2: Copilot suggests the function\n\n\nWatch how Copilot solves this in the IDE!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#demo-the-result-hopefully",
    "href": "lectures/lec_02_presentation.html#demo-the-result-hopefully",
    "title": "Lecture 2 - AI Programming",
    "section": "Demo: The Result (hopefully)",
    "text": "Demo: The Result (hopefully)\n\ndef calculate_shipping_cost(weight, distance):\n    \"\"\"Calculate shipping cost based on weight and distance.\"\"\"\n    base_rate = 5.0\n    weight_rate = 0.10\n    distance_rate = 0.05\n    return base_rate + (weight * weight_rate) + (distance * distance_rate)\n\n\nWhat Copilot did:\n\nCreated function with proper parameters\nImplemented the calculation logic\nUsed clear variable names\n\n\n\n\n\n\n\n\n\nNotice how the text guided Copilot to generate exactly what we needed!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#accept-without-reading",
    "href": "lectures/lec_02_presentation.html#accept-without-reading",
    "title": "Lecture 2 - AI Programming",
    "section": "Accept without reading?",
    "text": "Accept without reading?\n\nCopilot might suggest code that:\n\nWorks but uses concepts you haven’t learned yet\nContains subtle bugs or edge cases\nDoesn’t match your specific requirements\nUses inefficient approaches\nIntroduce dangerous code in your project\n\n\n\n\n\n\n\n\n\nDangerous code can lead to security vulnerabilities, data loss, or other issues. In the context of this lecture it should be no issue, but in companies it can be one!"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#my-take-just-be-careful-ok",
    "href": "lectures/lec_02_presentation.html#my-take-just-be-careful-ok",
    "title": "Lecture 2 - AI Programming",
    "section": "My take: Just be careful, ok?",
    "text": "My take: Just be careful, ok?\nYour code, your responsibility:\n\nRead the suggestion carefully\nUnderstand what it does\nTest it with examples\nModify if needed\n\n\n\n\n\n\n\n\nDon’t accept code blindly, especially later if things are more complicated."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#get-free-access",
    "href": "lectures/lec_02_presentation.html#get-free-access",
    "title": "Lecture 2 - AI Programming",
    "section": "Get Free Access",
    "text": "Get Free Access\nGitHub Student Developer Pack gives you free Copilot access!\n\n\nGo to education.github.com/pack\nSign up with your university email\nVerify your student status\nWait for approval (usually 1-2 days)\nLogin into your account in VS Code\n\n\n\n\n\n\n\n\n\nYou’ll need a GitHub account. Create one at github.com if you don’t have one."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#verifying-copilot-is-working",
    "href": "lectures/lec_02_presentation.html#verifying-copilot-is-working",
    "title": "Lecture 2 - AI Programming",
    "section": "Verifying Copilot is Working",
    "text": "Verifying Copilot is Working\n\nCreate a new Python file (.py) and type something\nWait 1-2 seconds\n\n\nIf working, you’ll see:\n\nGray “ghost text” suggesting code\nPress Tab to accept\nPress Esc to reject\n\n\n\n\n\n\n\n\n\nTry to get copilot running on your own until next session."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#when-to-use-copilot",
    "href": "lectures/lec_02_presentation.html#when-to-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When to Use Copilot",
    "text": "When to Use Copilot\nUse Copilot for:\n\n1. Syntax Help\n# Convert string to datetime\n# Copilot remembers: pd.to_datetime()\n\n\n2. Boilerplate Code\n# Create a function to read CSV file and return DataFrame\n# Copilot writes the import and function structure\n\n\n3. Getting Unstuck\n# I know I need to filter this list, but forget the syntax\n# Copilot suggests: [x for x in items if x &gt; 10]"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#when-not-to-use-copilot",
    "href": "lectures/lec_02_presentation.html#when-not-to-use-copilot",
    "title": "Lecture 2 - AI Programming",
    "section": "When Not to Use Copilot",
    "text": "When Not to Use Copilot\nDon’t use Copilot for\n\n1. Learning Fundamentals\n\nYou should understand loops, functions, and data types\n\n\n\n2. Skipping Problem-Solving\n\nFigure out the logic first, then use Copilot for syntax\n\n\n\n3. Accepting Without Understanding\n\nAsk: “Can I explain what this code does?”"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#key-takeaways",
    "href": "lectures/lec_02_presentation.html#key-takeaways",
    "title": "Lecture 2 - AI Programming",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nGitHub Copilot is a tool: You still need to learn fundamentals\nUnderstand before accepting: Read every suggestion carefully\nUse it strategically: Syntax help yes, thinking replacement no\nGet free access: GitHub Student Developer Pack\nPractice:The more you use it, the more helpful it becomes\n\n\n\n\n\n\n\n\nBefore next lecture, make sure you applied for GitHub Student Developer Pack to get access to copilot!\n\n\n\n\n\n\n\n\n\n\n\nIf you run into issues, we will solve them next week together!"
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html",
    "href": "lectures/lec_04_monte_carlo.html",
    "title": "Dealing with Uncertainty",
    "section": "",
    "text": ". . .\nCEO’s Dilemma:\n“We have €2M to invest in 2 of 4 startups. Each promises great returns, but the future is uncertain. How do we make the best choice without just gambling?”\n\n\n\nQuestion: Why can’t we just pick the two startups with the highest average returns?\n. . .\n\n\nHidden Risk: A startup with 30% average return but 50% chance of failure might be worse than 20% return with 5% failure chance\nPortfolio Effects: Two risky startups together might amplify risk beyond acceptable levels\nTail Events: The worst-case scenario can matter as much as the average case\n\n\n. . .\n\n\n\n\n\n\nCommon Pitfall: Optimizing on averages ignores the distribution of outcomes.\n\n\n\n\n\n\nWhere uncertainty modeling is critical:\n\n\nNetflix Series Decisions\n\nWill a show hit 10M viewers?\nRange: 500K to 50M\nInvestment: €20M per season\n\n\nPharmaceutical R&D\n\nWill the drug pass trials?\nSuccess rate: 10-20%\nInvestment: €1B over 10 years\n\n\n\n. . .\n\n\n\n\n\n\nWhen decisions are expensive and outcomes are uncertain, Monte Carlo simulation can be helpful to reduce risk and maximize value!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#client-briefing-techventure-innovation-fund",
    "href": "lectures/lec_04_monte_carlo.html#client-briefing-techventure-innovation-fund",
    "title": "Dealing with Uncertainty",
    "section": "",
    "text": ". . .\nCEO’s Dilemma:\n“We have €2M to invest in 2 of 4 startups. Each promises great returns, but the future is uncertain. How do we make the best choice without just gambling?”",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#business-valuing-uncertainty",
    "href": "lectures/lec_04_monte_carlo.html#business-valuing-uncertainty",
    "title": "Dealing with Uncertainty",
    "section": "",
    "text": "Question: Why can’t we just pick the two startups with the highest average returns?\n. . .\n\n\nHidden Risk: A startup with 30% average return but 50% chance of failure might be worse than 20% return with 5% failure chance\nPortfolio Effects: Two risky startups together might amplify risk beyond acceptable levels\nTail Events: The worst-case scenario can matter as much as the average case\n\n\n. . .\n\n\n\n\n\n\nCommon Pitfall: Optimizing on averages ignores the distribution of outcomes.",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#real-world-examples",
    "href": "lectures/lec_04_monte_carlo.html#real-world-examples",
    "title": "Dealing with Uncertainty",
    "section": "",
    "text": "Where uncertainty modeling is critical:\n\n\nNetflix Series Decisions\n\nWill a show hit 10M viewers?\nRange: 500K to 50M\nInvestment: €20M per season\n\n\nPharmaceutical R&D\n\nWill the drug pass trials?\nSuccess rate: 10-20%\nInvestment: €1B over 10 years\n\n\n\n. . .\n\n\n\n\n\n\nWhen decisions are expensive and outcomes are uncertain, Monte Carlo simulation can be helpful to reduce risk and maximize value!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#rolling-the-dice-10000-times-i",
    "href": "lectures/lec_04_monte_carlo.html#rolling-the-dice-10000-times-i",
    "title": "Dealing with Uncertainty",
    "section": "Rolling the Dice 10,000 Times I",
    "text": "Rolling the Dice 10,000 Times I\nQuestion: If you roll two dice, what’s the probability of getting exactly 7 as result?\n. . .\nMethod 1: Math\n\nCount combinations: (1,6), (2,5), (3,4), (4,3), (5,2), (6,1)\nTotal combinations: 36\nProbability: 6/36 = 16.67%",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#rolling-the-dice-10000-times-ii",
    "href": "lectures/lec_04_monte_carlo.html#rolling-the-dice-10000-times-ii",
    "title": "Dealing with Uncertainty",
    "section": "Rolling the Dice 10,000 Times II",
    "text": "Rolling the Dice 10,000 Times II\nQuestion: If you roll two dice, what’s the probability of getting exactly 7 as result?\n. . .\nMethod 2: Simulation\n\nimport numpy as np\nnp.random.seed(42)\n\n# Roll two dice 10,000 times\ndice1 = np.random.randint(1, 7, size=10_000)\ndice2 = np.random.randint(1, 7, size=10_000)\ntotal = dice1 + dice2\n\n# What fraction equals 7?\nprobability = (total == 7).mean()\nprint(f\"Simulated probability of rolling 7: {probability:.1%}\")\n\nSimulated probability of rolling 7: 16.2%",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#how-probability-converges",
    "href": "lectures/lec_04_monte_carlo.html#how-probability-converges",
    "title": "Dealing with Uncertainty",
    "section": "How Probability Converges",
    "text": "How Probability Converges\n\n\n\n\n\n\n\n\n\n. . .\n\n\n\n\n\n\nAs we roll more dice, the estimated probability converges to the true value (16.7%)",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#the-law-of-large-numbers",
    "href": "lectures/lec_04_monte_carlo.html#the-law-of-large-numbers",
    "title": "Dealing with Uncertainty",
    "section": "The Law of Large Numbers",
    "text": "The Law of Large Numbers\nFundamental Principle: As sample size increases, sample average converges to the true expected value\n. . .\nIf \\(X_1, X_2, \\ldots, X_n\\) are independent random samples from the same distribution with mean \\(\\mu\\):\n\\[\\text{As } n \\to \\infty, \\quad \\bar{X}_n = \\frac{1}{n}\\sum_{i=1}^n X_i \\to \\mu\\]\n. . .\n\n\n\n\n\n\nThis is WHY simulations works. More simulations = better estimates!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#the-central-limit-theorem",
    "href": "lectures/lec_04_monte_carlo.html#the-central-limit-theorem",
    "title": "Dealing with Uncertainty",
    "section": "The Central Limit Theorem",
    "text": "The Central Limit Theorem\nAnother Fundamental Principle: The sum of many random variables tends toward a normal distribution\n. . .\nWhat it means:\n\nEven if individual returns are NOT normally distributed…\nThe portfolio of many assets WILL be approximately normal\nThe average of many simulations WILL be approximately normal\n\n. . .\n\n\n\n\n\n\nFor Business: This is why we can use normal distributions to model portfolio returns, even when individual assets have skewed or unusual distributions!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#why-this-matters-for-business",
    "href": "lectures/lec_04_monte_carlo.html#why-this-matters-for-business",
    "title": "Dealing with Uncertainty",
    "section": "Why This Matters for Business",
    "text": "Why This Matters for Business\nQuestion: How many simulations do we need for reliable results?\n. . .\n\n# Test convergence with different sample sizes\nsample_sizes = [10, 100, 1000, 10000, 100000]\nestimates = []\n\nfor n in sample_sizes:\n    dice1 = np.random.randint(1, 7, size=n)\n    dice2 = np.random.randint(1, 7, size=n)\n    total = dice1 + dice2\n    prob = (total == 7).mean()\n    estimates.append(prob)\n    print(f\"n={n:6d}: Estimated probability = {prob:.4f}\")\n\nn=    10: Estimated probability = 0.2000\nn=   100: Estimated probability = 0.1900\nn=  1000: Estimated probability = 0.1480\nn= 10000: Estimated probability = 0.1652\nn=100000: Estimated probability = 0.1670",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#practical-guidelines",
    "href": "lectures/lec_04_monte_carlo.html#practical-guidelines",
    "title": "Dealing with Uncertainty",
    "section": "Practical Guidelines",
    "text": "Practical Guidelines\nHow many simulations should you run?\n\n\nQuick exploration: 10,000 simulations\n\nGood for initial insights, prototyping\n\nCritical decisions: 100,000+ simulations\n\nFinancial risk models, regulatory compliance\n\nWhen to stop: When more simulations don’t change conclusion\n\n\n. . .\n\n\n\n\n\n\nIf your decision changes with 10x more simulations, you didn’t run enough!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#the-monte-carlo-method",
    "href": "lectures/lec_04_monte_carlo.html#the-monte-carlo-method",
    "title": "Dealing with Uncertainty",
    "section": "The Monte Carlo Method",
    "text": "The Monte Carlo Method\nThree Simple Steps:\n\n\nModel the Uncertainty:\n\nDefine probability distributions for unknown variables\n\nSimulate Many Scenarios:\n\nGenerate thousands of possible outcomes\n\nAnalyze the Results:\n\nCalculate statistics from the simulation\n\n\n\n. . .\n\n\n\n\n\n\nMonte Carlo Casino in Monaco inspired the method’s development in the 1940s.",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#step-1-model-the-uncertainty",
    "href": "lectures/lec_04_monte_carlo.html#step-1-model-the-uncertainty",
    "title": "Dealing with Uncertainty",
    "section": "Step 1: Model the Uncertainty",
    "text": "Step 1: Model the Uncertainty\nKey Function: np.random.normal(loc, scale, size)\n\nloc: The center (mean/average)\nscale: The spread (standard deviation)\nsize: How many samples to generate\n\n. . .\n\n# AI-Growth: average 38% return, ±25% volatility\nreturns = np.random.normal(loc=0.38, scale=0.25, size=10_000)\nprint(f\"Mean return: {returns.mean():.1%}\")\nprint(f\"Std deviation: {returns.std():.1%}\")\nprint(f\"Minimum: {returns.min():.1%}\")\nprint(f\"Maximum: {returns.max():.1%}\")\n\nMean return: 38.8%\nStd deviation: 24.8%\nMinimum: -67.0%\nMaximum: 125.7%",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#expected-returns",
    "href": "lectures/lec_04_monte_carlo.html#expected-returns",
    "title": "Dealing with Uncertainty",
    "section": "Expected Returns",
    "text": "Expected Returns\nLet’s calculate percentiles with np.percentile().\n. . .\nQuestion: Do you still know what a percentile is?\n. . .\n\nprint(f\"\\nPercentiles:\")\nprint(f\"  5th: {np.percentile(returns, 5):.1%} (worst 5% of scenarios)\")\nprint(f\" 25th: {np.percentile(returns, 25):.1%} (worst 25% of scenarios)\")\nprint(f\" 50th: {np.percentile(returns, 50):.1%} (median)\")\nprint(f\" 75th: {np.percentile(returns, 75):.1%} (best 25% of scenarios)\")\nprint(f\" 95th: {np.percentile(returns, 95):.1%} (best 5% of scenarios)\")\n\n\nPercentiles:\n  5th: -2.7% (worst 5% of scenarios)\n 25th: 22.1% (worst 25% of scenarios)\n 50th: 38.9% (median)\n 75th: 55.7% (best 25% of scenarios)\n 95th: 78.6% (best 5% of scenarios)",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#understanding-the-distribution",
    "href": "lectures/lec_04_monte_carlo.html#understanding-the-distribution",
    "title": "Dealing with Uncertainty",
    "section": "Understanding the Distribution",
    "text": "Understanding the Distribution\nQuestion: Before we plot, what shape do you expect for np.random.normal()?\n. . .",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#risk-analysis",
    "href": "lectures/lec_04_monte_carlo.html#risk-analysis",
    "title": "Dealing with Uncertainty",
    "section": "Risk Analysis",
    "text": "Risk Analysis\nQuestion: What’s the probability that AI-Growth loses money?\n. . .\n\n# Calculate risk metrics\nprob_loss = (returns &lt; 0).mean() # proportion of returns that are less than zero\nprob_double = (returns &gt; 1.0).mean()  # proportion greater than 100%\n\nprint(f\"Probability of loss: {prob_loss:.1%}\")\nprint(f\"Probability of doubling money: {prob_double:.1%}\")\n\nProbability of loss: 6.0%\nProbability of doubling money: 0.8%\n\n\n. . .\n\n\n\n\n\n\nWith 6 % chance of loss, AI-Growth is relatively safe. Easy for one startup, right?",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#different-distributions",
    "href": "lectures/lec_04_monte_carlo.html#different-distributions",
    "title": "Dealing with Uncertainty",
    "section": "Different Distributions",
    "text": "Different Distributions\nAttention: Not everything follows a normal distribution!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#overview",
    "href": "lectures/lec_04_monte_carlo.html#overview",
    "title": "Dealing with Uncertainty",
    "section": "Overview",
    "text": "Overview\n\nNormalUniformExponential\n\n\n\n# Most common in nature/business\n# Bell-shaped, symmetric\nreturns = np.random.normal(mean, std, size)\n\n# Example: CloudAI startup returns\ncloudai = np.random.normal(0.25, 0.15, 10000)  # 25% ± 15%\n\nMain Characteristics:\n\nSymmetric bell curve\nMost values cluster around mean\nCommon in nature and business\n\n\n\n\n# Equal probability across range\n# Example: FinFlow returns between 10-35%\nreturns = np.random.uniform(0.10, 0.35, size)\n\n# Example: FinFlow startup returns\nfinflow = np.random.uniform(0.10, 0.35, 10000)  # 10-35% equally likely\n\nMain Characteristics:\n\nAll values equally likely\nHard boundaries (min/max)\nGood for modeling complete uncertainty within range\n\n\n\n\n# Time between events\n# Example: Customer arrivals, equipment failure\ntimes = np.random.exponential(scale, size)\n\n# Example: Time between customer arrivals (minutes)\narrivals = np.random.exponential(5, 10000)  # Average 5 minutes\n\nMain Characteristics:\n\nMany small values, few large ones\nAlways positive\nCommon for waiting times and rare events",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#when-not-to-use-monte-carlo",
    "href": "lectures/lec_04_monte_carlo.html#when-not-to-use-monte-carlo",
    "title": "Dealing with Uncertainty",
    "section": "When NOT to Use Monte Carlo",
    "text": "When NOT to Use Monte Carlo\nMonte Carlo is powerful, but not always the right tool:\n. . .\n\n\nYou have a simple analytical solution\n\nUse math directly: no need for 10,000 simulations!\n\nYou can’t reasonably estimate input distributions\n\nGarbage in = garbage out, need basis for assumptions\n\nThe problem is deterministic (no uncertainty)\n\nSimulation adds complexity without value\n\n\n\n. . .\n\n\n\n\n\n\nSimulation is a tool for managing uncertainty, not creating false precision!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#combining-investments",
    "href": "lectures/lec_04_monte_carlo.html#combining-investments",
    "title": "Dealing with Uncertainty",
    "section": "Combining Investments",
    "text": "Combining Investments\nSuppose we have the following startups:\nCloudAI, GreenGrid, HealthTrack, FinFlow\n. . .\nQuestion: If we must pick 2 of 4, how many unique pairs exist?\n. . .\nThe Math:\n\\[\\binom{4}{2} = \\frac{4!}{2! \\times 2!} = \\frac{4 \\times 3 \\times 2 \\times 1}{(2 \\times 1) \\times (2 \\times 1)} = \\frac{24}{4} = 6\\]\n. . .\n\n\n\n\n\n\nEach combination has different risk-return characteristics!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#four-startup-profiles",
    "href": "lectures/lec_04_monte_carlo.html#four-startup-profiles",
    "title": "Dealing with Uncertainty",
    "section": "Four Startup Profiles",
    "text": "Four Startup Profiles\n\n\n\n\n\n\n\n\n\n. . .\nQuestion: Which startup is the best choice?",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#key-metrics-for-decision-making",
    "href": "lectures/lec_04_monte_carlo.html#key-metrics-for-decision-making",
    "title": "Dealing with Uncertainty",
    "section": "Key Metrics for Decision Making",
    "text": "Key Metrics for Decision Making\nQuestion: Which metrics matter most for investment decisions?\n\n\nExpected Return: Average outcome across all scenarios\nVolatility (Risk): Standard deviation of returns\nProbability of Loss: How often do we lose money?\nUpside Potential: Chance of exceptional returns (&gt;50%)\nTail Risk: What happens in the worst 10% of cases?\n\n\n. . .\n\n\n\n\n\n\nNo metric tells the whole story. Investors consider multiple dimensions of risk and return.",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#understanding-tail-risk",
    "href": "lectures/lec_04_monte_carlo.html#understanding-tail-risk",
    "title": "Dealing with Uncertainty",
    "section": "Understanding Tail Risk",
    "text": "Understanding Tail Risk\nTail Risk: The danger lurking in worst-case scenarios\nExpected Shortfall (ES)\n\nAverage loss in worst X% of cases\nGoes beyond simple probability\nMeasures depth of potential losses\nCritical for risk management\n\n. . .\n\n\n\n\n\n\nA portfolio with higher average returns might have catastrophic tail risk. Always look at the extremes!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#the-independence-assumption",
    "href": "lectures/lec_04_monte_carlo.html#the-independence-assumption",
    "title": "Dealing with Uncertainty",
    "section": "The Independence Assumption",
    "text": "The Independence Assumption\nSo far, we’ve assumed startups succeed or fail independently.\n. . .\nIndependent Events:\n\nCloudAI’s success doesn’t affect GreenGrid’s success\nEach startup faces separate, unrelated risks\nPortfolio risk = Average of individual risks\n\n. . .\nQuestion: Is this realistic in the real world?\n. . .\n\n\n\n\n\n\nReality Check: Many business risks are correlated! Economic downturns, market trends, and technology shifts affect multiple companies simultaneously.",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#what-is-correlation",
    "href": "lectures/lec_04_monte_carlo.html#what-is-correlation",
    "title": "Dealing with Uncertainty",
    "section": "What is Correlation?",
    "text": "What is Correlation?\nCorrelation measures how two variables move together.\n\\[\\rho_{X,Y} = \\frac{\\text{Cov}(X,Y)}{\\sigma_X \\sigma_Y} \\quad \\text{where } -1 \\leq \\rho \\leq 1\\]\n. . .\nInterpreting Correlation:\n\nρ = +1: Perfect positive correlation (move together)\nρ = 0: No correlation (independent)\nρ = -1: Perfect negative correlation (move opposite)",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#correlation-in-practice",
    "href": "lectures/lec_04_monte_carlo.html#correlation-in-practice",
    "title": "Dealing with Uncertainty",
    "section": "Correlation in Practice",
    "text": "Correlation in Practice\n\n\n\n\n\n\n\n\n\n. . .\n\n\n\n\n\n\nIn Python: np.corrcoef(returns1, returns2) calculates correlation",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#why-correlation-matters",
    "href": "lectures/lec_04_monte_carlo.html#why-correlation-matters",
    "title": "Dealing with Uncertainty",
    "section": "Why Correlation Matters",
    "text": "Why Correlation Matters\nTwo AI startups in your portfolio:\nScenario 1: Independent (ρ = 0)\n\nOne fails due to technical issues, other succeeds\nRisk is averaged out\n\nScenario 2: Positively Correlated (ρ = 0.8)\n\nBoth rely on same AI infrastructure provider - risk is amplified!\n\n. . .\n\n\n\n\n\n\nDiversification only reduces risk when investments are not highly correlated!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#impact-on-portfolio-risk",
    "href": "lectures/lec_04_monte_carlo.html#impact-on-portfolio-risk",
    "title": "Dealing with Uncertainty",
    "section": "Impact on Portfolio Risk",
    "text": "Impact on Portfolio Risk\n\n\n\n\n\n\n\n\n\n. . .\n\n\n\n\n\n\nHigher correlation = Wider distribution = More risk!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#real-world-correlation-examples",
    "href": "lectures/lec_04_monte_carlo.html#real-world-correlation-examples",
    "title": "Dealing with Uncertainty",
    "section": "Real-World Correlation Examples",
    "text": "Real-World Correlation Examples\nCommon sources of correlation in business:\n\n\nIndustry-specific: All tech startups affected by downturn\nGeographic: All European companies affected by EU regulations\nSupply chain: Multiple companies relying on same supplier\nMacroeconomic: Interest rates, inflation affect most businesses\n\n\n. . .\n\n\n\n\n\n\nDiversification: Choose investments with LOW correlation to reduce portfolio risk!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#when-diversification-fails",
    "href": "lectures/lec_04_monte_carlo.html#when-diversification-fails",
    "title": "Dealing with Uncertainty",
    "section": "When Diversification Fails",
    "text": "When Diversification Fails\n\n\n\n\n\n\n\n\n\n. . .\n\n\n\n\n\n\n2008 Financial Crisis: Many “diversified” portfolios collapsed due to correlations!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#decision-framework",
    "href": "lectures/lec_04_monte_carlo.html#decision-framework",
    "title": "Dealing with Uncertainty",
    "section": "Decision Framework",
    "text": "Decision Framework\n\nDefine Your Risk Tolerance\n\nCan you afford to lose money and what’s your time horizon?\nAre you risk-averse or risk-seeking?\n\nEvaluate Multiple Metrics\n\nDon’t just maximize returns, consider volatility and risk\nLook at probability of achieving goals\n\nScenario Test\n\nWhat if distributions change or a company fails?",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#the-plan-for-the-day",
    "href": "lectures/lec_04_monte_carlo.html#the-plan-for-the-day",
    "title": "Dealing with Uncertainty",
    "section": "The Plan for the Day",
    "text": "The Plan for the Day\n\n\nHour 1:\nLecture\n\nConcepts\nExamples\nVisualization\n\n\nHour 2:\nPractice Notebook\n\nSimulation\nHands-on coding\nBuild your skills\n\n\nHours 3-4:\nCompetition\n\nTechVenture\nTeam collaboration\n€2M investment\n\n\n\n. . .\nRemember: The lecture gives you concepts. The notebook gives you practice. The competition tests your skills!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#hour-2-simulation",
    "href": "lectures/lec_04_monte_carlo.html#hour-2-simulation",
    "title": "Dealing with Uncertainty",
    "section": "Hour 2: Simulation",
    "text": "Hour 2: Simulation\nYour Practice Case: Bean Counter Expansion\n\nModel uncertain variables (customers, spending)\nCombine multiple uncertainties\nCalculate business metrics (VaR, profit probability)\nMake data-driven recommendations",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#hours-3-4-the-challenge",
    "href": "lectures/lec_04_monte_carlo.html#hours-3-4-the-challenge",
    "title": "Dealing with Uncertainty",
    "section": "Hours 3-4: The Challenge",
    "text": "Hours 3-4: The Challenge\nTechVenture Investment Competition\n\n\nYour Budget: €2 million\nYour Choice: Pick 2 of 4 startups\nYour Goal: Maximize risk-adjusted returns\nYour Deliverable: One-slide recommendation + 3-minute pitch\n\n\n. . .\n\nConsider multiple risk metrics and prepare a clear justification!\n\n. . .\nPrizes: 10 / 6 / 3 bonus points for top three teams!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#what-youve-learned-today",
    "href": "lectures/lec_04_monte_carlo.html#what-youve-learned-today",
    "title": "Dealing with Uncertainty",
    "section": "What You’ve Learned Today",
    "text": "What You’ve Learned Today\n\n\nConcepts\n\nMonte Carlo simulation\nProbability distributions\nRisk has multiple dimensions\nExpected Value vs. Variance\nCorrelation and dependence\n\n\nSkills\n\nUsing np.random for simulation\nCalculating risk metrics\nVisualizing uncertainty\nComparing portfolios\nUnderstanding correlation\n\n\n\n. . .\n\n\n\n\n\n\nMonte Carlo doesn’t predict THE future - it shows possible futures! And correlation can amplify or reduce risk!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_monte_carlo.html#next-week",
    "href": "lectures/lec_04_monte_carlo.html#next-week",
    "title": "Dealing with Uncertainty",
    "section": "Next Week",
    "text": "Next Week\nForecasting the Future\n\nMoving from simulation to prediction\nTime series analysis\nTrend and seasonality detection\nMeasuring forecast accuracy\n\n. . .\nNow, short break and then we start coding!",
    "crumbs": [
      "04 Monte Carlo",
      "04 Concepts"
    ]
  },
  {
    "objectID": "lectures/lec_04_presentation.html#client-briefing-techventure-innovation-fund",
    "href": "lectures/lec_04_presentation.html#client-briefing-techventure-innovation-fund",
    "title": "Dealing with Uncertainty",
    "section": "Client Briefing: TechVenture Innovation Fund",
    "text": "Client Briefing: TechVenture Innovation Fund\n\nCEO’s Dilemma:\n“We have €2M to invest in 2 of 4 startups. Each promises great returns, but the future is uncertain. How do we make the best choice without just gambling?”"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#business-valuing-uncertainty",
    "href": "lectures/lec_04_presentation.html#business-valuing-uncertainty",
    "title": "Dealing with Uncertainty",
    "section": "Business: Valuing Uncertainty",
    "text": "Business: Valuing Uncertainty\nQuestion: Why can’t we just pick the two startups with the highest average returns?\n\n\nHidden Risk: A startup with 30% average return but 50% chance of failure might be worse than 20% return with 5% failure chance\nPortfolio Effects: Two risky startups together might amplify risk beyond acceptable levels\nTail Events: The worst-case scenario can matter as much as the average case\n\n\n\n\n\n\n\n\n\nCommon Pitfall: Optimizing on averages ignores the distribution of outcomes."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#real-world-examples",
    "href": "lectures/lec_04_presentation.html#real-world-examples",
    "title": "Dealing with Uncertainty",
    "section": "Real-World Examples",
    "text": "Real-World Examples\nWhere uncertainty modeling is critical:\n\n\nNetflix Series Decisions\n\nWill a show hit 10M viewers?\nRange: 500K to 50M\nInvestment: €20M per season\n\n\nPharmaceutical R&D\n\nWill the drug pass trials?\nSuccess rate: 10-20%\nInvestment: €1B over 10 years\n\n\n\n\n\n\n\n\n\nWhen decisions are expensive and outcomes are uncertain, Monte Carlo simulation can be helpful to reduce risk and maximize value!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#rolling-the-dice-10000-times-i",
    "href": "lectures/lec_04_presentation.html#rolling-the-dice-10000-times-i",
    "title": "Dealing with Uncertainty",
    "section": "Rolling the Dice 10,000 Times I",
    "text": "Rolling the Dice 10,000 Times I\nQuestion: If you roll two dice, what’s the probability of getting exactly 7 as result?\n\nMethod 1: Math\n\nCount combinations: (1,6), (2,5), (3,4), (4,3), (5,2), (6,1)\nTotal combinations: 36\nProbability: 6/36 = 16.67%"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#rolling-the-dice-10000-times-ii",
    "href": "lectures/lec_04_presentation.html#rolling-the-dice-10000-times-ii",
    "title": "Dealing with Uncertainty",
    "section": "Rolling the Dice 10,000 Times II",
    "text": "Rolling the Dice 10,000 Times II\nQuestion: If you roll two dice, what’s the probability of getting exactly 7 as result?\n\nMethod 2: Simulation\n\nimport numpy as np\nnp.random.seed(42)\n\n# Roll two dice 10,000 times\ndice1 = np.random.randint(1, 7, size=10_000)\ndice2 = np.random.randint(1, 7, size=10_000)\ntotal = dice1 + dice2\n\n# What fraction equals 7?\nprobability = (total == 7).mean()\nprint(f\"Simulated probability of rolling 7: {probability:.1%}\")\n\n\n\nSimulated probability of rolling 7: 16.2%"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#how-probability-converges",
    "href": "lectures/lec_04_presentation.html#how-probability-converges",
    "title": "Dealing with Uncertainty",
    "section": "How Probability Converges",
    "text": "How Probability Converges\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs we roll more dice, the estimated probability converges to the true value (16.7%)"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-law-of-large-numbers",
    "href": "lectures/lec_04_presentation.html#the-law-of-large-numbers",
    "title": "Dealing with Uncertainty",
    "section": "The Law of Large Numbers",
    "text": "The Law of Large Numbers\nFundamental Principle: As sample size increases, sample average converges to the true expected value\n\nIf \\(X_1, X_2, \\ldots, X_n\\) are independent random samples from the same distribution with mean \\(\\mu\\):\n\\[\\text{As } n \\to \\infty, \\quad \\bar{X}_n = \\frac{1}{n}\\sum_{i=1}^n X_i \\to \\mu\\]\n\n\n\n\n\n\n\n\nThis is WHY simulations works. More simulations = better estimates!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-central-limit-theorem",
    "href": "lectures/lec_04_presentation.html#the-central-limit-theorem",
    "title": "Dealing with Uncertainty",
    "section": "The Central Limit Theorem",
    "text": "The Central Limit Theorem\nAnother Fundamental Principle: The sum of many random variables tends toward a normal distribution\n\nWhat it means:\n\nEven if individual returns are NOT normally distributed…\nThe portfolio of many assets WILL be approximately normal\nThe average of many simulations WILL be approximately normal\n\n\n\n\n\n\n\n\n\nFor Business: This is why we can use normal distributions to model portfolio returns, even when individual assets have skewed or unusual distributions!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#why-this-matters-for-business",
    "href": "lectures/lec_04_presentation.html#why-this-matters-for-business",
    "title": "Dealing with Uncertainty",
    "section": "Why This Matters for Business",
    "text": "Why This Matters for Business\nQuestion: How many simulations do we need for reliable results?\n\n\n# Test convergence with different sample sizes\nsample_sizes = [10, 100, 1000, 10000, 100000]\nestimates = []\n\nfor n in sample_sizes:\n    dice1 = np.random.randint(1, 7, size=n)\n    dice2 = np.random.randint(1, 7, size=n)\n    total = dice1 + dice2\n    prob = (total == 7).mean()\n    estimates.append(prob)\n    print(f\"n={n:6d}: Estimated probability = {prob:.4f}\")\n\n\n\nn=    10: Estimated probability = 0.2000\nn=   100: Estimated probability = 0.1900\nn=  1000: Estimated probability = 0.1480\nn= 10000: Estimated probability = 0.1652\nn=100000: Estimated probability = 0.1670"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#practical-guidelines",
    "href": "lectures/lec_04_presentation.html#practical-guidelines",
    "title": "Dealing with Uncertainty",
    "section": "Practical Guidelines",
    "text": "Practical Guidelines\nHow many simulations should you run?\n\nQuick exploration: 10,000 simulations\n\nGood for initial insights, prototyping\n\nCritical decisions: 100,000+ simulations\n\nFinancial risk models, regulatory compliance\n\nWhen to stop: When more simulations don’t change conclusion\n\n\n\n\n\n\n\n\nIf your decision changes with 10x more simulations, you didn’t run enough!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-monte-carlo-method",
    "href": "lectures/lec_04_presentation.html#the-monte-carlo-method",
    "title": "Dealing with Uncertainty",
    "section": "The Monte Carlo Method",
    "text": "The Monte Carlo Method\nThree Simple Steps:\n\nModel the Uncertainty:\n\nDefine probability distributions for unknown variables\n\nSimulate Many Scenarios:\n\nGenerate thousands of possible outcomes\n\nAnalyze the Results:\n\nCalculate statistics from the simulation\n\n\n\n\n\n\n\n\n\nMonte Carlo Casino in Monaco inspired the method’s development in the 1940s."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#step-1-model-the-uncertainty",
    "href": "lectures/lec_04_presentation.html#step-1-model-the-uncertainty",
    "title": "Dealing with Uncertainty",
    "section": "Step 1: Model the Uncertainty",
    "text": "Step 1: Model the Uncertainty\nKey Function: np.random.normal(loc, scale, size)\n\nloc: The center (mean/average)\nscale: The spread (standard deviation)\nsize: How many samples to generate\n\n\n\n# AI-Growth: average 38% return, ±25% volatility\nreturns = np.random.normal(loc=0.38, scale=0.25, size=10_000)\nprint(f\"Mean return: {returns.mean():.1%}\")\nprint(f\"Std deviation: {returns.std():.1%}\")\nprint(f\"Minimum: {returns.min():.1%}\")\nprint(f\"Maximum: {returns.max():.1%}\")\n\n\n\nMean return: 38.8%\nStd deviation: 24.8%\nMinimum: -67.0%\nMaximum: 125.7%"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#expected-returns",
    "href": "lectures/lec_04_presentation.html#expected-returns",
    "title": "Dealing with Uncertainty",
    "section": "Expected Returns",
    "text": "Expected Returns\nLet’s calculate percentiles with np.percentile().\n\nQuestion: Do you still know what a percentile is?\n\n\n\nprint(f\"\\nPercentiles:\")\nprint(f\"  5th: {np.percentile(returns, 5):.1%} (worst 5% of scenarios)\")\nprint(f\" 25th: {np.percentile(returns, 25):.1%} (worst 25% of scenarios)\")\nprint(f\" 50th: {np.percentile(returns, 50):.1%} (median)\")\nprint(f\" 75th: {np.percentile(returns, 75):.1%} (best 25% of scenarios)\")\nprint(f\" 95th: {np.percentile(returns, 95):.1%} (best 5% of scenarios)\")\n\n\n\n\nPercentiles:\n  5th: -2.7% (worst 5% of scenarios)\n 25th: 22.1% (worst 25% of scenarios)\n 50th: 38.9% (median)\n 75th: 55.7% (best 25% of scenarios)\n 95th: 78.6% (best 5% of scenarios)"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#understanding-the-distribution",
    "href": "lectures/lec_04_presentation.html#understanding-the-distribution",
    "title": "Dealing with Uncertainty",
    "section": "Understanding the Distribution",
    "text": "Understanding the Distribution\nQuestion: Before we plot, what shape do you expect for np.random.normal()?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#risk-analysis",
    "href": "lectures/lec_04_presentation.html#risk-analysis",
    "title": "Dealing with Uncertainty",
    "section": "Risk Analysis",
    "text": "Risk Analysis\nQuestion: What’s the probability that AI-Growth loses money?\n\n\n# Calculate risk metrics\nprob_loss = (returns &lt; 0).mean() # proportion of returns that are less than zero\nprob_double = (returns &gt; 1.0).mean()  # proportion greater than 100%\n\nprint(f\"Probability of loss: {prob_loss:.1%}\")\nprint(f\"Probability of doubling money: {prob_double:.1%}\")\n\n\n\nProbability of loss: 6.0%\nProbability of doubling money: 0.8%\n\n\n\n\n\n\n\n\n\n\nWith 6 % chance of loss, AI-Growth is relatively safe. Easy for one startup, right?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#different-distributions",
    "href": "lectures/lec_04_presentation.html#different-distributions",
    "title": "Dealing with Uncertainty",
    "section": "Different Distributions",
    "text": "Different Distributions\nAttention: Not everything follows a normal distribution!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#overview",
    "href": "lectures/lec_04_presentation.html#overview",
    "title": "Dealing with Uncertainty",
    "section": "Overview",
    "text": "Overview\n\nNormalUniformExponential\n\n\n\n# Most common in nature/business\n# Bell-shaped, symmetric\nreturns = np.random.normal(mean, std, size)\n\n# Example: CloudAI startup returns\ncloudai = np.random.normal(0.25, 0.15, 10000)  # 25% ± 15%\n\nMain Characteristics:\n\nSymmetric bell curve\nMost values cluster around mean\nCommon in nature and business\n\n\n\n\n# Equal probability across range\n# Example: FinFlow returns between 10-35%\nreturns = np.random.uniform(0.10, 0.35, size)\n\n# Example: FinFlow startup returns\nfinflow = np.random.uniform(0.10, 0.35, 10000)  # 10-35% equally likely\n\nMain Characteristics:\n\nAll values equally likely\nHard boundaries (min/max)\nGood for modeling complete uncertainty within range\n\n\n\n\n# Time between events\n# Example: Customer arrivals, equipment failure\ntimes = np.random.exponential(scale, size)\n\n# Example: Time between customer arrivals (minutes)\narrivals = np.random.exponential(5, 10000)  # Average 5 minutes\n\nMain Characteristics:\n\nMany small values, few large ones\nAlways positive\nCommon for waiting times and rare events"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#when-not-to-use-monte-carlo",
    "href": "lectures/lec_04_presentation.html#when-not-to-use-monte-carlo",
    "title": "Dealing with Uncertainty",
    "section": "When NOT to Use Monte Carlo",
    "text": "When NOT to Use Monte Carlo\nMonte Carlo is powerful, but not always the right tool:\n\n\nYou have a simple analytical solution\n\nUse math directly: no need for 10,000 simulations!\n\nYou can’t reasonably estimate input distributions\n\nGarbage in = garbage out, need basis for assumptions\n\nThe problem is deterministic (no uncertainty)\n\nSimulation adds complexity without value\n\n\n\n\n\n\n\n\n\n\nSimulation is a tool for managing uncertainty, not creating false precision!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#combining-investments",
    "href": "lectures/lec_04_presentation.html#combining-investments",
    "title": "Dealing with Uncertainty",
    "section": "Combining Investments",
    "text": "Combining Investments\nSuppose we have the following startups:\nCloudAI, GreenGrid, HealthTrack, FinFlow\n\nQuestion: If we must pick 2 of 4, how many unique pairs exist?\n\n\nThe Math:\n\\[\\binom{4}{2} = \\frac{4!}{2! \\times 2!} = \\frac{4 \\times 3 \\times 2 \\times 1}{(2 \\times 1) \\times (2 \\times 1)} = \\frac{24}{4} = 6\\]\n\n\n\n\n\n\n\n\nEach combination has different risk-return characteristics!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#four-startup-profiles",
    "href": "lectures/lec_04_presentation.html#four-startup-profiles",
    "title": "Dealing with Uncertainty",
    "section": "Four Startup Profiles",
    "text": "Four Startup Profiles\n\n\n\n\n\n\n\n\n\n\nQuestion: Which startup is the best choice?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#key-metrics-for-decision-making",
    "href": "lectures/lec_04_presentation.html#key-metrics-for-decision-making",
    "title": "Dealing with Uncertainty",
    "section": "Key Metrics for Decision Making",
    "text": "Key Metrics for Decision Making\nQuestion: Which metrics matter most for investment decisions?\n\nExpected Return: Average outcome across all scenarios\nVolatility (Risk): Standard deviation of returns\nProbability of Loss: How often do we lose money?\nUpside Potential: Chance of exceptional returns (&gt;50%)\nTail Risk: What happens in the worst 10% of cases?\n\n\n\n\n\n\n\n\nNo metric tells the whole story. Investors consider multiple dimensions of risk and return."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#understanding-tail-risk",
    "href": "lectures/lec_04_presentation.html#understanding-tail-risk",
    "title": "Dealing with Uncertainty",
    "section": "Understanding Tail Risk",
    "text": "Understanding Tail Risk\nTail Risk: The danger lurking in worst-case scenarios\nExpected Shortfall (ES)\n\nAverage loss in worst X% of cases\nGoes beyond simple probability\nMeasures depth of potential losses\nCritical for risk management\n\n\n\n\n\n\n\n\nA portfolio with higher average returns might have catastrophic tail risk. Always look at the extremes!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-independence-assumption",
    "href": "lectures/lec_04_presentation.html#the-independence-assumption",
    "title": "Dealing with Uncertainty",
    "section": "The Independence Assumption",
    "text": "The Independence Assumption\nSo far, we’ve assumed startups succeed or fail independently.\n\nIndependent Events:\n\nCloudAI’s success doesn’t affect GreenGrid’s success\nEach startup faces separate, unrelated risks\nPortfolio risk = Average of individual risks\n\n\n\nQuestion: Is this realistic in the real world?\n\n\n\n\n\n\n\n\nReality Check: Many business risks are correlated! Economic downturns, market trends, and technology shifts affect multiple companies simultaneously."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-is-correlation",
    "href": "lectures/lec_04_presentation.html#what-is-correlation",
    "title": "Dealing with Uncertainty",
    "section": "What is Correlation?",
    "text": "What is Correlation?\nCorrelation measures how two variables move together.\n\\[\\rho_{X,Y} = \\frac{\\text{Cov}(X,Y)}{\\sigma_X \\sigma_Y} \\quad \\text{where } -1 \\leq \\rho \\leq 1\\]\n\nInterpreting Correlation:\n\nρ = +1: Perfect positive correlation (move together)\nρ = 0: No correlation (independent)\nρ = -1: Perfect negative correlation (move opposite)"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#correlation-in-practice",
    "href": "lectures/lec_04_presentation.html#correlation-in-practice",
    "title": "Dealing with Uncertainty",
    "section": "Correlation in Practice",
    "text": "Correlation in Practice\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Python: np.corrcoef(returns1, returns2) calculates correlation"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#why-correlation-matters",
    "href": "lectures/lec_04_presentation.html#why-correlation-matters",
    "title": "Dealing with Uncertainty",
    "section": "Why Correlation Matters",
    "text": "Why Correlation Matters\nTwo AI startups in your portfolio:\nScenario 1: Independent (ρ = 0)\n\nOne fails due to technical issues, other succeeds\nRisk is averaged out\n\nScenario 2: Positively Correlated (ρ = 0.8)\n\nBoth rely on same AI infrastructure provider - risk is amplified!\n\n\n\n\n\n\n\n\nDiversification only reduces risk when investments are not highly correlated!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#impact-on-portfolio-risk",
    "href": "lectures/lec_04_presentation.html#impact-on-portfolio-risk",
    "title": "Dealing with Uncertainty",
    "section": "Impact on Portfolio Risk",
    "text": "Impact on Portfolio Risk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHigher correlation = Wider distribution = More risk!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#real-world-correlation-examples",
    "href": "lectures/lec_04_presentation.html#real-world-correlation-examples",
    "title": "Dealing with Uncertainty",
    "section": "Real-World Correlation Examples",
    "text": "Real-World Correlation Examples\nCommon sources of correlation in business:\n\nIndustry-specific: All tech startups affected by downturn\nGeographic: All European companies affected by EU regulations\nSupply chain: Multiple companies relying on same supplier\nMacroeconomic: Interest rates, inflation affect most businesses\n\n\n\n\n\n\n\n\nDiversification: Choose investments with LOW correlation to reduce portfolio risk!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#when-diversification-fails",
    "href": "lectures/lec_04_presentation.html#when-diversification-fails",
    "title": "Dealing with Uncertainty",
    "section": "When Diversification Fails",
    "text": "When Diversification Fails\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2008 Financial Crisis: Many “diversified” portfolios collapsed due to correlations!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#decision-framework",
    "href": "lectures/lec_04_presentation.html#decision-framework",
    "title": "Dealing with Uncertainty",
    "section": "Decision Framework",
    "text": "Decision Framework\n\nDefine Your Risk Tolerance\n\nCan you afford to lose money and what’s your time horizon?\nAre you risk-averse or risk-seeking?\n\nEvaluate Multiple Metrics\n\nDon’t just maximize returns, consider volatility and risk\nLook at probability of achieving goals\n\nScenario Test\n\nWhat if distributions change or a company fails?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-plan-for-the-day",
    "href": "lectures/lec_04_presentation.html#the-plan-for-the-day",
    "title": "Dealing with Uncertainty",
    "section": "The Plan for the Day",
    "text": "The Plan for the Day\n\n\nHour 1:\nLecture\n\nConcepts\nExamples\nVisualization\n\n\nHour 2:\nPractice Notebook\n\nSimulation\nHands-on coding\nBuild your skills\n\n\nHours 3-4:\nCompetition\n\nTechVenture\nTeam collaboration\n€2M investment\n\n\n\nRemember: The lecture gives you concepts. The notebook gives you practice. The competition tests your skills!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#hour-2-simulation",
    "href": "lectures/lec_04_presentation.html#hour-2-simulation",
    "title": "Dealing with Uncertainty",
    "section": "Hour 2: Simulation",
    "text": "Hour 2: Simulation\nYour Practice Case: Bean Counter Expansion\n\nModel uncertain variables (customers, spending)\nCombine multiple uncertainties\nCalculate business metrics (VaR, profit probability)\nMake data-driven recommendations"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#hours-3-4-the-challenge",
    "href": "lectures/lec_04_presentation.html#hours-3-4-the-challenge",
    "title": "Dealing with Uncertainty",
    "section": "Hours 3-4: The Challenge",
    "text": "Hours 3-4: The Challenge\nTechVenture Investment Competition\n\nYour Budget: €2 million\nYour Choice: Pick 2 of 4 startups\nYour Goal: Maximize risk-adjusted returns\nYour Deliverable: One-slide recommendation + 3-minute pitch\n\n\n\nConsider multiple risk metrics and prepare a clear justification!\n\n\n\nPrizes: 10 / 6 / 3 bonus points for top three teams!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-youve-learned-today",
    "href": "lectures/lec_04_presentation.html#what-youve-learned-today",
    "title": "Dealing with Uncertainty",
    "section": "What You’ve Learned Today",
    "text": "What You’ve Learned Today\n\n\nConcepts\n\nMonte Carlo simulation\nProbability distributions\nRisk has multiple dimensions\nExpected Value vs. Variance\nCorrelation and dependence\n\n\nSkills\n\nUsing np.random for simulation\nCalculating risk metrics\nVisualizing uncertainty\nComparing portfolios\nUnderstanding correlation\n\n\n\n\n\n\n\n\n\nMonte Carlo doesn’t predict THE future - it shows possible futures! And correlation can amplify or reduce risk!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#next-week",
    "href": "lectures/lec_04_presentation.html#next-week",
    "title": "Dealing with Uncertainty",
    "section": "Next Week",
    "text": "Next Week\nForecasting the Future\n\nMoving from simulation to prediction\nTime series analysis\nTrend and seasonality detection\nMeasuring forecast accuracy\n\n\nNow, short break and then we start coding!"
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html",
    "href": "tutorials/nb_01_02_lists_loops.html",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "",
    "text": "Welcome to your second interactive Python tutorial!\nThe Weekly Sales Analyzer Problem\nYou’ve been promoted at Bean Counter coffee shop! The manager is impressed with your calculator skills and now wants you to analyze the shop’s sales data. Every day, the shop records its total sales, and at the end of the week, management needs to know: What was our best day? What’s our average? Are we improving?\nWith just variables, you’d need hundreds of them to track a month’s worth of data. That’s where lists and loops come in - they’re the perfect tools for handling collections of data!\nIn this tutorial, we’ll learn about lists and loops to build a sales analysis system that can handle any amount of data and give you insights at a glance.\n\n\n\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-1.1---create-your-sales-list",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-1.1---create-your-sales-list",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 1.1 - Create Your Sales List",
    "text": "Exercise 1.1 - Create Your Sales List\nCreate a list called weekend_sales with Saturday’s sales of $2340.50 and Sunday’s sales of $1890.25. Then access and store Sunday’s sales in a variable called sunday_total.\n\n\n\n\n\n\nRemember: Lists are indexed starting from 0, so Saturday is index 0 and Sunday is index 1.\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert weekend_sales == [2340.50, 1890.25], \"weekend_sales should be [2340.50, 1890.25]\"\nassert sunday_total == 1890.25, \"sunday_total should be 1890.25 (the second element)\"\nprint(\"Great! You've created your first list and accessed its elements!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-1.2---list-slicing",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-1.2---list-slicing",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 1.2 - List Slicing",
    "text": "Exercise 1.2 - List Slicing\nList slicing lets you grab multiple elements at once. Given the weekly sales:\nweek_sales = [1250.50, 1380.25, 1425.00, 1890.75, 2150.00, 2340.50, 1890.25]\nExtract:\n\nmidweek (Tuesday through Thursday - indices 1, 2, 3)\nlast_three (the last three days)\n\n\n# YOUR CODE BELOW\nweek_sales = [1250.50, 1380.25, 1425.00, 1890.75, 2150.00, 2340.50, 1890.25]\n\n\n\nCode\n# Test your answer\nassert midweek == [1380.25, 1425.00, 1890.75], \"midweek should contain Tuesday through Thursday\"\nassert last_three == [2150.00, 2340.50, 1890.25], \"last_three should contain the last three days\"\nprint(\"Excellent! You've mastered list slicing!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-2.1---building-a-customer-count-list",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-2.1---building-a-customer-count-list",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 2.1 - Building a Customer Count List",
    "text": "Exercise 2.1 - Building a Customer Count List\nStart with an empty list and build up hourly customer counts for the morning shift:\n\n8 AM: 15 customers\n9 AM: 32 customers\n10 AM: 28 customers\n11 AM: 41 customers\n\nAlso store the total number of hours tracked as hours_tracked.\n\n\n\n\n\n\nYou can use the len() function to find the length of the list.\n\n\n\n\ncustomer_counts = []\nhours_tracked = 0\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert customer_counts == [15, 32, 28, 41], \"customer_counts should be [15, 32, 28, 41]\"\nassert hours_tracked == 4, \"hours_tracked should be 4\"\nprint(\"Perfect! You can build lists dynamically and check their length!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-2.2---combining-lists",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-2.2---combining-lists",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 2.2 - Combining Lists",
    "text": "Exercise 2.2 - Combining Lists\nYou have morning and afternoon sales. Combine them into a full day’s record called full_day and compute the total number of transactions as total_transactions.\n\n\n\n\n\n\nTo combine lists, you can simply use the + operator.\n\n\n\n\nmorning_sales = [245.50, 189.25, 156.00]\nafternoon_sales = [312.75, 298.50, 401.25, 389.00]\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert full_day == [245.50, 189.25, 156.00, 312.75, 298.50, 401.25, 389.00], \"full_day should combine both lists\"\nassert total_transactions == 7, \"total_transactions should be 7\"\nprint(\"✓ Excellent! You can combine lists and track their size!\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#the-accumulation-pattern",
    "href": "tutorials/nb_01_02_lists_loops.html#the-accumulation-pattern",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "The Accumulation Pattern",
    "text": "The Accumulation Pattern\nOne of the most important patterns in programming is accumulation - building up a result by repeatedly adding to it. This is essential for calculating totals, averages, and counts.\n\n# Example: Calculate total of all sales\ndaily_sales = [245.50, 189.25, 312.75, 298.50]\n\n# Start with a total of 0\ntotal = 0\n\n# Add each sale to the running total\nfor sale in daily_sales:\n    total = total + sale  # This is the accumulation step!\n    print(f\"  Added ${sale}, running total: ${total}\")\n\nprint(f\"\\nFinal total: ${total}\")\n\n# We can also count items this way\ncount = 0\nfor sale in daily_sales:\n    count = count + 1\n\nprint(f\"Number of sales: {count}\")\n\n  Added $245.5, running total: $245.5\n  Added $189.25, running total: $434.75\n  Added $312.75, running total: $747.5\n  Added $298.5, running total: $1046.0\n\nFinal total: $1046.0\nNumber of sales: 4\n\n\n\n\n\n\n\n\nImportantAccumulation Pattern Steps:\n\n\n\n\nInitialize a variable to 0 (or empty list) before the loop\nUpdate the variable inside the loop (add, append, etc.)\nUse the final result after the loop completes\n\nThis pattern is fundamental to data analysis!",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-3.1---calculate-total-sales",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-3.1---calculate-total-sales",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 3.1 - Calculate Total Sales",
    "text": "Exercise 3.1 - Calculate Total Sales\nCalculate the total of all prices in a list and also count how many items there are.\n\nprices = [15.99, 24.50, 8.75, 32.00, 19.99, 45.25]\ntotal_cost = 0\nitem_count = 0\n\n# Use a for loop to:\n#   - Add each price to total_cost\n#   - Increment item_count by 1 each time\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert abs(total_cost - 146.48) &lt; 0.01, \"total_cost should be 146.48\"\nassert item_count == 6, \"item_count should be 6\"\nprint(f\"Perfect! Total cost: ${total_cost:.2f} for {item_count} items\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-4.1---day-by-day-changes",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-4.1---day-by-day-changes",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 4.1 - Day-by-Day Changes",
    "text": "Exercise 4.1 - Day-by-Day Changes\nCalculate the change in sales from each day to the next and store them in a list.\n\nsales = [1250, 1380, 1125, 1890, 1650]\ndaily_changes = []\n\nprint(\"Day-to-day changes:\")\n# Use range(1, len(sales)) to start from index 1\n# For each day, calculate: sales[i] - sales[i-1]\n# Append each change to daily_changes\n# Print the change for each day\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nexpected_changes = [130, -255, 765, -240]\nassert daily_changes == expected_changes, f\"daily_changes should be {expected_changes}\"\nassert len(daily_changes) == 4, \"Should have 4 changes (for days 2-5)\"\nprint(\"Excellent! You calculated the daily changes correctly!\")\nprint(f\"Daily changes: {daily_changes}\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_01_02_lists_loops.html#exercise-5.1---customer-satisfaction-analysis",
    "href": "tutorials/nb_01_02_lists_loops.html#exercise-5.1---customer-satisfaction-analysis",
    "title": "Notebook 1.2 - Lists & Basic Loops",
    "section": "Exercise 5.1 - Customer Satisfaction Analysis",
    "text": "Exercise 5.1 - Customer Satisfaction Analysis\nCalculate the total of all ratings and the average rating. Also count how many total ratings there are.\n\n# YOUR CODE BELOW\nratings = [5, 4, 3, 5, 5, 2, 4, 5, 3, 4, 5, 5, 4, 3, 5]\n\n# Steps:\n# 1. Initialize total_rating to 0\n# 2. Initialize rating_count to 0\n# 3. Loop through ratings and:\n#    - Add each rating to total_rating\n#    - Increment rating_count\n# 4. Calculate average_rating = total_rating / rating_count\n\ntotal_rating = 0\nrating_count = 0\n\n# YOUR LOOP HERE\n\n\n\nCode\n# Test your answer\nassert total_rating == 62, \"total_rating should be 62\"\nassert rating_count == 15, \"rating_count should be 15\"\nassert abs(average_rating - 4.13) &lt; 0.01, \"average_rating should be approximately 4.13\"\nprint(\"✓ Perfect! You've mastered aggregation calculations!\")\nprint(f\"Total: {total_rating}, Count: {rating_count}, Average: {average_rating:.2f} stars\")",
    "crumbs": [
      "01 Let's Start",
      "NB-01-02 Lists"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html",
    "href": "tutorials/nb_02_01_functions.html",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "",
    "text": "Welcome to your new role at Bean Counter!\nCongratulations on your promotion to Assistant Manager!\nAfter your excellent work with inventory tracking and customer queue management, the CEO of Bean Counter has noticed your talent. She’s planning to expand from our flagship store to 10 locations across the city, and she needs your help!\nThe Challenge: Each of our baristas currently calculates prices, applies discounts, and prepares drinks their own way. This leads to:\n\nInconsistent pricing between stores\nErrors in discount calculations\nDifferent drink quality at each location\nFrustrated customers who get charged differently at each store\n\nYour Task: Create standardized functions that every Bean Counter location will use. These functions will ensure consistency, reduce errors, and make training new baristas much easier.\nIn this tutorial, we’ll learn how to use functions - reusable blocks of code that standardize operations across all Bean Counter locations.\n\n\n\n\n\n\nNoteHow to Use This Tutorial\n\n\n\nCells marked with “YOUR CODE BELOW” expect you to write your own code. Test blocks will verify your solutions.",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-1.1---standardize-drink-pricing",
    "href": "tutorials/nb_02_01_functions.html#exercise-1.1---standardize-drink-pricing",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 1.1 - Standardize Drink Pricing",
    "text": "Exercise 1.1 - Standardize Drink Pricing\nCreate a function called calculate_drink_price that takes the drink size and type, then returns the price.\nBean Counter’s pricing:\n\nEspresso: Medium $3.00, Large $3.50\nLatte: Medium $4.75, Large $5.50\nCappuccino: Medium $4.25, Large $5.00\n\n\n\n\n\n\n\nNoteBefore You Start\n\n\n\n\nUse if/elif statements to handle different drink types\nMake sure to return (not print) the price\nConsider what to return if an invalid drink type is given\n\n\n\n\n# YOUR CODE BELOW\ndef calculate_drink_price(size, drink_type):\n    # Your pricing logic here\n\n\n\nCode\n# Test your drink pricing function\nassert calculate_drink_price(\"large\", \"espresso\") == 3.50, \"Large espresso should be 3.50\"\nassert calculate_drink_price(\"medium\", \"latte\") == 4.75, \"Medium latte should be 4.75\"\nassert calculate_drink_price(\"large\", \"cappuccino\") == 5.00, \"Large cappuccino should be 5.00\"\nprint(\"Excellent! Your pricing function works perfectly. No more pricing chaos at Bean Counter!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-1.2---loyalty-points-calculator",
    "href": "tutorials/nb_02_01_functions.html#exercise-1.2---loyalty-points-calculator",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 1.2 - Loyalty Points Calculator",
    "text": "Exercise 1.2 - Loyalty Points Calculator\nBean Counter rewards customer loyalty! Create a function calculate_loyalty_points that takes the purchase amount and returns points earned.\nRules:\n\nCustomers earn 1 point per dollar spent (rounded down)\nPurchases over $10 earn 1.5x points\nPurchases over $20 earn 2x points\n\n\n\n\n\n\n\nIf you convert the purchase amount to an integer with int() before calculating points, you’ll get an integer (round number) that is rounded down.\n\n\n\n\n# YOUR CODE BELOW\ndef calculate_loyalty_points(purchase_amount):\n    # Calculate points based on purchase amount\n\n\n\nCode\n# Test your loyalty points calculator\nassert calculate_loyalty_points(5.50) == 5, \"Should earn 5 points for $5.50\"\nassert calculate_loyalty_points(12.00) == 18, \"Should earn 18 points for $12 (1.5x bonus)\"\nassert calculate_loyalty_points(25.00) == 50, \"Should earn 50 points for $25 (2x bonus)\"\nprint(\"Perfect! The loyalty program is now standardized across all locations!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-2.1---bean-freshness-checker",
    "href": "tutorials/nb_02_01_functions.html#exercise-2.1---bean-freshness-checker",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 2.1 - Bean Freshness Checker",
    "text": "Exercise 2.1 - Bean Freshness Checker\nCreate a function check_bean_freshness that determines if coffee beans are fresh enough to use.\nBean Counter’s freshness standards:\n\nBeans are fresh for 14 days after roasting\nBeans are acceptable for 21 days (but need manager approval)\nAfter 21 days, beans must be discarded\nReturn: “fresh”, “manager_approval”, or “discard”\n\n\n# YOUR CODE BELOW\ndef check_bean_freshness(days_since_roasting):\n    # Check freshness and return status as string\n\n\n\nCode\n# Test your freshness checker\nassert check_bean_freshness(10) == \"fresh\", \"10-day old beans should be fresh\"\nassert check_bean_freshness(18) == \"manager_approval\", \"18-day old beans need approval\"\nassert check_bean_freshness(25) == \"discard\", \"25-day old beans must be discarded\"\nprint(\"Excellent! Quality control is now standardized!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-2.2---smart-discount-function",
    "href": "tutorials/nb_02_01_functions.html#exercise-2.2---smart-discount-function",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 2.2 - Smart Discount Function",
    "text": "Exercise 2.2 - Smart Discount Function\nCreate a function apply_discount that applies Bean Counter’s discount policies:\n\nHappy hour (use 24-hour format): 15% off\nSenior discount (age 65+): 10% off\nStudent discount (with valid ID): 10% off\nDiscounts don’t stack - apply the best one!\n\nReturn the discounted price rounded to two decimals.\n\n\n\n\n\n\nTo round a number to two decimals, use the round() function. For example, to round the result of a division or multiplacation that results in 2.14159 to two decimals, use round(2.14159, 2).\n\n\n\n\n# YOUR CODE BELOW\ndef apply_discount(original_price, hour, is_senior, is_student):\n    # Apply the best available discount\n    # Tip: Use a variable to keep track of the best discount and start with the lowest\n\n\n\nCode\n# Test your discount function\nassert apply_discount(10.00, 16, False, False) == 8.50, \"Happy hour should give 15% off\"\nassert apply_discount(10.00, 12, True, False) == 9.00, \"Senior discount should give 10% off\"\nassert apply_discount(10.00, 16, True, False) == 8.50, \"Should apply best discount (happy hour 15%)\"\nassert apply_discount(10.00, 12, False, False) == 10.00, \"No discount applies\"\nprint(\"Great work! Your discount system is working perfectly!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-3.1---order-validation-system",
    "href": "tutorials/nb_02_01_functions.html#exercise-3.1---order-validation-system",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 3.1 - Order Validation System",
    "text": "Exercise 3.1 - Order Validation System\nCreate a function validate_order that checks if an order can be fulfilled:\n\nCheck bean freshness (use your check_bean_freshness function)\nVerify the drink type is valid (espresso, latte, or cappuccino)\nReturn a boolean (True or False) stating if we can_fulfill the order\n\n\n\n\n\n\n\nTipUsing Previous Functions\n\n\n\nYou can use the check_bean_freshness() function you created in Exercise 2.1. Just call it inside your new function!\n\n\n\n# YOUR CODE BELOW\ndef validate_order(drink_type, days_since_roasting):\n    # Validate the order and return can_fulfill\n\n\n\nCode\n# Test your validation system\nresult = validate_order(\"latte\", 10)\nassert result == True, \"Fresh beans should approve order\"\nresult = validate_order(\"espresso\", 19)\nassert result == True, \"Should need manager approval\"\nresult = validate_order(\"mocha\", 5)\nassert result == False, \"Should reject invalid drinks\"\nprint(\"Perfect! Your validation system ensures quality at every Bean Counter location!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-4.1---order-queue-manager",
    "href": "tutorials/nb_02_01_functions.html#exercise-4.1---order-queue-manager",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 4.1 - Order Queue Manager",
    "text": "Exercise 4.1 - Order Queue Manager\nCreate a function that manages Bean Counter’s morning rush order queue using list methods.\n\n# YOUR CODE BELOW\ndef manage_order_queue(current_queue, new_order, completed_order):\n    \"\"\"\n    Manage the order queue during morning rush\n    - Add new order to the end of queue\n    - Remove completed order from queue\n    - Return the updated queue length\n    \"\"\"\n    # Step 1: Add new_order to the queue using .append()\n\n    # Step 2: Remove completed_order from queue using .remove()\n\n    # Step 3: Return the queue length (use len() function)\n\n    return queue_length\n\n\n\nCode\n# Test queue manager\nqueue = [\"latte\", \"espresso\", \"cappuccino\"]\ninitial_length = len(queue)\n\n# First test\nlength1 = manage_order_queue(queue, \"americano\", \"latte\")\nassert \"americano\" in queue, \"Should add americano to queue\"\nassert \"latte\" not in queue, \"Should remove latte from queue\"\nassert length1 == 3, \"Queue should still have 3 items\"\n\n# Second test\nlength2 = manage_order_queue(queue, \"mocha\", \"espresso\")\nassert \"mocha\" in queue, \"Should add mocha to queue\"\nassert \"espresso\" not in queue, \"Should remove espresso from queue\"\nassert length2 == 3, \"Queue should still have 3 items\"\n\nprint(\"Excellent! Your order queue system keeps the morning rush flowing smoothly!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-5.1---daily-sales-analytics",
    "href": "tutorials/nb_02_01_functions.html#exercise-5.1---daily-sales-analytics",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 5.1 - Daily Sales Analytics",
    "text": "Exercise 5.1 - Daily Sales Analytics\nCreate a function analyze_daily_sales that takes a list of sale amounts and returns three values as a tuple:\n\nTotal sales for the day\nAverage sale amount\nNumber of transactions\n\n\n# YOUR CODE BELOW\ndef analyze_daily_sales(sales_list):\n    # Calculate and return (total, average, count) as tuple\n\n\n\nCode\n# Test your sales analytics function\nsales = [12.50, 8.75, 15.00, 6.25, 22.00]\ntotal, avg, count = analyze_daily_sales(sales)\nassert total == 64.50, \"Total should be $64.50\"\nassert avg == 12.90, \"Average should be $12.90\"\nassert count == 5, \"Should have 5 transactions\"\nprint(\"Excellent analytics! You can now track Bean Counter's performance across all locations!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_01_functions.html#exercise-5.2---barista-performance-evaluation",
    "href": "tutorials/nb_02_01_functions.html#exercise-5.2---barista-performance-evaluation",
    "title": "Notebook 2.1 - Functions at Bean Counter",
    "section": "Exercise 5.2 - Barista Performance Evaluation",
    "text": "Exercise 5.2 - Barista Performance Evaluation\nCreate a function evaluate_barista_performance that takes:\n\nList of drink preparation times (in seconds)\nList of customer ratings (1-5 as integter (customer stars))\n\nReturns a tuple with:\n\nAverage preparation time\nAverage customer rating\nPerformance level (“excellent”, “good”, “needs_improvement”)\n\nPerformance levels:\n\n“excellent”: avg time &lt; 90 seconds AND rating &gt;= 4.5\n“good”: avg time &lt; 120 seconds AND rating &gt;= 4.0\n“needs_improvement”: otherwise\n\n\n\n\n\n\n\nFor robustness, it is nice to handle the case where the input lists might be empty. For example, if empty, return (0, 0, “needs_improvement”).\n\n\n\n\n# YOUR CODE BELOW\ndef evaluate_barista_performance(prep_times, ratings):\n    # Calculate metrics and determine performance level\n\n\n\nCode\n# Test your barista evaluation function\ntimes = [85, 92, 78, 88, 95]\nratings = [4.5, 5, 4.5, 5, 4.5]\navg_time, avg_rating, level = evaluate_barista_performance(times, ratings)\nassert avg_time == 87.6, \"Average time should be 87.6 seconds\"\nassert avg_rating == 4.7, \"Average rating should be 4.7\"\nassert level == \"excellent\", \"Should be excellent performance\"\n\n# Test a barista who needs improvement\nslow_times = [150, 140, 160, 145]\nlow_ratings = [3, 3.5, 3, 4]\ntime2, rating2, level2 = evaluate_barista_performance(slow_times, low_ratings)\nassert level2 == \"needs_improvement\", \"Slow service should need improvement\"\n\nprint(\"Great job! You can now evaluate and coach baristas across all Bean Counter locations!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-01 Functions"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html",
    "href": "tutorials/nb_02_03_sorting.html",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "",
    "text": "Welcome to your role as Operations Director at Bean Counter!\nCongratulations on becoming Operations Director!\nYour regional management skills were so impressive that the CEO has promoted you to Operations Director! You now oversee operations for the entire Bean Counter empire - 10 locations, 150+ employees, and thousands of daily decisions.\nThe Challenge: Every day brings countless decisions:\n\nWhich stores should receive limited supplies first?\nWhich tasks should baristas prioritize during rush hour?\nWhich locations need emergency support?\nHow do we schedule deliveries efficiently?\n\nMaking the wrong choice costs time, money, and customer satisfaction. You need systematic ways to find the best options!\nYour Mission: Understand sorting and optimization - Python’s tools for finding the best (or worst) options among many choices. You’ll learn to rank, prioritize, and optimize.\nIn this tutorial, we’ll explore how to make data-driven decisions that optimize Bean Counter’s entire operation.\n\n\n\n\n\n\nNoteHow to Use This Tutorial\n\n\n\nCells marked with “YOUR CODE BELOW” expect you to write your own code. Test blocks will verify your solutions.",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-1.1---rank-store-wait-times",
    "href": "tutorials/nb_02_03_sorting.html#exercise-1.1---rank-store-wait-times",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 1.1 - Rank Store Wait Times",
    "text": "Exercise 1.1 - Rank Store Wait Times\nBean Counter tracks average wait times (in seconds) for each location. Sort them to identify which stores need improvement.\nCreate two lists:\n\nfastest_first - sorted from fastest to slowest\nslowest_first - sorted from slowest to fastest\n\n\nwait_times = [95, 120, 85, 150, 110, 90, 135, 88, 125, 105]\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your sorting\nassert fastest_first[0] == 85, \"Fastest time should be 85 seconds\"\nassert fastest_first[-1] == 150, \"Last in fastest_first should be 150\"\nassert slowest_first[0] == 150, \"First in slowest_first should be 150\"\nassert slowest_first[-1] == 85, \"Last in slowest_first should be 85\"\nprint(f\"Fastest to slowest: {fastest_first}\")\nprint(f\"Slowest to fastest: {slowest_first}\")\nprint(\"Perfect! You can now identify which stores need operational improvements!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-1.2---alphabetical-store-directory",
    "href": "tutorials/nb_02_03_sorting.html#exercise-1.2---alphabetical-store-directory",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 1.2 - Alphabetical Store Directory",
    "text": "Exercise 1.2 - Alphabetical Store Directory\nCreate an alphabetically sorted list of store names for the company directory. It should be called alphabetical.\n\nstore_names = [\"Plaza\", \"Downtown\", \"Airport\", \"University\", \"Beach\", \"Station\", \"Mall\", \"Park\"]\n\n# YOUR CODE BELOW\n# Sort alphabetically (A to Z)\n\n\n\nCode\n# Test your alphabetical sorting\nassert alphabetical[0] == \"Airport\", \"First store should be Airport\"\nassert alphabetical[-1] == \"University\", \"Last store should be University\"\nassert len(alphabetical) == 8, \"Should still have 8 stores\"\nprint(f\"Store directory: {alphabetical}\")\nprint(\"Great! Your store directory is professionally organized!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-2.1---daily-operations-extremes",
    "href": "tutorials/nb_02_03_sorting.html#exercise-2.1---daily-operations-extremes",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 2.1 - Daily Operations Extremes",
    "text": "Exercise 2.1 - Daily Operations Extremes\nFind the operational extremes for Bean Counter’s daily metrics:\n\nHighest and lowest sales figures\nFastest and slowest delivery times\nThe difference between best and worst sales (the range)\n\n\ndaily_sales = [4250, 6100, 3900, 5200, 4800, 5500, 4100]\ndelivery_times = [25, 35, 18, 42, 30, 28, 38]  # in minutes\n\n# YOUR CODE BELOW\n\n# Find sales extremes\nhighest_sales =\nlowest_sales =\nsales_range =\n\n# Find delivery extremes\nfastest_delivery =\nslowest_delivery =\n\n\n\nCode\n# Test your extremes\nassert highest_sales == 6100, \"Highest sales should be 6100\"\nassert lowest_sales == 3900, \"Lowest sales should be 3900\"\nassert sales_range == 2200, \"Sales range should be 2200\"\nassert fastest_delivery == 18, \"Fastest delivery should be 18 minutes\"\nassert slowest_delivery == 42, \"Slowest delivery should be 42 minutes\"\nprint(f\"Sales: ${lowest_sales} to ${highest_sales} (range: ${sales_range})\")\nprint(f\"Delivery: {fastest_delivery} to {slowest_delivery} minutes\")\nprint(\"Excellent! You can quickly identify operational extremes for decision-making!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-3.1---rank-stores-by-efficiency",
    "href": "tutorials/nb_02_03_sorting.html#exercise-3.1---rank-stores-by-efficiency",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 3.1 - Rank Stores by Efficiency",
    "text": "Exercise 3.1 - Rank Stores by Efficiency\nSort Bean Counter stores by efficiency (customers served per staff member). Create two rankings:\n\nMost efficient to least efficient\nLeast efficient to most efficient\n\n\nstore_efficiency = [\n    {\"location\": \"Plaza\", \"customers\": 450, \"staff\": 6},      # 75 per staff\n    {\"location\": \"Airport\", \"customers\": 680, \"staff\": 12},   # 56.7 per staff\n    {\"location\": \"Downtown\", \"customers\": 520, \"staff\": 8},   # 65 per staff\n    {\"location\": \"Beach\", \"customers\": 280, \"staff\": 4},      # 70 per staff\n    {\"location\": \"Station\", \"customers\": 410, \"staff\": 7}     # 58.6 per staff\n]\n\n# First, we calculate efficiency for each store\nfor store in store_efficiency:\n    store[\"efficiency\"] = store[\"customers\"] / store[\"staff\"]\n\n# YOUR CODE BELOW\n\n# Sort by efficiency (most efficient first)\nmost_efficient =\n\n# Sort by efficiency (least efficient first)\nleast_efficient =\n\n\n\nCode\n# Test your efficiency ranking\nassert most_efficient[0][\"location\"] == \"Plaza\", \"Plaza should be most efficient\"\nassert most_efficient[-1][\"location\"] == \"Airport\", \"Airport should be least efficient\"\nassert least_efficient[0][\"location\"] == \"Airport\", \"Airport should be first in least efficient\"\nprint(\"Most to least efficient:\")\nfor store in most_efficient:\n    print(f\"  {store['location']}: {store['efficiency']:.1f} customers/staff\")\nprint(\"Perfect! You can now identify which stores operate most efficiently!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-4.1---critical-supply-allocation",
    "href": "tutorials/nb_02_03_sorting.html#exercise-4.1---critical-supply-allocation",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 4.1 - Critical Supply Allocation",
    "text": "Exercise 4.1 - Critical Supply Allocation\nBean Counter has limited specialty coffee beans. Find which store should receive them based on different criteria:\n\nThe store with the lowest current inventory (most urgent need)\nThe store with the highest daily bean usage (highest demand)\n\n\nsupply_data = [\n    {\"store\": \"Plaza\", \"inventory_kg\": 15, \"daily_usage\": 8},\n    {\"store\": \"Downtown\", \"inventory_kg\": 8, \"daily_usage\": 12},\n    {\"store\": \"Airport\", \"inventory_kg\": 25, \"daily_usage\": 15},\n    {\"store\": \"Beach\", \"inventory_kg\": 5, \"daily_usage\": 6},\n    {\"store\": \"University\", \"inventory_kg\": 18, \"daily_usage\": 10}\n]\n\n# YOUR CODE BELOW\n# Find store with lowest inventory\nmost_urgent =\n\n# Find store with highest daily usage\nhighest_demand =\n\n\n\nCode\n# Test your supply allocation\nassert most_urgent[\"store\"] == \"Beach\", \"Beach has lowest inventory\"\nassert highest_demand[\"store\"] == \"Airport\", \"Airport has highest daily usage\"\nprint(f\"Most urgent (lowest inventory): {most_urgent['store']}\")\nprint(f\"Highest demand: {highest_demand['store']}\")\nprint(\"Excellent decision-making! You've allocated supplies optimally!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_02_03_sorting.html#exercise-5.1---morning-rush-scheduling",
    "href": "tutorials/nb_02_03_sorting.html#exercise-5.1---morning-rush-scheduling",
    "title": "Notebook 2.3 - Sorting & Finding Best Options",
    "section": "Exercise 5.1 - Morning Rush Scheduling",
    "text": "Exercise 5.1 - Morning Rush Scheduling\nIt’s 7 AM at Bean Counter Plaza, and you have multiple drink orders to schedule. Apply both SPT and EDD rules to determine the order sequence.\nCreate:\n\nspt_sequence - List of order IDs in SPT order\nedd_sequence - List of order IDs in EDD order\n\n\nrush_orders = [\n    {\"id\": \"Latte1\", \"prep_time\": 4, \"promised_time\": 7.15},\n    {\"id\": \"Espresso1\", \"prep_time\": 2, \"promised_time\": 7.10},\n    {\"id\": \"Cappuccino1\", \"prep_time\": 5, \"promised_time\": 7.20},\n    {\"id\": \"Americano1\", \"prep_time\": 3, \"promised_time\": 7.12},\n    {\"id\": \"Latte2\", \"prep_time\": 4, \"promised_time\": 7.18}\n]\n\n# YOUR CODE BELOW\n# Apply SPT rule (sort by prep_time)\n\n# Extract just the IDs using list comprehension\n\n# Apply EDD rule (sort by promised_time)\n\n# Extract just the IDs using list comprehension\n\n\n\nCode\n# Test your scheduling\nassert spt_sequence[0] == \"Espresso1\", \"Espresso1 should be first in SPT\"\nassert spt_sequence[-1] == \"Cappuccino1\", \"Cappuccino1 should be last in SPT\"\nassert edd_sequence[0] == \"Espresso1\", \"Espresso1 should be first in EDD\"\nassert edd_sequence[1] == \"Americano1\", \"Americano1 should be second in EDD\"\nprint(f\"SPT sequence: {spt_sequence}\")\nprint(f\"EDD sequence: {edd_sequence}\")\nprint(\"Outstanding! You've mastered basic scheduling optimization!\")",
    "crumbs": [
      "02 Advances",
      "NB-02-03 Sorting"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html",
    "href": "tutorials/nb_03_01_numpy.html",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "",
    "text": "Welcome to your role as CEO of Bean Counter!\nCongratulations, Chief Executive Officer!\nAfter your outstanding performance as Operations Director, the board has unanimously appointed you as CEO of Bean Counter! You now lead a coffee empire with:\n\n50+ locations across the country\n1,000+ employees\nMillions of transactions per month\nThousands of products and suppliers\n\nThe Challenge: As CEO, you’re drowning in data. Your Python lists take minutes to process sales reports. Board meetings are tomorrow, and you need answers NOW!\nYour new Tool: NumPy - a Python library that processes numerical data fast. What takes minutes with regular Python takes seconds with NumPy.",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#what-are-packages",
    "href": "tutorials/nb_03_01_numpy.html#what-are-packages",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "What are Packages?",
    "text": "What are Packages?\nAs CEO, you wouldn’t build every tool from scratch - you’d use the best tools available. The same applies to Python!\n\nPackages are collections of pre-written code that solve common problems\nThey’re created by experts and shared with the community\nThink of them as apps you can add to Python to extend its capabilities\n\n\n\n\n\n\n\nTipWhy Use Packages?\n\n\n\nInstead of writing thousands of lines of code yourself, you can install a package in seconds and get professional-grade functionality. It’s like the difference between building your own espresso machine vs. buying a professional one!",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#installing-numpy-with-uv",
    "href": "tutorials/nb_03_01_numpy.html#installing-numpy-with-uv",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Installing NumPy with uv",
    "text": "Installing NumPy with uv\nTo use NumPy (or any package), we first need to install it. We’ll use uv, which we already used to install Python at the start. Do the following in the terminal where you have all your notebooks as well as the files that uv added during its initialization. Not in the notebook!\n# Install NumPy for numerical computing\nuv add numpy\n# While we're at it, let's also install pandas for next session\nuv add pandas\n\n\n\n\n\n\nNoteHow to Install\n\n\n\n\nOpen your terminal (or use the terminal in your IDE)\nType uv add numpy pandas and press Enter\nWait a few seconds for installation to complete\nThat’s it! You can now use NumPy in your code",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#using-installed-packages",
    "href": "tutorials/nb_03_01_numpy.html#using-installed-packages",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Using Installed Packages",
    "text": "Using Installed Packages\nOnce installed, you can import and use packages in your Python code:\nimport numpy as np  # Import NumPy with alias 'np' (standard convention)\nThe as np part creates a shorthand. Instead of typing numpy.array() later, you can type np.array() and access numpy functions.\nNow let’s see why NumPy is essential!\n\n\n\n\n\n\nWarningPrerequisites\n\n\n\nMake sure you’ve installed NumPy using uv add numpy in your terminal before starting the next section!",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#creating-and-using-numpy-arrays",
    "href": "tutorials/nb_03_01_numpy.html#creating-and-using-numpy-arrays",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Creating and Using NumPy Arrays",
    "text": "Creating and Using NumPy Arrays\nA NumPy array is like a Python list, but optimized for numerical operations. Here’s how to work with them:\n\nimport numpy as np\n\n# Creating arrays from Python lists\nprices = [4.50, 3.25, 5.00, 2.75, 4.00]\nprices_array = np.array(prices)  # Convert list to NumPy array\nprint(f\"Original list: {prices}\")\nprint(f\"NumPy array: {prices_array}\")\nprint(f\"Array type: {type(prices_array)}\")\n\n# Accessing elements (just like lists!)\nprint(f\"\\nFirst price: ${prices_array[0]}\")\nprint(f\"Last price: ${prices_array[-1]}\")\nprint(f\"Prices 2-4: {prices_array[1:4]}\")\n\n# The magic: operations on entire arrays at once!\n# Increase all prices by 10%\nincreased_prices = prices_array * 1.10\nprint(f\"\\nAfter 10% increase: {increased_prices}\")\n\n# Add $0.50 service charge to all\nwith_service = prices_array + 0.50\nprint(f\"With service charge: {with_service}\")\n\n# Calculate total revenue if we sell 100 of each\nquantities = np.array([100, 150, 80, 200, 120])\nrevenues = prices_array * quantities  # Element-wise multiplication!\nprint(f\"\\nRevenues: {revenues}\")\nprint(f\"Total revenue: ${np.sum(revenues)}\")\n\nOriginal list: [4.5, 3.25, 5.0, 2.75, 4.0]\nNumPy array: [4.5  3.25 5.   2.75 4.  ]\nArray type: &lt;class 'numpy.ndarray'&gt;\n\nFirst price: $4.5\nLast price: $4.0\nPrices 2-4: [3.25 5.   2.75]\n\nAfter 10% increase: [4.95  3.575 5.5   3.025 4.4  ]\nWith service charge: [5.   3.75 5.5  3.25 4.5 ]\n\nRevenues: [450.  487.5 400.  550.  480. ]\nTotal revenue: $2367.5\n\n\n\n\n\n\n\n\nTipKey NumPy Array Operations\n\n\n\n\nCreate: np.array([1, 2, 3]) - Convert list to array\nMath: array * 2, array + 5 - Operations apply to ALL elements\nAccess: array[0], array[1:3] - Works like lists\nAggregate: np.sum(array), np.mean(array) - Quick statistics",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#exercise-3.1---your-first-analysis",
    "href": "tutorials/nb_03_01_numpy.html#exercise-3.1---your-first-analysis",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Exercise 3.1 - Your First Analysis",
    "text": "Exercise 3.1 - Your First Analysis\nCreate a NumPy array of this week’s daily revenues and calculate the total.\n\nimport numpy as np\n\n# Daily revenues for the week (in thousands)\ndaily_revenues = [125.5, 132.8, 118.9, 145.2, 155.7, 189.3, 176.4]\n\n# YOUR CODE BELOW\n# Convert to NumPy array\nrevenues_array =\n\n# Calculate total weekly revenue\ntotal_revenue =\n\n\n\nCode\n# Test your revenue calculation\nassert isinstance(revenues_array, np.ndarray), \"Should be a NumPy array\"\nassert int(total_revenue) == int(1043.8), f\"Total should be 1043.8, got {total_revenue}\"\nprint(f\"Weekly revenue: ${total_revenue:.1f}k\")\nprint(\"Excellent! You've made your first CEO-level analysis with NumPy!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#exercise-4.1---initialize-company-metrics",
    "href": "tutorials/nb_03_01_numpy.html#exercise-4.1---initialize-company-metrics",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Exercise 4.1 - Initialize Company Metrics",
    "text": "Exercise 4.1 - Initialize Company Metrics\nAs CEO, set up arrays for tracking various company metrics.\n\nimport numpy as np\n\n# YOUR CODE BELOW\n# 1. Create an array of 50 zeros for tracking store profits\nstore_profits =\n\n# 2. Create an array with store IDs from 101 to 150 (50 stores)\nstore_codes =\n\n# 3. Create an array of 12 months, each starting with budget of 100000\nmonthly_budgets =\n\n\n\nCode\n# Test your arrays\nassert store_profits.shape == (50,), \"Should have 50 stores\"\nassert store_codes[0] == 101 and store_codes[-1] == 150, \"Store codes should be 101-150\"\nassert np.sum(monthly_budgets[:3]) == 300000, \"Q1 budget should be 300000\"\nprint(f\"Profit tracking shape: {store_profits.shape}\")\nprint(f\"First 5 store codes: {store_codes[:5]}\")\nprint(f\"Q1 budget total: ${np.sum(monthly_budgets[:3]):,}\")\nprint(\"Perfect! Your metric tracking system is initialized!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#exercise-5.1---company-wide-financial-calculations",
    "href": "tutorials/nb_03_01_numpy.html#exercise-5.1---company-wide-financial-calculations",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Exercise 5.1 - Company-Wide Financial Calculations",
    "text": "Exercise 5.1 - Company-Wide Financial Calculations\nPerform mass calculations across all Bean Counter stores.\n\nimport numpy as np\n\n# Monthly data for 50 stores\nrevenues = np.array([125000, 98000, 145000, 87000, 156000, 134000, 92000, 167000,\n                    118000, 143000, 99000, 175000, 132000, 89000, 154000, 121000,\n                    138000, 95000, 162000, 108000, 147000, 131000, 88000, 159000,\n                    126000, 141000, 93000, 168000, 115000, 152000, 128000, 86000,\n                    144000, 119000, 137000, 96000, 171000, 113000, 149000, 124000,\n                    135000, 91000, 164000, 107000, 146000, 129000, 85000, 158000,\n                    122000, 140000])\n\n# Cost is 65% of revenue for each store\ncosts = revenues * 0.65\n\n# YOUR CODE BELOW\n# 1. Calculate profit for each store (revenue - costs)\nprofits =\n\n# 2. Calculate profit margin for each store (profit / revenue * 100)\nprofit_margins =\n\n# 3. Apply 25% corporate tax to get after-tax profit\nprofits_after_tax =\n\nprint(f\"Total monthly profit (before tax): ${profits.sum():,.2f}\")\nprint(f\"Total monthly profit (after tax): ${profits_after_tax.sum():,.2f}\")\n\n\n\nCode\n# Test your calculations\nassert np.isclose(profits.sum(), 2240700), \"Total profit before tax should be 2,240,700\"\nassert np.isclose(profit_margins.mean(), 35.0), \"Average margin should be 35%\"\nassert np.isclose(profits_after_tax.sum(), 1680525), \"After-tax profit should be 1,680,525\"\nprint(f\"Total monthly profit (before tax): ${profits.sum():,.2f}\")\nprint(f\"Total monthly profit (after tax): ${profits_after_tax.sum():,.2f}\")\nprint(\"Fantastic! You've learned company-wide financial calculations!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#d-arrays",
    "href": "tutorials/nb_03_01_numpy.html#d-arrays",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "2D Arrays",
    "text": "2D Arrays\nSo far, we’ve worked with 1D arrays (like a single row or column). As CEO, you often need 2D arrays. Think of them as tables with rows and columns!\n\nimport numpy as np\n\n# Example: Sales data for 5 stores over 7 days\n# Rows = stores, Columns = days\nsales_table = np.array([\n    [125, 132, 128, 145, 155, 189, 176],  # Store 1\n    [98, 102, 95, 108, 115, 142, 138],    # Store 2\n    [156, 162, 159, 171, 178, 198, 192],  # Store 3\n    [87, 91, 88, 95, 102, 125, 118],      # Store 4\n    [134, 139, 136, 148, 153, 178, 165]   # Store 5\n])\n\nprint(\"Sales Table (5 stores × 7 days):\")\nprint(sales_table)\nprint(f\"\\nShape: {sales_table.shape} (rows, columns)\")\n\n# Calculate statistics along different axes\ntotal_per_store = np.sum(sales_table, axis=1)  # Sum across columns (days) for each store\ntotal_per_day = np.sum(sales_table, axis=0)    # Sum across rows (stores) for each day\n\nprint(f\"\\nTotal sales per store: {total_per_store}\")\nprint(f\"Total sales per day: {total_per_day}\")\n\nSales Table (5 stores × 7 days):\n[[125 132 128 145 155 189 176]\n [ 98 102  95 108 115 142 138]\n [156 162 159 171 178 198 192]\n [ 87  91  88  95 102 125 118]\n [134 139 136 148 153 178 165]]\n\nShape: (5, 7) (rows, columns)\n\nTotal sales per store: [1050  798 1216  706 1053]\nTotal sales per day: [600 626 606 667 703 832 789]\n\n\n\n\n\n\n\n\nTipUnderstanding axis Parameter\n\n\n\nIn 2D arrays:\n\naxis=0 operates DOWN the rows (along columns)\naxis=1 operates ACROSS the columns (along rows)\n\nThink of it this way:\n\naxis=1 gives you one value per row (e.g., average per store)\naxis=0 gives you one value per column (e.g., average per day)",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#boolean-filtering-and-binary-vectors",
    "href": "tutorials/nb_03_01_numpy.html#boolean-filtering-and-binary-vectors",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Boolean Filtering and Binary Vectors",
    "text": "Boolean Filtering and Binary Vectors\nAn important concept: when you filter with a condition, NumPy creates a boolean (True/False) array, also called a binary vector!\n\nimport numpy as np\n\n# Sample satisfaction scores\nscores = np.array([4.8, 3.2, 4.5, 2.8, 4.9, 3.7, 4.2, 5.0])\n\n# When we apply a condition, we get a boolean array (binary vector)\nhigh_scores_mask = scores &gt;= 4.0\nprint(f\"Original scores: {scores}\")\nprint(f\"Boolean mask (&gt;= 4.0): {high_scores_mask}\")\nprint(f\"Type: {type(high_scores_mask)}\")\n\n# We can use this binary vector in several ways:\n\n# 1. Count True values (treating True=1, False=0)\ncount_high = np.sum(high_scores_mask)\nprint(f\"\\nNumber of high scores: {count_high}\")\n\n# 2. Filter to get only values that are True\nfiltered_scores = scores[high_scores_mask]\nprint(f\"High scores only: {filtered_scores}\")\n\n# 3. Do it all in one line (common pattern)\ncount_directly = np.sum(scores &gt;= 4.0)\nprint(f\"Count directly: {count_directly}\")\n\nOriginal scores: [4.8 3.2 4.5 2.8 4.9 3.7 4.2 5. ]\nBoolean mask (&gt;= 4.0): [ True False  True False  True False  True  True]\nType: &lt;class 'numpy.ndarray'&gt;\n\nNumber of high scores: 5\nHigh scores only: [4.8 4.5 4.9 4.2 5. ]\nCount directly: 5\n\n\n\n\n\n\n\n\nImportantBoolean Arrays (Binary Vectors)\n\n\n\nWhen you write array &gt;= value, NumPy creates a boolean array: - True (=1) where condition is met - False (=0) where condition is not met\nThis binary vector can be used to: - Count: np.sum(condition) - sums up the 1s and 0s - Filter: array[condition] - returns only True values - Analyze: Check what percentage meets criteria\n\n\nLet’s see another practical example:\n\nimport numpy as np\n\n# Daily sales for 10 stores\ndaily_sales = np.array([125, 98, 156, 87, 134, 145, 92, 167, 118, 143])\n\n# Find stores exceeding target of 120\ntarget = 120\nexceeds_target = daily_sales &gt; target\n\nprint(f\"Sales: {daily_sales}\")\nprint(f\"Exceeds {target}: {exceeds_target}\")\nprint(f\"\\nStores meeting target: {np.sum(exceeds_target)}\")\nprint(f\"Percentage meeting target: {np.sum(exceeds_target) / len(daily_sales) * 100:.1f}%\")\nprint(f\"Actual sales above target: {daily_sales[exceeds_target]}\")\n\nSales: [125  98 156  87 134 145  92 167 118 143]\nExceeds 120: [ True False  True False  True  True False  True False  True]\n\nStores meeting target: 6\nPercentage meeting target: 60.0%\nActual sales above target: [125 156 134 145 167 143]",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_01_numpy.html#exercise-6.1---analyze-company-performance",
    "href": "tutorials/nb_03_01_numpy.html#exercise-6.1---analyze-company-performance",
    "title": "Notebook 3.1 - NumPy for CEO Analytics",
    "section": "Exercise 6.1 - Analyze Company Performance",
    "text": "Exercise 6.1 - Analyze Company Performance\nAnalyze performance metrics across all Bean Counter locations using 2D arrays.\n\nimport numpy as np\n\n# Daily customer counts for 50 stores over 30 days\n# This creates a 2D array: rows = stores, columns = days\nnp.random.seed(100)\ndaily_customers = np.random.randint(150, 500, size=(50, 30))  # 50 stores, 30 days\n\nprint(f\"Data shape: {daily_customers.shape}\")\nprint(f\"First store's first 5 days: {daily_customers[0, :5]}\")\n\n# YOUR CODE BELOW\n# 1. Calculate total customers served across all stores in the month\ntotal_customers =\n\n# 2. Calculate average daily customers per store (across all stores and days)\navg_daily_per_store =\n\n# 3. Find the busiest single day (max customers in one store on one day)\nbusiest_day =\n\n# 4. Find stores that averaged over 350 customers per day\n# Hint: Use np.mean(daily_customers, axis=1) to get average per store\n# Then count how many stores have average &gt; 350\nstore_averages =\nhigh_traffic_stores =\n\n\n\nCode\n# Test your analysis\nassert total_customers == 492171, f\"Total should be 492,171 , got {total_customers}\"\nassert np.isclose(avg_daily_per_store, 328.1, atol=0.1), f\"Average should be ~328.1\"\nassert busiest_day == 499, f\"Busiest day should be 499, got {busiest_day}\"\nprint(f\"Total customers served: {total_customers:,}\")\nprint(f\"Average daily customers per store: {avg_daily_per_store:.1f}\")\nprint(f\"Busiest single day: {busiest_day} customers\")\nprint(f\"High-traffic stores (&gt;350/day): {high_traffic_stores}\")\nprint(\"Excellent CEO-level analysis! You understand your company's traffic patterns!\")",
    "crumbs": [
      "03 Foundation",
      "NB-03-01 Numpy"
    ]
  },
  {
    "objectID": "tutorials/nb_03_03_visualization.html",
    "href": "tutorials/nb_03_03_visualization.html",
    "title": "Notebook 3.3 - Visualization & Integration",
    "section": "",
    "text": "Welcome to your final CEO challenge at Bean Counter!\nThe Board Meeting Challenge\nTomorrow morning, you’re presenting Bean Counter’s annual performance to the board of directors and potential investors. You have:\n\nMassive datasets analyzed with NumPy\nComplex reports created with Pandas\nIncredible insights about the business\n\nThe Problem: Numbers alone don’t convince boards. They need to SEE the story! A table with 1000 rows won’t inspire investment, but a compelling chart will.\nYour Solution: Data Visualization - turning your analyses into powerful visual stories that drive decisions and secure funding.\nIn this tutorial, you’ll create the visualizations that will secure Bean Counter’s future and cement your legacy as CEO.\n\n\n\n\n\n\nWarningHow to Use This Tutorial\n\n\n\nImport matplotlib along with pandas and numpy. Remember, we work with uv, so just use uv add matplotlib in the terminal. Now you can create compelling charts for your board presentation!\n\n\n\n\n\n\n\n\nTipStart practicing generate AI\n\n\n\nThe creation of plots is a perfect opportunity to start practicing generate AI. Usually you need a lot of code for nice visualizations and most of it is repetitive.",
    "crumbs": [
      "03 Foundation",
      "NB-03-03 Plotting"
    ]
  },
  {
    "objectID": "tutorials/nb_03_03_visualization.html#exercise-1.1---product-performance-bar-chart",
    "href": "tutorials/nb_03_03_visualization.html#exercise-1.1---product-performance-bar-chart",
    "title": "Notebook 3.3 - Visualization & Integration",
    "section": "Exercise 1.1 - Product Performance Bar Chart",
    "text": "Exercise 1.1 - Product Performance Bar Chart\nCreate a bar chart showing Bean Counter’s product sales for the board meeting.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Product sales data\nproducts_df = pd.DataFrame({\n    'product': ['Latte', 'Espresso', 'Cappuccino', 'Americano', 'Mocha', 'Macchiato'],\n    'units_sold': [3200, 4500, 2800, 2100, 1900, 1500]\n})\n\n# YOUR CODE BELOW\n# 1. Sort products by units_sold (highest first)\nproducts_sorted =\n\n# 2. Create a bar chart",
    "crumbs": [
      "03 Foundation",
      "NB-03-03 Plotting"
    ]
  },
  {
    "objectID": "tutorials/nb_03_03_visualization.html#exercise-2.1---customer-growth-trend",
    "href": "tutorials/nb_03_03_visualization.html#exercise-2.1---customer-growth-trend",
    "title": "Notebook 3.3 - Visualization & Integration",
    "section": "Exercise 2.1 - Customer Growth Trend",
    "text": "Exercise 2.1 - Customer Growth Trend\nShow the board Bean Counter’s customer growth over the past 8 months.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Customer data (in thousands)\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug']\ncustomers = [145, 152, 158, 165, 174, 182, 195, 208]\n\n# YOUR CODE BELOW\n# Create a line plot showing customer growth",
    "crumbs": [
      "03 Foundation",
      "NB-03-03 Plotting"
    ]
  },
  {
    "objectID": "tutorials/nb_03_03_visualization.html#exercise-3.1---store-efficiency-distribution",
    "href": "tutorials/nb_03_03_visualization.html#exercise-3.1---store-efficiency-distribution",
    "title": "Notebook 3.3 - Visualization & Integration",
    "section": "Exercise 3.1 - Store Efficiency Distribution",
    "text": "Exercise 3.1 - Store Efficiency Distribution\nShow the board how store efficiency is distributed across all locations.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulate efficiency scores for 50 stores\nnp.random.seed(100)\nefficiency_scores = np.random.normal(75, 12, 50)  # Mean 75, std 12\n\n# YOUR CODE BELOW\n# Create histogram of efficiency distribution",
    "crumbs": [
      "03 Foundation",
      "NB-03-03 Plotting"
    ]
  },
  {
    "objectID": "tutorials/nb_03_03_visualization.html#exercise-4.1---complete-ceo-dashboard",
    "href": "tutorials/nb_03_03_visualization.html#exercise-4.1---complete-ceo-dashboard",
    "title": "Notebook 3.3 - Visualization & Integration",
    "section": "Exercise 4.1 - Complete CEO Dashboard",
    "text": "Exercise 4.1 - Complete CEO Dashboard\nCreate an integrated dashboard combining NumPy simulation with Pandas analysis and visualization. Create revenue projections for the company:\n\nStart at $6M in January\nGrow approximately 2% each month\nAdd random variation (±25%) to simulate market fluctuations\n\n\n\n\n\n\n\nTo create realistic monthly growth:\n\nStart with base revenue of 6.0M\nEach month, apply 2% growth: revenue = previous_revenue * 1.02\nAdd random variation: multiply by np.random.uniform(0.75, 1.25)\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulate next year's projections\nnp.random.seed(42)\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# YOUR CODE BELOW\n# 1. Create revenue projections for the company\n# Start with 6.0M, grow each month by 2% with random variation\nrevenue_projection = []\ncurrent_revenue = 6.0  # Starting revenue in millions\n\n# Loop through 12 months\n\n\n# 2. Create DataFrame with months and revenue\n\n\n# 3. Calculate cumulative revenue\n\n\n# 4. Create visualization with two subplots",
    "crumbs": [
      "03 Foundation",
      "NB-03-03 Plotting"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html",
    "href": "tutorials/nb_04_02_techventure.html",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "",
    "text": "TechVenture Innovation Fund is a venture capital firm specializing in early-stage technology investments. Founded in 2018, the fund has successfully backed 23 startups with an average return of 32% per year. The partners pride themselves on data-driven decision making and sophisticated risk analysis.\nYour Role: You’ve been hired as consultants to analyze their latest investment opportunity.\n\n\n\nTechVenture has €2 million available for immediate deployment. After extensive due diligence, they’ve narrowed their options to four promising startups. Due to diversification requirements and partnership agreements, they must invest in exactly two startups, allocating €1 million to each.\n\n\n\n\n\nIndustry: Enterprise AI/SaaS\nProduct: AI-powered business intelligence platform\nMarket Size: €45B growing at 25% annually\nCompetition: Moderate (established players but room for innovation)\nReturn Distribution: Normal distribution\n\nMean return: 25% per year\nStandard deviation: 15%\n\nKey Risk: Technology adoption speed, enterprise sales cycles\n\n\n\n\n\nIndustry: Renewable Energy Technology\nProduct: Next-generation solar panel storage systems\nMarket Size: €30B growing at 18% annually\nCompetition: High (many players, commoditization risk)\nReturn Distribution: Normal distribution\n\nMean return: 18% per year\nStandard deviation: 8%\n\nKey Risk: Regulatory changes, commodity price fluctuations\n\n\n\n\n\nIndustry: Medical Devices / Wearables\nProduct: FDA-approved continuous health monitoring wearable\nMarket Size: €20B growing at 35% annually\nCompetition: Low (first-mover in specific medical conditions)\nReturn Distribution: Normal distribution\n\nMean return: 30% per year\nStandard deviation: 25%\n\nKey Risk: Regulatory approval delays, clinical trial outcomes\n\n\n\n\n\nIndustry: B2B Fintech\nProduct: Automated payment reconciliation for enterprises\nMarket Size: €15B growing at 20% annually\nCompetition: Moderate (fragmented market)\nReturn Distribution: Uniform distribution\n\nMinimum return: 10% per year\nMaximum return: 35% per year\n\nKey Risk: Customer acquisition cost, banking partnerships\n\n\n\n\n\n\nThe fund evaluates investments based on multiple criteria:\n\nExpected Total Return: The mean return across all scenarios\nRisk-Adjusted Return: Return relative to volatility\nDownside Protection: Probability of loss (return &lt; 0%)\nUpside Potential: Probability of exceptional returns (&gt;50% total)\nWorst-Case Scenario: Expected shortfall in bottom 10% of outcomes\n\n\n\n\n\nMust select exactly 2 startups\nMust invest €1 million in each selected startup\nCannot invest in more or fewer than 2 startups\nInvestment horizon is 1 year for this analysis\nAssume startups’ returns are independent (no correlation)",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#company-background",
    "href": "tutorials/nb_04_02_techventure.html#company-background",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "",
    "text": "TechVenture Innovation Fund is a venture capital firm specializing in early-stage technology investments. Founded in 2018, the fund has successfully backed 23 startups with an average return of 32% per year. The partners pride themselves on data-driven decision making and sophisticated risk analysis.\nYour Role: You’ve been hired as consultants to analyze their latest investment opportunity.",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#the-investment-opportunity",
    "href": "tutorials/nb_04_02_techventure.html#the-investment-opportunity",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "",
    "text": "TechVenture has €2 million available for immediate deployment. After extensive due diligence, they’ve narrowed their options to four promising startups. Due to diversification requirements and partnership agreements, they must invest in exactly two startups, allocating €1 million to each.\n\n\n\n\n\nIndustry: Enterprise AI/SaaS\nProduct: AI-powered business intelligence platform\nMarket Size: €45B growing at 25% annually\nCompetition: Moderate (established players but room for innovation)\nReturn Distribution: Normal distribution\n\nMean return: 25% per year\nStandard deviation: 15%\n\nKey Risk: Technology adoption speed, enterprise sales cycles\n\n\n\n\n\nIndustry: Renewable Energy Technology\nProduct: Next-generation solar panel storage systems\nMarket Size: €30B growing at 18% annually\nCompetition: High (many players, commoditization risk)\nReturn Distribution: Normal distribution\n\nMean return: 18% per year\nStandard deviation: 8%\n\nKey Risk: Regulatory changes, commodity price fluctuations\n\n\n\n\n\nIndustry: Medical Devices / Wearables\nProduct: FDA-approved continuous health monitoring wearable\nMarket Size: €20B growing at 35% annually\nCompetition: Low (first-mover in specific medical conditions)\nReturn Distribution: Normal distribution\n\nMean return: 30% per year\nStandard deviation: 25%\n\nKey Risk: Regulatory approval delays, clinical trial outcomes\n\n\n\n\n\nIndustry: B2B Fintech\nProduct: Automated payment reconciliation for enterprises\nMarket Size: €15B growing at 20% annually\nCompetition: Moderate (fragmented market)\nReturn Distribution: Uniform distribution\n\nMinimum return: 10% per year\nMaximum return: 35% per year\n\nKey Risk: Customer acquisition cost, banking partnerships",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#success-metrics",
    "href": "tutorials/nb_04_02_techventure.html#success-metrics",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "",
    "text": "The fund evaluates investments based on multiple criteria:\n\nExpected Total Return: The mean return across all scenarios\nRisk-Adjusted Return: Return relative to volatility\nDownside Protection: Probability of loss (return &lt; 0%)\nUpside Potential: Probability of exceptional returns (&gt;50% total)\nWorst-Case Scenario: Expected shortfall in bottom 10% of outcomes",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#constraints-and-requirements",
    "href": "tutorials/nb_04_02_techventure.html#constraints-and-requirements",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "",
    "text": "Must select exactly 2 startups\nMust invest €1 million in each selected startup\nCannot invest in more or fewer than 2 startups\nInvestment horizon is 1 year for this analysis\nAssume startups’ returns are independent (no correlation)",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#your-mission",
    "href": "tutorials/nb_04_02_techventure.html#your-mission",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Your Mission",
    "text": "Your Mission\nUse Monte Carlo simulation to determine which pair of startups TechVenture should invest in. Your analysis should:\n\nSimulate at least 10,000 scenarios for each startup\nEvaluate all possible pairs (there are 6 combinations)\nCompare portfolios using multiple risk metrics\nRecommend the optimal investment pair\nJustify your recommendation with data",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#evaluation-criteria",
    "href": "tutorials/nb_04_02_techventure.html#evaluation-criteria",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Evaluation Criteria",
    "text": "Evaluation Criteria\nYour presentation will be evaluated on:\n\nCorrectness (50%): Accurate simulation and calculations\nBusiness Reasoning (25%): Clear justification aligned with fund goals\nPresentation (25%): Clear, professional one-slide summary",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#time-limit",
    "href": "tutorials/nb_04_02_techventure.html#time-limit",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Time Limit",
    "text": "Time Limit\nYou have until next session to complete your analysis and prepare your presentation.",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#helpful-functions-optional-use",
    "href": "tutorials/nb_04_02_techventure.html#helpful-functions-optional-use",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Helpful Functions (Optional Use)",
    "text": "Helpful Functions (Optional Use)\n\ndef calculate_portfolio_metrics(returns_1, returns_2, investment=1_000_000):\n    \"\"\"\n    Calculate metrics for a portfolio of two startups\n\n    Parameters:\n    - returns_1: array of returns for startup 1 (as decimals, e.g., 0.25 for 25%)\n    - returns_2: array of returns for startup 2\n    - investment: amount invested in each startup\n\n    Returns:\n    - Dictionary with portfolio metrics\n    \"\"\"\n    # Portfolio returns (equal weight)\n    portfolio_returns = 0.5 * returns_1 + 0.5 * returns_2\n\n    # Calculate absolute returns in euros\n    absolute_returns = portfolio_returns * 2 * investment\n\n    metrics = {\n        'mean_return': portfolio_returns.mean(),\n        'std_dev': portfolio_returns.std(),\n        'prob_loss': (portfolio_returns &lt; 0).mean(),\n        'prob_high_return': (portfolio_returns &gt; 0.5).mean(),\n        'var_5': np.percentile(portfolio_returns, 5),\n        'expected_profit': absolute_returns.mean()\n    }\n\n    return metrics\n\ndef expected_shortfall(returns, percentile=10):\n    \"\"\"\n    Calculate the expected shortfall (conditional VaR)\n\n    Parameters:\n    - returns: array of returns\n    - percentile: percentile for worst-case scenarios\n\n    Returns:\n    - Average return in the worst X% of scenarios\n    \"\"\"\n    threshold = np.percentile(returns, percentile)\n    worst_returns = returns[returns &lt;= threshold]\n    return worst_returns.mean() if len(worst_returns) &gt; 0 else 0\n\n# Example usage (delete or modify as needed):\nprint(\"Helper functions loaded and ready to use!\")\n\nHelper functions loaded and ready to use!",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#required-deliverables",
    "href": "tutorials/nb_04_02_techventure.html#required-deliverables",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Required Deliverables",
    "text": "Required Deliverables\n\n1. One-Slide Recommendation\nCreate one-slide (PDF) containing:\n\nRecommendation: Which 2 startups to invest in (clearly stated)\nExpected Return: Total expected return in € and %\nRisk Assessment: Your personal risk assessment\nJustification: 2-3 bullet points explaining why this pair\nVisual: One chart comparing the 6 portfolio options (optional but recommended)\n\n\n\n2. Presentation Preparation\nBe ready to present your recommendation in 3 minutes:\n\n1 minute: State recommendation and key metrics\n1 minute: Explain your analysis approach\n1 minute: Justify why this is the best choice for TechVenture",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#strategy-suggestions",
    "href": "tutorials/nb_04_02_techventure.html#strategy-suggestions",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Strategy Suggestions",
    "text": "Strategy Suggestions\n\nStart Simple: Get one startup simulation working before scaling\nVerify Distributions: Plot histograms to check your simulations look correct\nThink Like an Investor: Consider both return AND risk\nUse Vectorization: NumPy operations are faster than loops\nDocument Assumptions: Be clear about any choices you make",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "tutorials/nb_04_02_techventure.html#common-pitfalls-to-avoid",
    "href": "tutorials/nb_04_02_techventure.html#common-pitfalls-to-avoid",
    "title": "Competition 01 - TechVenture Investment Challenge",
    "section": "Common Pitfalls to Avoid",
    "text": "Common Pitfalls to Avoid\n\nDon’t forget to convert percentages to decimals (25% = 0.25)\nRemember you’re investing €2M total (€1M each in 2 startups)\nCheck that your uniform distribution is implemented correctly\nConsider that high return often comes with high risk",
    "crumbs": [
      "04 Monte Carlo",
      "NB-04-02 Competition"
    ]
  },
  {
    "objectID": "assignments/assignment_01.html",
    "href": "assignments/assignment_01.html",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "",
    "text": "Due: Start of Lecture 8 Weight: 30% of final grade Expected Time: 4-6 hours Work: Groups\nYou’re a a group of junior analyst at a consulting firm. A client needs help with:\n\nUnderstanding investment risk using simulation\nForecasting product demand"
  },
  {
    "objectID": "assignments/assignment_01.html#assignment-overview",
    "href": "assignments/assignment_01.html#assignment-overview",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "",
    "text": "Due: Start of Lecture 8 Weight: 30% of final grade Expected Time: 4-6 hours Work: Groups\nYou’re a a group of junior analyst at a consulting firm. A client needs help with:\n\nUnderstanding investment risk using simulation\nForecasting product demand"
  },
  {
    "objectID": "assignments/assignment_01.html#consultants",
    "href": "assignments/assignment_01.html#consultants",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Consultants",
    "text": "Consultants\nWho is part of your group?\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#setup",
    "href": "assignments/assignment_01.html#setup",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Setup",
    "text": "Setup\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sets a random seed for reproducibility (no need to adjust this for you)\nnp.random.seed(42)"
  },
  {
    "objectID": "assignments/assignment_01.html#part-a-investment-risk-simulation-50",
    "href": "assignments/assignment_01.html#part-a-investment-risk-simulation-50",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Part A: Investment Risk Simulation (50%)",
    "text": "Part A: Investment Risk Simulation (50%)\n\nScenario\nYour client wants to invest €100,000 in a new product launch. They need to understand the risk.\nGiven Information:\n\nBest case: €300,000 return (20% probability)\nMost likely: €150,000 return (60% probability)\nWorst case: €50,000 return (20% probability)\n\n\n\nTask 1: Simple Monte Carlo Simulation (15%)\n\n# Create a function that runs simulations and randomly picks outcomes\ndef simulate_investment(n_simulations=100):\n    \"\"\"\n    Run Monte Carlo simulation for investment returns.\n\n    Returns:\n        array: Simulation results\n    \"\"\"\n    # Define possible outcomes and their probabilities\n    outcomes = [300000, 150000, 50000]\n    probabilities = [0.2, 0.6, 0.2]\n\n    # Hint: use np.random.choice() with probabilities\n    # YOUR CODE HERE\n\n\n    return results\n\n# Run simulation\n# YOUR CODE HERE\n\n\n\nTask 2: Add Uncertainty to Probabilities (15%)\n\ndef simulate_with_uncertainty(n_simulations=100):\n    \"\"\"\n    Simulate investment with uncertain probabilities.\n    - Best case probability: 10% to 30% (uniform)\n    - Worst case probability: 10% to 30% (uniform)\n    - Most likely probability: remainder to sum to 100%\n    \"\"\"\n    outcomes = [300000, 150000, 50000]\n    results = []\n\n    return results\n\n# Run simulation with uncertainty\n# YOUR CODE HERE\n\n\n\nTask 3: Analysis & Visualization (20%)\n\n# Create histogram of returns\n# YOUR CODE HERE\n\n# Calculate key metrics\n# 1. Probability of losing money (return &lt; €100,000)\n# 2. 95% Value at Risk (5th percentile)\n# 3. Expected profit\n# YOUR CODE HERE\n\nBusiness Question: Should the client make this investment? Write 3-4 sentences explaining your recommendation.\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#part-b-demand-forecasting-50",
    "href": "assignments/assignment_01.html#part-b-demand-forecasting-50",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Part B: Demand Forecasting (50%)",
    "text": "Part B: Demand Forecasting (50%)\n\nScenario\nA retail client needs to forecast demand for the next 3 months to plan inventory.\n\n\nThe Data\n\n# 24 months of sales data\nsales_data = {\n    'month': list(range(1, 25)),\n    'sales_units': [\n        120, 135, 155, 145,  # Spring Year 1\n        165, 180, 195, 175,  # Summer Year 1\n        150, 140, 125, 130,  # Fall Year 1\n        110, 105, 115, 125,  # Winter Year 1/2\n        140, 150, 170, 160,  # Spring Year 2\n        175, 190, 210, 185   # Summer Year 2\n    ]\n}\n\n# Convert to pandas DataFrame for easier handling\ndf = pd.DataFrame(sales_data)\nprint(df.head())\nprint(f\"\\nTotal months: {len(df)}\")\nprint(f\"Average sales: {df['sales_units'].mean():.1f}\")\n\n   month  sales_units\n0      1          120\n1      2          135\n2      3          155\n3      4          145\n4      5          165\n\nTotal months: 24\nAverage sales: 152.1\n\n\n\n\nTask 1: Moving Average Forecast (15%)\n\ndef moving_average_forecast(data, window_size=3):\n    \"\"\"\n    Calculate moving average forecast for next period.\n\n    Args:\n        data: List or array of historical values\n        window_size: Number of periods to average\n\n    Returns:\n        float: Forecast for next period\n    \"\"\"\n    # YOUR CODE HERE\n    # Take the average of the last 'window_size' periods\n\n    return forecast\n\n# Test different window sizes and print the results\n# YOUR CODE HERE\n\n\n\nTask 2: Exponential Smoothing (15%)\nUnderstanding Exponential Smoothing:\nExponential smoothing gives more weight to recent observations while still considering historical data. The formula is:\n\\[F_t = α × A_(t-1) + (1 - α) × F_(t-1)\\]\nWhere:\n\n\\(F_t\\) = Forecast for period \\(t\\)\n\\(A_(t-1)\\) = Actual value in previous period\n\\(F_(t-1)\\) = Forecast for previous period\n\\(α\\) = Smoothing parameter between 0 and 1\n\nHow it works:\n\nStart with the first actual value as your initial forecast: \\(F_1 = A_1\\)\nFor each subsequent period, update the forecast using the formula above\nHigher α (e.g., 0.7) = more weight on recent data (responsive to changes)\nLower α (e.g., 0.1) = more weight on historical pattern (smooth, stable)\n\nExample with α = 0.3:\n\nMonth 1: Actual = 120, Forecast = 120 (initial)\nMonth 2: Actual = 135, Forecast = 0.3 × 120 + 0.7 × 120 = 120\nMonth 3: Actual = 155, Forecast = 0.3 × 135 + 0.7 × 120 = 124.5\nAnd so on…\n\n\ndef exponential_smoothing(data, alpha=0.3):\n    \"\"\"\n    Calculate exponential smoothing forecast for next period.\n\n    Args:\n        data: Historical values (list or array)\n        alpha: Smoothing parameter (0-1)\n               Higher alpha = more weight on recent data\n\n    Returns:\n        float: Forecast for next period\n    \"\"\"\n    # Initialize forecast with first actual value\n    forecast = data[0]\n\n    # YOUR CODE HERE\n    # Loop through data starting from index 1\n    # For each actual value, update forecast using the formula:\n    #   forecast = alpha * actual + (1 - alpha) * forecast\n\n    # Return the final forecast (which predicts the next period)\n    return forecast\n\n# Test different alpha values and print the results\n# Try alpha = 0.1 (smooth), 0.3 (balanced), 0.7 (responsive)\n# YOUR CODE HERE\n\n\n\nTask 3: Evaluate and Compare Methods (20%)\n\n# Split data: first 20 months for training, last 4 for testing\ntrain_data = df['sales_units'].values[:20]\ntest_data = df['sales_units'].values[20:]\n\n# Generate forecasts for test period\nma_forecasts = []\nes_forecasts = []\n\n# For each test month:\n# 1. Use training data to forecast\n# 2. Add actual value to training for next forecast\n# YOUR CODE HERE\n\n# Calculate Mean Absolute Error (MAE)\n# YOUR CODE HERE\n\n\n# Visualization\n# Add lines for:\n# - Moving average forecasts\n# - Exponential smoothing forecasts\n# Mark the train/test split\n# YOUR CODE HERE\n\nBusiness Question: Which forecasting method would you recommend and why? How much safety stock should they hold (based on your assumption)? (3-4 sentences)\n\n\"\"\"\nYOUR ANSWER HERE:\n\"\"\"\n\n'\\nYOUR ANSWER HERE:\\n'"
  },
  {
    "objectID": "assignments/assignment_01.html#submission-checklist",
    "href": "assignments/assignment_01.html#submission-checklist",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Submission Checklist",
    "text": "Submission Checklist\n\nAll code cells run without errors\nFunctions are commented\nVisualizations are clear and labeled\nBusiness questions are answered\nNames added to top of notebook"
  },
  {
    "objectID": "assignments/assignment_01.html#tips",
    "href": "assignments/assignment_01.html#tips",
    "title": "Assignment 1: Risk Analysis & Forecasting",
    "section": "Tips",
    "text": "Tips\n\nUse AI tools to help understand concepts and programm, but make sure you understand the code\nStart simple - get something working before optimizing\nRemember: the goal is good solutions, not perfect ones"
  }
]